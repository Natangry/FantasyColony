// ===== FILE: Assets/Editor/SpriteImportDefaults.cs =====
// Editor-only: ensures sprites import with our project defaults (hi-res, crisp pixels).
// - Applies automatically to any texture under a folder named "Sprites" (e.g. Assets/Resources/Sprites/)
// - Adds menu items to (re)apply settings to selected textures or an entire folder
//
// Defaults:
//   TextureType: Sprite (2D and UI)
//   SpriteMode: Single
//   Pixels Per Unit: 64
//   Filter Mode: Point (no filter)
//   Compression: None (Uncompressed)
//   Wrap Mode: Clamp
//   MipMaps: Off
//   sRGB: On
//   Alpha Is Transparency: On (where supported)
//   Pivot: Bottom-Center (0.5, 0.0)

#if UNITY_EDITOR
using System;
using System.Linq;
using UnityEditor;
using UnityEngine;
using System.Reflection;

namespace FantasyColony.EditorTools
{
    public class SpriteImportDefaults : AssetPostprocessor
    {
        const float DefaultPPU = 64f;
        const int   DefaultMaxSize = 1024;

        static bool IsSpritePath(string path)
        {
            if (string.IsNullOrEmpty(path)) return false;
            path = path.Replace('\\', '/').ToLowerInvariant();
            return path.Contains("/sprites/");
        }

        void OnPreprocessTexture()
        {
            if (!IsSpritePath(assetPath)) return;
            var ti = (TextureImporter)assetImporter;
            ApplyDefaults(ti);
        }

        static void ApplyDefaults(TextureImporter ti)
        {
            ti.textureType = TextureImporterType.Sprite;
            ti.spriteImportMode = SpriteImportMode.Single;
            ti.spritePixelsPerUnit = DefaultPPU;
            ti.mipmapEnabled = false;
            ti.filterMode = FilterMode.Point;
            ti.textureCompression = TextureImporterCompression.Uncompressed;
            ti.wrapMode = TextureWrapMode.Clamp;
            ti.maxTextureSize = DefaultMaxSize;

            // Color space & alpha handling
#if UNITY_2019_3_OR_NEWER
            ti.sRGBTexture = true;
#endif
#if !UNITY_2023_1_OR_NEWER
            // In newer versions this field may be hidden/ignored, but it's safe to set where available.
            ti.alphaIsTransparency = true;
#endif
#if UNITY_2021_2_OR_NEWER
            ti.alphaSource = TextureImporterAlphaSource.FromInput;
#endif

            // Pivot: Bottom-Center (Unity 6 removed 'spriteAlignment'; set via spritePivot and
            // use reflection to set alignment to Custom when property exists on older versions)
            SetPivotBottomCenter(ti);
        }

        static void SetPivotBottomCenter(TextureImporter ti)
        {
            // Always set explicit pivot
            ti.spritePivot = new Vector2(0.5f, 0f);

            // Try to set alignment to Custom when the legacy property exists
            try
            {
                var prop = typeof(TextureImporter).GetProperty("spriteAlignment",
                    BindingFlags.Public | BindingFlags.Instance);
                if (prop != null && prop.CanWrite)
                {
                    var enumType = prop.PropertyType;
                    object customVal = null;
                    // If type is an enum that defines "Custom", use it; otherwise fall back to 9
                    if (enumType.IsEnum && Enum.GetNames(enumType).Contains("Custom"))
                        customVal = Enum.Parse(enumType, "Custom");
                    else
                        customVal = Convert.ChangeType(9, enumType); // 9 == SpriteAlignment.Custom in legacy

                    prop.SetValue(ti, customVal);
                }
            }
            catch
            {
                // Safe no-op on newer Unity versions
            }
        }

        // --- Context menus ---------------------------------------------------

        [MenuItem("Assets/Sprites/Apply Sprite Defaults (64 PPU)", true)]
        static bool ValidateApplyToSelection()
        {
            return Selection.assetGUIDs != null && Selection.assetGUIDs.Length > 0;
        }

        [MenuItem("Assets/Sprites/Apply Sprite Defaults (64 PPU)")]
        static void ApplyToSelection()
        {
            int count = 0;
            foreach (var guid in Selection.assetGUIDs)
            {
                var path = AssetDatabase.GUIDToAssetPath(guid);
                if (string.IsNullOrEmpty(path)) continue;
                if (!IsSpritePath(path)) continue;
                var ti = AssetImporter.GetAtPath(path) as TextureImporter;
                if (ti == null) continue;
                ApplyDefaults(ti);
                AssetDatabase.ImportAsset(path, ImportAssetOptions.ForceUpdate);
                count++;
            }
            Debug.Log($"[SpriteImportDefaults] Applied to {count} asset(s).");
        }

        [MenuItem("Assets/Sprites/Apply Defaults To Folder (recursive)", true)]
        static bool ValidateApplyToFolder()
        {
            // Enable when a folder is selected
            return Selection.assetGUIDs.Any(guid =>
            {
                var path = AssetDatabase.GUIDToAssetPath(guid);
                return AssetDatabase.IsValidFolder(path);
            });
        }

        [MenuItem("Assets/Sprites/Apply Defaults To Folder (recursive)")]
        static void ApplyToFolder()
        {
            int total = 0;
            foreach (var guid in Selection.assetGUIDs)
            {
                var folder = AssetDatabase.GUIDToAssetPath(guid);
                if (!AssetDatabase.IsValidFolder(folder)) continue;
                var guids = AssetDatabase.FindAssets("t:Texture2D", new[] { folder });
                foreach (var texGuid in guids)
                {
                    var path = AssetDatabase.GUIDToAssetPath(texGuid);
                    if (!IsSpritePath(path)) continue;
                    var ti = AssetImporter.GetAtPath(path) as TextureImporter;
                    if (ti == null) continue;
                    ApplyDefaults(ti);
                    AssetDatabase.ImportAsset(path, ImportAssetOptions.ForceUpdate);
                    total++;
                }
            }
            Debug.Log($"[SpriteImportDefaults] Applied to {total} asset(s) in folder(s).");
        }
    }
}
#endif


// ===== FILE: Assets/Scripts/Boot/BuildBootstrap.cs =====
using UnityEngine;
using FantasyColony.Defs;
using System.Linq;

/// <summary>
/// Guarantees build systems exist at runtime and that defs are loaded.
/// This runs automatically after scene load.
/// </summary>
public static class BuildBootstrap
{
    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    public static void EnsureOnLoad()
    {
        Ensure();
    }

    public static GameObject Ensure()
    {
        var go = GameObject.Find("BuildSystems (Auto)");
        if (go == null)
        {
            go = new GameObject("BuildSystems (Auto)");
            Object.DontDestroyOnLoad(go);
        }

        if (go.GetComponent<BuildModeController>() == null)
            go.AddComponent<BuildModeController>();
        if (go.GetComponent<BuildPlacementTool>() == null)
            go.AddComponent<BuildPlacementTool>();

        // Make sure defs are available
        try
        {
            if (DefDatabase.Buildings == null || DefDatabase.Visuals == null ||
                DefDatabase.Buildings.Count == 0 || DefDatabase.Visuals.Count == 0)
            {
                DefDatabase.LoadAll();
            }
        }
        catch
        {
            // ignore â€“ bring-up should still run with fallbacks
        }

        // Ensure there is a palette HUD
        var pal = GameObject.Find("BuildPalette (Auto)");
        if (pal == null)
        {
            pal = new GameObject("BuildPalette (Auto)");
            pal.AddComponent<BuildPaletteHUD>();
            Object.DontDestroyOnLoad(pal);
            Debug.Log("[BuildBootstrap] Spawned BuildPalette");
        }

        return go;
    }
}



// ===== FILE: Assets/Scripts/Boot/BuildUIBootstrap.cs =====
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;
using UnityEngine.EventSystems;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.UI;
#endif

/// <summary>
/// Creates a uGUI Build toggle (Canvas + Button) at runtime for gameplay scenes only.
/// Avoids IMGUI artifacts and scales with resolution automatically.
/// </summary>
public static class BuildUIBootstrap
{
    const string CanvasName = "BuildCanvas (Auto)";

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    static void Init()
    {
        SceneManager.activeSceneChanged += OnSceneChanged;
        EnsureForCurrentScene();
    }

    static void OnSceneChanged(Scene from, Scene to)
    {
        EnsureForCurrentScene();
    }

    static bool IsIntroLike(string sceneName)
    {
        if (string.IsNullOrEmpty(sceneName)) return false;
        var s = sceneName.ToLowerInvariant();
        return s.Contains("intro") || s.Contains("menu") || s.Contains("title");
    }

    static void EnsureEventSystem()
    {
        var es = Object.FindFirstObjectByType<EventSystem>();
        if (es == null)
        {
            var go = new GameObject("EventSystem", typeof(EventSystem));
            es = go.GetComponent<EventSystem>();
            Object.DontDestroyOnLoad(go);
        }

#if ENABLE_INPUT_SYSTEM
        // Prefer the new Input System UI module
        var inputSys = es.GetComponent<InputSystemUIInputModule>();
        if (inputSys == null)
        {
            // Remove legacy module if present
            var legacy = es.GetComponent<StandaloneInputModule>();
            if (legacy != null) Object.Destroy(legacy);
            inputSys = es.gameObject.AddComponent<InputSystemUIInputModule>();
            Debug.Log("[BuildUI] Attached InputSystemUIInputModule to EventSystem.");
        }
#else
        // Fall back to legacy StandaloneInputModule
        var legacy = es.GetComponent<StandaloneInputModule>();
        if (legacy == null)
        {
            // Remove new module if it exists (project might be in 'Both' mode)
#if UNITY_EDITOR || DEVELOPMENT_BUILD
            var inputSys = es.GetComponent<Component>();
#endif
            var newMod = es.GetComponent("InputSystemUIInputModule");
            if (newMod != null) Object.Destroy(newMod as Component);
            es.gameObject.AddComponent<StandaloneInputModule>();
            Debug.Log("[BuildUI] Attached StandaloneInputModule to EventSystem.");
        }
#endif
    }

    static void EnsureForCurrentScene()
    {
        var active = SceneManager.GetActiveScene().name;
        var canvas = GameObject.Find(CanvasName);
        if (IsIntroLike(active))
        {
            // Destroy if present in intro/menu scenes
            if (canvas != null) Object.Destroy(canvas);
            return;
        }

        if (canvas == null)
        {
            EnsureEventSystem();
            BuildToggleCanvas();
        }
        else
        {
            EnsureEventSystem();
        }
    }

    static void BuildToggleCanvas()
    {
        // EventSystem ensured by EnsureEventSystem()

        var go = new GameObject(CanvasName, typeof(Canvas), typeof(CanvasScaler), typeof(GraphicRaycaster));
        Object.DontDestroyOnLoad(go);

        var canvas = go.GetComponent<Canvas>();
        canvas.renderMode = RenderMode.ScreenSpaceOverlay;
        canvas.sortingOrder = 5000; // draw on top of world

        var scaler = go.GetComponent<CanvasScaler>();
        scaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
        scaler.referenceResolution = new Vector2(1920, 1080);
        scaler.screenMatchMode = CanvasScaler.ScreenMatchMode.MatchWidthOrHeight;
        scaler.matchWidthOrHeight = 0.5f;

        // Build button
        var btnGO = new GameObject("BuildButton", typeof(RectTransform), typeof(Image), typeof(Button));
        btnGO.transform.SetParent(go.transform, false);
        var rt = btnGO.GetComponent<RectTransform>();
        rt.anchorMin = new Vector2(0, 1);
        rt.anchorMax = new Vector2(0, 1);
        rt.pivot = new Vector2(0, 1);
        rt.anchoredPosition = new Vector2(16, -16);
        rt.sizeDelta = new Vector2(180, 48);

        var img = btnGO.GetComponent<Image>();
        img.color = new Color(0.85f, 0.85f, 0.85f, 0.9f);
        img.raycastTarget = true;

        var btn = btnGO.GetComponent<Button>();
        btn.onClick.AddListener(() =>
        {
            BuildBootstrap.Ensure();
            if (BuildModeController.Instance != null)
                BuildModeController.Instance.ToggleBuildMode();
        });

        // Label
        var txtGO = new GameObject("Text", typeof(RectTransform));
        txtGO.transform.SetParent(btnGO.transform, false);
        var trt = txtGO.GetComponent<RectTransform>();
        trt.anchorMin = Vector2.zero;
        trt.anchorMax = Vector2.one;
        trt.offsetMin = Vector2.zero;
        trt.offsetMax = Vector2.zero;

        // Use legacy Text if available; otherwise leave default button visuals
        var legacyText = txtGO.AddComponent<Text>();
        legacyText.text = "Build  [B]";
        legacyText.alignment = TextAnchor.MiddleCenter;
        legacyText.color = Color.black;
        legacyText.fontSize = 24;
        legacyText.raycastTarget = false;
        legacyText.font = Resources.GetBuiltinResource<Font>("Arial.ttf");
    }
}


// ===== FILE: Assets/Scripts/Boot/CameraBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures the main camera follows the currently controlled pawn and supports free WASD panning.
/// </summary>
public static class CameraBootstrap
{
    private static bool added;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureCameraFollower()
    {
        if (added) return;
        var cam = Camera.main;
        if (cam == null)
        {
            // Minimal fallback camera; WorldBootstrap may reconfigure later.
            var go = new GameObject("Main Camera");
            cam = go.AddComponent<Camera>();
            go.tag = "MainCamera";
            cam.orthographic = true;
            cam.orthographicSize = 10f;
            cam.transform.position = new Vector3(0f, 10f, 0f);
            cam.transform.rotation = Quaternion.Euler(90f, 0f, 0f);
        }

        if (cam.GetComponent<FollowControlledPawn>() == null)
            cam.gameObject.AddComponent<FollowControlledPawn>();

        // Add free camera controls for when no pawn is controlled.
        if (cam.GetComponent<FreeCameraController>() == null)
            cam.gameObject.AddComponent<FreeCameraController>();

        added = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/InteractionBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures a PawnInteractionManager exists at runtime to coordinate pawn-to-pawn interactions.
/// </summary>
public static class InteractionBootstrap
{
    private static bool spawned;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureInteractionManager()
    {
        if (spawned) return;
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<PawnInteractionManager>();
#else
        var existing = Object.FindObjectOfType<PawnInteractionManager>();
#endif
        if (existing != null) { spawned = true; return; }

        var go = new GameObject("PawnInteractionManager (Auto)");
        Object.DontDestroyOnLoad(go);
        go.AddComponent<PawnInteractionManager>();
        spawned = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/IntroBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures the temporary IntroScreen (Start/Quit) exists when the game boots,
/// independent of scene setup or build order.
/// </summary>
public static class IntroBootstrap
{
    private static bool spawnedOnce;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureIntro()
    {
#if NO_INTRO
        return;
#endif
        if (spawnedOnce)
            return;

        // If an IntroScreen already exists in the scene (FindAnyObjectByType/FindObjectOfType), do nothing.
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<IntroScreen>();
#else
        var existing = Object.FindObjectOfType<IntroScreen>();
#endif
        if (existing != null)
        {
            spawnedOnce = true;
            return;
        }

        // Otherwise, create one.
        var go = new GameObject("IntroScreen (Auto)");
        // Keep it alive across scene loads; the IntroScreen script can hide/clear itself on Start.
        Object.DontDestroyOnLoad(go);
        go.AddComponent<IntroScreen>();

        spawnedOnce = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/PauseBootstrap.cs =====
using UnityEngine;

public static class PauseBootstrap
{
    private static bool spawned;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsurePauseController()
    {
#if NO_INTRO
        // Even if NO_INTRO is defined, we still want pause in gameplay.
#endif
        if (spawned) return;
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<PauseController>();
#else
        var existing = Object.FindObjectOfType<PauseController>();
#endif
        GameObject go;
        if (existing != null)
        {
            go = existing.gameObject;
        }
        else
        {
            go = new GameObject("PauseController (Auto)");
            Object.DontDestroyOnLoad(go);
            go.AddComponent<PauseController>();
        }

        if (go.GetComponent<GameClock>() == null) go.AddComponent<GameClock>();
        if (go.GetComponent<GameCalendar>() == null) go.AddComponent<GameCalendar>();
        if (go.GetComponent<ClockHUD>() == null) go.AddComponent<ClockHUD>(); // draws under speed (top-right)
        spawned = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/PawnBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Helper to spawn a single SNES-style sprite pawn into the world.
/// </summary>
public static class PawnBootstrap
{
    public static GameObject SpawnSpritePawn()
    {
        // World root
        var root = GameObject.Find("World");
        if (root == null)
        {
            root = new GameObject("World");
        }

        // Avoid duplicates if already spawned.
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<SpritePawn>();
#else
        var existing = Object.FindObjectOfType<SpritePawn>();
#endif
        if (existing != null)
        {
            return existing.gameObject;
        }

        var pawnGO = new GameObject("TestPawn");
        pawnGO.transform.SetParent(root.transform, false);
        pawnGO.AddComponent<SpritePawn>();
        return pawnGO;
    }

    /// <summary>
    /// Spawns a second pawn. Safe to call multiple times; only creates if not already present.
    /// </summary>
    public static GameObject SpawnSecondPawn()
    {
        var root = GameObject.Find("World");
        if (root == null)
        {
            root = new GameObject("World");
        }
        var existingGO = GameObject.Find("TestPawn_2");
        if (existingGO != null) return existingGO;

        var pawn2 = new GameObject("TestPawn_2");
        pawn2.transform.SetParent(root.transform, false);
        pawn2.AddComponent<SpritePawn>(); // same visuals/behavior; will idle-wander by default
        return pawn2;
    }
}



// ===== FILE: Assets/Scripts/Boot/SelectionBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures a SelectionController exists at runtime in any scene.
/// (Updated for marquee selection support)
/// </summary>
public static class SelectionBootstrap
{
    private static bool spawned;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureSelectionController()
    {
        if (spawned) return;
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<SelectionController>();
#else
        var existing = Object.FindObjectOfType<SelectionController>();
#endif
        if (existing != null) { spawned = true; return; }

        var go = new GameObject("SelectionController (Auto)");
        Object.DontDestroyOnLoad(go);
        go.AddComponent<SelectionController>();
        // HUD that draws the bottom-left info panel and right-side gizmos
        go.AddComponent<SelectionHUD>();
        spawned = true;
    }
}



// ===== FILE: Assets/Scripts/Boot/WorldBootstrap.cs =====
using UnityEngine;

/// <summary>
/// One-time helper to generate a small default grid world and frame the camera.
/// </summary>
public static class WorldBootstrap
{
    public static void GenerateDefaultGrid(int w = 128, int h = 128, float tile = 1f)
    {
        // Create/find root
        var root = GameObject.Find("World");
        if (root == null)
        {
            root = new GameObject("World");
        }

        // Ensure Buildings container exists so placed stations have a parent
        var buildings = root.transform.Find("Buildings");
        if (buildings == null)
        {
            var goBuild = new GameObject("Buildings");
            goBuild.transform.SetParent(root.transform, false);
            goBuild.transform.localPosition = Vector3.zero;
        }

        // Create/find grid
        var grid = root.GetComponentInChildren<SimpleGridMap>();
        if (grid == null)
        {
            var gridGO = new GameObject("Grid");
            gridGO.transform.SetParent(root.transform, false);
            grid = gridGO.AddComponent<SimpleGridMap>();
        }

        grid.Build(w, h, tile, grid.colorA, grid.colorB);

        EnsureDirectionalLight();
        FrameCameraToGrid(grid);
    }

    static void EnsureDirectionalLight()
    {
        Light dir = null;
#if UNITY_2022_2_OR_NEWER
        var lights = Object.FindObjectsByType<Light>(FindObjectsSortMode.None);
        foreach (var l in lights) { if (l != null && l.type == LightType.Directional) { dir = l; break; } }
#else
        var lights = Object.FindObjectsOfType<Light>();
        foreach (var l in lights) { if (l != null && l.type == LightType.Directional) { dir = l; break; } }
#endif
        if (dir == null)
        {
            var go = new GameObject("Directional Light");
            dir = go.AddComponent<Light>();
            dir.type = LightType.Directional;
            dir.intensity = 1.0f;
            go.transform.rotation = Quaternion.Euler(50f, -30f, 0f);
        }
    }

    static void FrameCameraToGrid(SimpleGridMap grid)
    {
        var cam = Camera.main;
        if (cam == null)
        {
            var camGO = new GameObject("Main Camera");
            cam = camGO.AddComponent<Camera>();
            // Make sure it's tagged correctly so Camera.main works later.
            camGO.tag = "MainCamera";
        }

        // Orthographic top-down
        cam.orthographic = true;
        cam.nearClipPlane = 0.1f;
        cam.farClipPlane = 100f;
        cam.transform.rotation = Quaternion.Euler(90f, 0f, 0f);

        // Compute world center
        float wWorld = grid.width * grid.tileSize;
        float hWorld = grid.height * grid.tileSize;
        var center = new Vector3(
            (grid.width * grid.tileSize) * 0.5f - (grid.tileSize * 0.5f),
            0f,
            (grid.height * grid.tileSize) * 0.5f - (grid.tileSize * 0.5f)
        );

        // Position camera above center
        cam.transform.position = new Vector3(center.x, 10f, center.z);

        // Fit orthographic size to show most of the grid with a small margin
        float aspect = (Screen.height > 0) ? (Screen.width / (float)Screen.height) : (16f / 9f);
        float halfHeight = hWorld * 0.5f;
        float halfWidth = wWorld * 0.5f;
        float sizeToFit = Mathf.Max(halfHeight, halfWidth / Mathf.Max(0.1f, aspect));
        // Keep a consistent default start zoom across all map sizes.
        // Do not auto-fit; use the camera's existing orthographicSize configured in the scene.
    }
}



// ===== FILE: Assets/Scripts/Build/BuildModeController.cs =====
using UnityEngine;
using System;
using System.Linq;
// Assumes BuildingDef exists in your Defs namespace
// If your project uses a different namespace, adjust the using accordingly.
using FantasyColony.Defs;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
#endif
using UnityObject = UnityEngine.Object;

public class BuildModeController : MonoBehaviour
{
    public static BuildModeController Instance { get; private set; }

    [Header("State")]
    [SerializeField] private bool _buildModeEnabled = false;
    [SerializeField] private BuildTool _activeTool = BuildTool.None;

    // Selected def for placement-oriented tools (e.g., PlaceConstructionBoard)
    [SerializeField] private BuildingDef _selectedBuildingDef;

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else if (Instance != this)
        {
            Destroy(gameObject);
            return;
        }
    }

    public bool IsBuildModeEnabled => _buildModeEnabled;
    // Back-compat for existing HUD scripts
    public bool IsActive => _buildModeEnabled;
    public BuildTool ActiveTool => _activeTool;
    public BuildingDef SelectedBuildingDef => _selectedBuildingDef;

    public void ToggleBuildMode()
    {
        SetBuildMode(!_buildModeEnabled);
    }

    public void SetBuildMode(bool on)
    {
        _buildModeEnabled = on;
        if (!on) ClearTool();
    }

    public void SetPlacingBuilding(BuildingDef def)
    {
        _selectedBuildingDef = def;
        SetTool(BuildTool.PlaceConstructionBoard);
    }

    public void ClearTool()
    {
        _activeTool = BuildTool.None;
        var tool = GetComponent<BuildPlacementTool>();
        if (tool != null) tool.SetTool(BuildTool.None);
    }

    public void SetTool(BuildTool tool)
    {
        _activeTool = tool;
        var toolComp = GetComponent<BuildPlacementTool>();
        if (toolComp != null) toolComp.SetTool(tool);
    }

    // Utility used by placement tool to enforce uniqueness of special buildings
    public bool UniqueBuildingExists<T>() where T : Component
    {
#if UNITY_2023_1_OR_NEWER
        return UnityObject.FindAnyObjectByType<T>() != null;
#elif UNITY_2022_2_OR_NEWER
        return UnityObject.FindFirstObjectByType<T>() != null;
#else
#pragma warning disable 618
        return UnityObject.FindObjectOfType<T>() != null;
#pragma warning restore 618
#endif
    }

    private void Update()
    {
        // Self-heal: if Instance was lost (scene change), ensure systems exist
        if (Instance == null)
        {
            BuildBootstrap.Ensure();
            Instance = this;
        }

        // Basic hotkey (B) to toggle build mode (support both input backends)
        bool pressed = false;
#if ENABLE_INPUT_SYSTEM
        if (Keyboard.current != null)
            pressed |= Keyboard.current.bKey.wasPressedThisFrame;
#endif
#if ENABLE_LEGACY_INPUT_MANAGER || !ENABLE_INPUT_SYSTEM
        pressed |= Input.GetKeyDown(KeyCode.B);
#endif
        if (pressed)
        {
            ToggleBuildMode();
            Debug.Log("[Build] Toggled via B â†’ " + (_buildModeEnabled ? "ON" : "OFF"));
        }
        // ESC cancels current tool
        if (Input.GetKeyDown(KeyCode.Escape))
        {
            ClearTool();
        }
    }
}

public enum BuildTool
{
    None,
    PlaceConstructionBoard
}


// ===== FILE: Assets/Scripts/Build/BuildPaletteHUD.cs =====
using UnityEngine;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.SceneManagement;
using FantasyColony.Defs;

public class BuildPaletteHUD : MonoBehaviour
{
    Vector2 _scroll;

    BuildModeController Ctrl => BuildModeController.Instance;

    Rect GetPanelRect()
    {
        // More aggressive sizing for high-DPI / large resolutions
        float w = Mathf.Max(520f, Screen.width * 0.38f);
        float h = Mathf.Max(600f, Screen.height * 0.72f);
        return new Rect(16, 64, w, h);
    }

    static bool IsIntroScene()
    {
        var n = SceneManager.GetActiveScene().name;
        if (string.IsNullOrEmpty(n)) return false;
        n = n.ToLowerInvariant();
        return n.Contains("intro") || n.Contains("menu") || n.Contains("title");
    }

    void OnGUI()
    {
        if (IsIntroScene()) return;
        if (BuildModeController.Instance == null || !BuildModeController.Instance.IsActive) return;

        // Self-heal to guarantee systems are present
        BuildBootstrap.Ensure();

        var _panelRect = GetPanelRect();

        // --- DPI/UI scaling ---
        float scale = Mathf.Clamp(Mathf.Min(Screen.width / 1920f, Screen.height / 1080f), 1.0f, 2.5f);
        var prevMatrix = GUI.matrix;
        // Avoid empty tab look by drawing without window chrome at tiny scales
        GUIUtility.ScaleAroundPivot(new Vector2(scale, scale), Vector2.zero);
        var drawRect = new Rect(_panelRect.x / scale, _panelRect.y / scale, _panelRect.width / scale, _panelRect.height / scale);

        // Temporarily bump font sizes
        var skin = GUI.skin;
        int oldLabel = skin.label.fontSize;
        int oldButton = skin.button.fontSize;
        int oldWindow = skin.window.fontSize;
        skin.label.fontSize = Mathf.RoundToInt(14 * scale);
        skin.button.fontSize = Mathf.RoundToInt(14 * scale);
        skin.window.fontSize = Mathf.RoundToInt(16 * scale);

        GUILayout.BeginArea(drawRect); // no window chrome to prevent stray tab
        var activeName = (Ctrl.SelectedBuildingDef != null) ? $" â€“ Selected: {Ctrl.SelectedBuildingDef.label ?? Ctrl.SelectedBuildingDef.defName}" : "";
        GUILayout.Label("Build Palette" + activeName);
        GUILayout.Label("Click a def to arm the tool, then left-click ground to place. Esc cancels.");

        // Try to enumerate building defs (fallback to a single Construction Board def if database not ready)
        var defs = GetPaletteDefs();
        _scroll = GUILayout.BeginScrollView(_scroll, GUILayout.ExpandHeight(true));
        foreach (var def in defs)
        {
            GUILayout.BeginHorizontal();
            GUILayout.Label(def.label ?? def.defName, GUILayout.Width(260));
            if (GUILayout.Button("Select", GUILayout.Width(Mathf.RoundToInt(160 * scale))))
            {
                // For now we only have a placement tool for Construction Board.
                // Down the road this can dispatch different tools per def.category/type.
                BuildModeController.Instance.SetPlacingBuilding(def);
            }
            GUILayout.EndHorizontal();
        }
        GUILayout.EndScrollView();

        GUILayout.EndArea();

        // Restore GUI state
        skin.label.fontSize = oldLabel;
        skin.button.fontSize = oldButton;
        skin.window.fontSize = oldWindow;
        GUI.matrix = prevMatrix;
    }

    static List<BuildingDef> GetPaletteDefs()
    {
        // Use static DefDatabase (no singleton). Otherwise return a local fallback.
        var list = new List<BuildingDef>();
        if (DefDatabase.Buildings != null && DefDatabase.Buildings.Count > 0)
        {
            foreach (var b in DefDatabase.Buildings)
            {
                if (b.showInPalette) list.Add(b);
            }
            // If nothing was explicitly marked for palette, surface Construction Board if present
            if (list.Count == 0)
            {
                var cb = DefDatabase.Buildings.FirstOrDefault(x => x.defName == "ConstructionBoard");
                if (cb != null) list.Add(cb);
            }
            if (list.Count > 0) return list;
        }

        // Fallback minimal def for bring-up
        list.Add(new BuildingDef
        {
            defName = "ConstructionBoard",
            label = "Construction Board",
            width = 3,
            height = 1,
            unique = true,
            showInPalette = true,
            visualRef = "ConstructionBoardVisual",
            category = "Stations",
            allowedRotations = new List<string> { "N" }
        });
        return list;
    }
}


// ===== FILE: Assets/Scripts/Build/BuildPlacementTool.cs =====
using UnityEngine;
using FantasyColony.Defs;
using System.Linq;
using UnityEngine.SceneManagement;
using System;
using UnityObject = UnityEngine.Object;

/// <summary>
/// Minimal placement tool for the Construction Board bring-up:
///  - Shows a snapping ghost to the grid
///  - Left-click to place; ESC to cancel (handled by controller too)
///  - Enforces uniqueness for ConstructionBoard
/// </summary>
public class BuildPlacementTool : MonoBehaviour
{
    [Header("Grid")]
    public float tileSize = 1f;

    [Header("Ghost")]
    public float ghostAlpha = 0.5f;
    GameObject ghostGO;
    SpriteRenderer ghostSr;

    BuildModeController ctrl;
    Camera cam;
    BuildTool active = BuildTool.None;

    Plane groundPlane = new Plane(Vector3.up, 0f); // XZ ground at y=0 (adjustable)
    // Prevent click-through after arming tool from a UI button press
    bool suppressClickUntilMouseUp = false;
    float armBlockUntilTime = 0f;
    static bool _warnedSpriteMissing = false;

    void Start()
    {
        ctrl = GetComponent<BuildModeController>();
        cam  = GetActiveCamera();
    }

    public void SetTool(BuildTool tool)
    {
        active = tool;
        EnsureGhostDestroyed();
        if (active == BuildTool.PlaceConstructionBoard && ctrl.SelectedBuildingDef != null)
        {
            suppressClickUntilMouseUp = true; // wait for left mouse to be released once
            armBlockUntilTime = Time.realtimeSinceStartup + 0.12f;
            EnsureGhost(ctrl.SelectedBuildingDef);
            // Position ghost immediately under cursor (no first-frame origin flicker)
            cam = GetActiveCamera();
            groundPlane = new Plane(Vector3.up, GetGroundY());
            if (TryGetCursorHit(out var hit))
                ghostGO.transform.position = SnapToGridXZ(hit, ctrl.SelectedBuildingDef) + new Vector3(0f, 0.02f, 0f);
            else if (TryGetCenterHit(out var centerHit))
                ghostGO.transform.position = SnapToGridXZ(centerHit, ctrl.SelectedBuildingDef) + new Vector3(0f, 0.02f, 0f);
            else
                ghostGO.transform.position = new Vector3(0f, 0.02f, 0f); // absolute worst-case fallback
            Debug.Log("[Build] Tool armed for " + (ctrl.SelectedBuildingDef.defName ?? "Unknown"));
        }
    }

    void Update()
    {
        if (active == BuildTool.None) return;
        if (cam == null || !cam.isActiveAndEnabled) cam = GetActiveCamera();
        groundPlane = new Plane(Vector3.up, GetGroundY());

        var def = ctrl.SelectedBuildingDef;
        if (def == null)
        {
            ClearTool();
            return;
        }

        // Move ghost to snapped mouse position
        if (!TryGetCursorHit(out var hit))
            return;
        var snapped = SnapToGridXZ(hit, def);
        if (ghostGO != null)
        {
            // Keep previous valid location if we cannot get a new hit (e.g., cursor off-screen)
            Vector3 pos = snapped;
            if (float.IsNaN(snapped.x) || float.IsNaN(snapped.z))
                pos = lastValidWorld;
            ghostGO.transform.position = pos + new Vector3(0f, 0.02f, 0f);
        }

        // Click to place
        // Ignore the initial click that selected the tool (click-through from UI)
        if (suppressClickUntilMouseUp)
        {
            if (Input.GetMouseButtonUp(0) && Time.realtimeSinceStartup >= armBlockUntilTime)
                suppressClickUntilMouseUp = false;
        }
        else if (Input.GetMouseButtonDown(0))
        {
            TryPlace(def, snapped);
        }
    }

    // Compute scale to ensure the sprite footprint matches def (in world units)
    Vector3 ComputeScaleForSprite(Sprite sprite, BuildingDef def)
    {
        if (sprite == null) return new Vector3(def.width * tileSize, def.height * tileSize, 1f);
        float spriteWorldWidth  = sprite.rect.width  / sprite.pixelsPerUnit;
        float spriteWorldHeight = sprite.rect.height / sprite.pixelsPerUnit;
        float sx = (def.width  * tileSize) / Mathf.Max(0.0001f, spriteWorldWidth);
        float sy = (def.height * tileSize) / Mathf.Max(0.0001f, spriteWorldHeight);
        return new Vector3(sx, sy, 1f);
    }

    Vector3 lastValidWorld;

    Camera GetActiveCamera()
    {
        var m = Camera.main;
        if (m != null && m.isActiveAndEnabled) return m;
        var any = FindAnyObjectByType<Camera>();
        if (any != null && any.isActiveAndEnabled) return any;
        return Camera.current;
    }

    float GetGroundY()
    {
        // If your world ground is not at y=0, put a better heuristic here.
        return 0f;
    }

    Visual2DDef GetVisualDefFor(BuildingDef def)
    {
        // Forgive missing visualRef for construction board in fallback scenarios
        if (def != null && string.IsNullOrEmpty(def.visualRef) &&
            !string.IsNullOrEmpty(def.defName) &&
            def.defName.ToLowerInvariant().Contains("constructionboard"))
        {
            Debug.Log("[Build] Using fallback visualRef=ConstructionBoardVisual");
            def.visualRef = "ConstructionBoardVisual";
        }

        if (def == null) return null;
        if (string.IsNullOrEmpty(def.visualRef)) return null;
        if (DefDatabase.Visuals == null) return null;
        return DefDatabase.Visuals.FirstOrDefault(v => v.defName == def.visualRef);
    }

    Sprite LoadSpriteFor(BuildingDef def)
    {
        var v = GetVisualDefFor(def);
        if (v != null && !string.IsNullOrEmpty(v.spritePath))
        {
            var s = Resources.Load<Sprite>(v.spritePath);
            if (s != null) return s;
            if (!_warnedSpriteMissing)
            {
                Debug.LogWarning("[Build] Sprite NOT FOUND at Resources/" + v.spritePath + ".png â€“ ensure it's Sprite(2D & UI), under Assets/Resources, no extension in path.");
                _warnedSpriteMissing = true;
            }
        }
        return null;
    }

    void ApplyScaleForSpriteOrFallbackXZ(GameObject go, BuildingDef def, Sprite spriteOrNull)
    {
        var scale = ComputeScaleForSprite(spriteOrNull, def);
        go.transform.localScale = scale;
        // Lay the sprite flat on XZ ground (face camera looking down -Y)
        go.transform.rotation = Quaternion.Euler(-90f, 0f, 0f);
        // keep y slightly above ground to avoid z-fighting
    }

    void TryPlace(BuildingDef def, Vector3 pos)
    {
        // For MVP: explicitly handle uniqueness for ConstructionBoard
        if (def.unique
#if UNITY_2023_1_OR_NEWER
            && UnityObject.FindAnyObjectByType<ConstructionBoard>() != null
#elif UNITY_2022_2_OR_NEWER
            && UnityObject.FindFirstObjectByType<ConstructionBoard>() != null
#else
#pragma warning disable 618
            && FindObjectOfType<ConstructionBoard>() != null
#pragma warning restore 618
#endif
            )
        {
            // silently ignore for now; could beep/flash UI
            return;
        }

        // Instantiate placed object
        GameObject go = new GameObject(def.label ?? def.defName ?? "Building");
        // Attach the specific behaviour for Construction Board MVP
        var board = go.AddComponent<ConstructionBoard>();
        // If your ConstructionBoard has an OnPlaced API, you can call it here:
        // board.OnPlaced(new Vector2Int(def.width, def.height), tileSize);

        // Visuals: prefer real sprite from VisualDef.spritePath; fall back to white unit
        var sr = go.AddComponent<SpriteRenderer>();
        var spr = LoadSpriteFor(def);
        if (spr != null)
        {
            sr.sprite = spr;
            Debug.Log("[Build] Loaded sprite: " + spr.name + " (PPU=" + spr.pixelsPerUnit + ")");
        }
        else
        {
            Debug.LogWarning("[Build] Sprite not found at Resources/" + (GetVisualDefFor(def)?.spritePath ?? "(null)") + ".png â€” using white fallback.");
            sr.sprite = MakeUnitSprite();
        }
        ApplyScaleForSpriteOrFallbackXZ(go, def, spr);
        sr.sortingOrder = 100;
        // Set final position on ground with slight epsilon to avoid z-fighting
        go.transform.position = new Vector3(pos.x, 0.03f, pos.z); // slight epsilon

        ClearTool(); // place once for MVP
    }

    void ClearTool()
    {
        active = BuildTool.None;
        EnsureGhostDestroyed();
    }

    Vector3 SnapToGridXZ(Vector3 world, BuildingDef def)
    {
        float w = def.width * tileSize;
        float d = def.height * tileSize;
        // Snap to tile grid (XZ), keep pivot at center of the footprint
        float x = Mathf.Floor(world.x / tileSize) * tileSize + (w * 0.5f) - (tileSize * 0.5f);
        float z = Mathf.Floor(world.z / tileSize) * tileSize + (d * 0.5f) - (tileSize * 0.5f);
        return new Vector3(x, 0f, z);
    }

    bool TryGetCursorHit(out Vector3 hit)
    {
        hit = default;
        if (cam == null) cam = GetActiveCamera();
        if (cam == null) return false;
        var ray = cam.ScreenPointToRay(Input.mousePosition);
        if (!groundPlane.Raycast(ray, out var enter)) return false;
        hit = ray.GetPoint(enter); // y == plane height
        lastValidWorld = hit;
        return true;
    }

    // If we fail to get a hit on arm, use the screen center as a reasonable default
    bool TryGetCenterHit(out Vector3 hit)
    {
        hit = default;
        var center = new Vector3(Screen.width * 0.5f, Screen.height * 0.5f, 0f);
        var ray = GetActiveCamera()?.ScreenPointToRay(center);
        if (ray == null) return false;
        if (!groundPlane.Raycast(ray.Value, out var enter)) return false;
        hit = ray.Value.GetPoint(enter); lastValidWorld = hit; return true;
    }

    void EnsureGhost(BuildingDef def)
    {
        EnsureGhostDestroyed();
        ghostGO = new GameObject("Ghost_" + (def.label ?? def.defName));
        ghostSr = ghostGO.AddComponent<SpriteRenderer>();
        var spr = LoadSpriteFor(def);
        if (spr != null)
        {
            ghostSr.sprite = spr;
        }
        else
        {
            ghostSr.sprite = MakeUnitSprite();
        }
        var c = ghostSr.color;
        c.a = ghostAlpha;
        ghostSr.color = c;
        ApplyScaleForSpriteOrFallbackXZ(ghostGO, def, spr);
        ghostSr.sortingOrder = 200;
    }

    void EnsureGhostDestroyed()
    {
        if (ghostGO != null) Destroy(ghostGO);
        ghostGO = null;
        ghostSr = null;
    }

    // Generates/returns a 1x1 white sprite for simple visuals
    static Sprite _unitSprite;
    static Sprite MakeUnitSprite()
    {
        if (_unitSprite != null) return _unitSprite;
        var tex = new Texture2D(1, 1, TextureFormat.RGBA32, false);
        tex.SetPixel(0, 0, Color.white);
        tex.Apply(false, false);
        _unitSprite = Sprite.Create(tex, new Rect(0, 0, 1, 1), new Vector2(0.5f, 0.5f), 1f);
        return _unitSprite;
    }
}


// ===== FILE: Assets/Scripts/Build/BuildToggleHUD.cs =====
using UnityEngine;

/// <summary>
/// Small top-right button to toggle Build Mode. Works alongside the B hotkey.
/// </summary>
public class BuildToggleHUD : MonoBehaviour
{
    [SerializeField] private Vector2 offset = new Vector2(12f, 12f);
    [SerializeField] private float fontPct = 0.028f;     // slightly smaller than speed label
    [SerializeField] private float topExtraPct = 0.12f;  // below speed/clock text by a proportion of screen height
    [SerializeField] private float minTopExtra = 64f;

    private GUIStyle _btn;
    private GUIStyle _btnActive;

    private void Ensure()
    {
        if (_btn == null)
        {
            _btn = new GUIStyle(GUI.skin.button) { alignment = TextAnchor.MiddleCenter, fontStyle = FontStyle.Bold };
        }
        if (_btnActive == null)
        {
            _btnActive = new GUIStyle(_btn);
            _btnActive.normal.textColor = Color.white;
            _btnActive.normal.background = MakeTex(new Color(0.32f, 0.52f, 0.92f, 1f));
            _btnActive.hover.background = _btnActive.normal.background;
            _btnActive.active.background = _btnActive.normal.background;
        }
    }

    private void OnGUI()
    {
        if (IntroScreen.IsVisible) return; // hide on intro screen
        Ensure();

        var bm = BuildModeController.Instance;
        bool active = bm != null && bm.IsActive;

        int fontSize = Mathf.RoundToInt(Mathf.Max(12f, Screen.height * fontPct));
        _btn.fontSize = fontSize;
        _btnActive.fontSize = fontSize;

        string label = active ? "ðŸ”¨ Exit Build (B)" : "ðŸ”¨ Build (B)";

        float w = Mathf.Max(160f, fontSize * 10f);
        float topExtra = Mathf.Max(minTopExtra, Screen.height * topExtraPct);
        Rect r = new Rect(Screen.width - w - offset.x, offset.y + topExtra, w, fontSize * 1.8f);

        if (GUI.Button(r, label, active ? _btnActive : _btn))
        {
            // Ensure systems exist
            BuildBootstrap.Ensure();
            bm = BuildModeController.Instance;
            if (bm == null)
            {
                var go = GameObject.Find("BuildSystems (Auto)");
                if (go == null) go = new GameObject("BuildSystems (Auto)");
                bm = go.GetComponent<BuildModeController>();
                if (bm == null) bm = go.AddComponent<BuildModeController>();
            }
            bm.ToggleBuildMode();
        }
    }

    private static Texture2D MakeTex(Color c)
    {
        var t = new Texture2D(1, 1, TextureFormat.RGBA32, false);
        t.SetPixel(0, 0, c);
        t.Apply();
        return t;
    }
}



// ===== FILE: Assets/Scripts/Build/GridSpace.cs =====
public enum GridPlane
{
    XY,
    XZ
}

/// <summary>
/// Global grid-space hint so placement/visuals/colliders can agree on the plane.
/// </summary>
public static class GridSpace
{
    public static GridPlane Plane = GridPlane.XY; // default to classic 2D
}




// ===== FILE: Assets/Scripts/Camera/FollowControlledPawn.cs =====
using UnityEngine;

/// <summary>
/// When a pawn is assumed controlled, center the camera on it and smoothly follow.
/// Stops following when control is released.
/// </summary>
[AddComponentMenu("Camera/Follow Controlled Pawn")]
public class FollowControlledPawn : MonoBehaviour
{
    [Header("Follow")]
    [SerializeField] private float smoothTime = 0.15f;
    [SerializeField] private bool snapOnAcquire = true;
    [SerializeField] private bool pixelSnap = false; // disable by default to avoid double-quantization jitter
    [Tooltip("Optional XZ world offset from the pawn center.")]
    [SerializeField] private Vector2 offset = Vector2.zero;
    [Header("Stability")]
    [SerializeField] private bool useDeadZone = true;
    [SerializeField] private float deadZonePixels = 0.75f;

    private Camera _cam;
    private Transform _target;
    private Vector3 _vel; // SmoothDamp velocity

    private void Awake()
    {
        _cam = GetComponent<Camera>();
        if (_cam == null) _cam = Camera.main;
    }

    private void OnEnable()
    {
        ControlManager.OnControlledChanged += OnControlledChanged;
        // If a pawn is already controlled at startup, target it immediately.
        if (ControlManager.Controlled != null)
        {
            _target = ControlManager.Controlled.transform;
            if (snapOnAcquire) SnapToTarget();
        }
    }

    private void OnDisable()
    {
        ControlManager.OnControlledChanged -= OnControlledChanged;
    }

    private void OnControlledChanged(SpritePawn pawn)
    {
        _target = pawn ? pawn.transform : null;
        if (_target != null && snapOnAcquire)
        {
            SnapToTarget();
        }
    }

    private void LateUpdate()
    {
        if (_target == null || _cam == null) return;

        // Desired position keeps current camera Y & rotation; moves X/Z toward target.
        Vector3 desired = new Vector3(
            _target.position.x + offset.x,
            _cam.transform.position.y,
            _target.position.z + offset.y
        );

        Vector3 current = _cam.transform.position;

        // Optional dead-zone measured in on-screen pixels to prevent micro hunting.
        if (useDeadZone)
        {
            float dx = desired.x - current.x;
            float dz = desired.z - current.z;
            float dist = Mathf.Sqrt(dx * dx + dz * dz);
            float upp = Mathf.Max(1e-6f, PixelCameraHelper.WorldUnitsPerPixel(_cam));
            float threshold = upp * Mathf.Max(0f, deadZonePixels);
            if (dist <= threshold)
            {
                var snapPos = pixelSnap ? SnapPosToPixelGrid(desired, _cam) : desired;
                _cam.transform.position = snapPos;
                _vel = Vector3.zero;
                return;
            }
        }

        Vector3 pos = Vector3.SmoothDamp(current, desired, ref _vel, Mathf.Max(0.0001f, smoothTime));

        if (pixelSnap)
            pos = SnapPosToPixelGrid(pos, _cam);

        _cam.transform.position = pos;
    }

    private void SnapToTarget()
    {
        if (_target == null || _cam == null) return;
        var pos = new Vector3(
            _target.position.x + offset.x,
            _cam.transform.position.y,
            _target.position.z + offset.y
        );
        if (pixelSnap)
            pos = SnapPosToPixelGrid(pos, _cam);
        _cam.transform.position = pos;
        _vel = Vector3.zero;
    }

    private static Vector3 SnapPosToPixelGrid(Vector3 worldPos, Camera cam)
    {
        float upp = Mathf.Max(1e-6f, PixelCameraHelper.WorldUnitsPerPixel(cam));
        worldPos.x = Mathf.Round(worldPos.x / upp) * upp;
        worldPos.z = Mathf.Round(worldPos.z / upp) * upp;
        return worldPos;
    }
}


// ===== FILE: Assets/Scripts/Camera/FreeCameraController.cs =====
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
#endif
// ReSharper disable Unity.InefficientPropertyAccess
// ReSharper disable Unity.PerformanceCriticalCodeInvocation

/// <summary>
/// Free camera: mouse-wheel zoom (always) + WASD/Arrow panning when no pawn is controlled.
/// Uses unscaled time so you can pan while paused. Top-down, XZ only.
/// </summary>
[AddComponentMenu("Camera/Free Camera Controller")]
public class FreeCameraController : MonoBehaviour
{
    [Header("Movement")]
    [SerializeField] private float moveSpeed = 10f;
    [SerializeField] private float boostMultiplier = 2f;
    [SerializeField] private bool clampToGrid = true;
    [SerializeField] private float clampMargin = 1f;
    [Header("Visibility Rule")]
    [SerializeField, Tooltip("Keep at least this many on-screen pixels of the grid visible on each axis. Set to 1 for 'some part of grid must remain visible'.")] private float minVisiblePixels = 1f;
    
    [Header("Zoom")]
    [SerializeField] private float minOrtho = 3f;
    [SerializeField] private float maxOrtho = 200f;
    [SerializeField] private float zoomSpeed = 8f;          // how fast orthographicSize changes per wheel notch
    [SerializeField] private bool smoothZoom = true;
    [SerializeField] private float zoomSmoothTime = 0.08f;  // unscaled seconds

    private Camera _cam;
    private SimpleGridMap _grid;
    private float _targetOrtho;
    private float _zoomVel;
    private float _skipClampUntil; // unscaled time

#if ENABLE_INPUT_SYSTEM
    private InputAction _move;
    private InputAction _boost;
    private InputAction _scroll;
#endif

    private void Awake()
    {
        _cam = GetComponent<Camera>();
        if (_cam == null) _cam = Camera.main;
        if (_cam != null)
            _targetOrtho = Mathf.Max(0.01f, _cam.orthographicSize);
    }

    private void TryFindGrid()
    {
        if (_grid != null) return;
#if UNITY_2022_2_OR_NEWER
        _grid = UnityEngine.Object.FindAnyObjectByType<SimpleGridMap>();
#else
        _grid = UnityEngine.Object.FindObjectOfType<SimpleGridMap>();
#endif
    }

    private void OnEnable()
    {
        ControlManager.OnControlledChanged += OnControlledChanged;
        if (_cam != null)
            _targetOrtho = Mathf.Max(0.01f, _cam.orthographicSize);

#if ENABLE_INPUT_SYSTEM
        if (_move == null)
        {
            // 2D composite: WASD + Arrows + gamepad stick
            _move = new InputAction("CamMove", type: InputActionType.Value, binding: "2DVector");
            _move.AddCompositeBinding("2DVector")
                .With("Up", "<Keyboard>/w").With("Up", "<Keyboard>/upArrow")
                .With("Down", "<Keyboard>/s").With("Down", "<Keyboard>/downArrow")
                .With("Left", "<Keyboard>/a").With("Left", "<Keyboard>/leftArrow")
                .With("Right", "<Keyboard>/d").With("Right", "<Keyboard>/rightArrow");
            _move.AddBinding("<Gamepad>/leftStick");
        }
        if (_boost == null) _boost = new InputAction("CamBoost", binding: "<Keyboard>/shift");
        if (_scroll == null) _scroll = new InputAction("CamScroll", binding: "<Mouse>/scroll"); // Vector2 (x,y)
        _move.Enable(); _boost.Enable(); _scroll.Enable();
#endif
    }

    private void OnDisable()
    {
        ControlManager.OnControlledChanged -= OnControlledChanged;
#if ENABLE_INPUT_SYSTEM
        _move?.Disable();
        _boost?.Disable();
        _scroll?.Disable();
#endif
    }

    private void Update()
    {
        if (_cam == null) return;

        // --- Zoom (always available, even while controlling a pawn) ---
        float scrollDelta = ReadScrollDelta(); // >0 means wheel up

        // --- Zoom (center-based) ---
        if (Mathf.Abs(scrollDelta) > 0.0001f)
        {
            // Wheel up (positive) -> zoom in -> smaller ortho size
            _targetOrtho = Mathf.Clamp(_targetOrtho - scrollDelta * zoomSpeed, minOrtho, maxOrtho);
        }
        if (smoothZoom)
        {
            _cam.orthographicSize = Mathf.SmoothDamp(_cam.orthographicSize, _targetOrtho, ref _zoomVel, Mathf.Max(0.0001f, zoomSmoothTime), Mathf.Infinity, Time.unscaledDeltaTime);
        }
        else
        {
            _cam.orthographicSize = _targetOrtho;
        }

        // If a pawn is controlled, skip free panning (follow script will move camera). Zoom above already applied.
        if (ControlManager.Controlled != null) return;

        // --- Read move input (free cam only) ---
        Vector2 input = ReadMoveInput();
        if (input.sqrMagnitude > 1f) input.Normalize();
        bool boost = ReadBoost();

        // --- Pan (WASD/Arrows) ---
        float speed = moveSpeed * (boost ? boostMultiplier : 1f);
        Vector3 delta = new Vector3(input.x, 0f, input.y) * speed * Time.unscaledDeltaTime;
        Vector3 pos = _cam.transform.position + delta;

        if (clampToGrid)
        {
            TryFindGrid();
            if (_grid != null && Time.unscaledTime >= _skipClampUntil)
            {
                EnsureGridVisibility(ref pos, _cam, _grid, clampMargin, Mathf.Max(0f, minVisiblePixels));
            }
        }

        _cam.transform.position = pos;
    }

    private void OnControlledChanged(SpritePawn pawn)
    {
        // When control is released (pawn == null), give a short grace window so clamp doesn't snap us.
        if (pawn == null)
            _skipClampUntil = Time.unscaledTime + 0.25f;
    }

    /// <summary>
    /// Ensures that at least 'minVisiblePixels' of the grid remains visible on each axis.
    /// This allows near-infinite panning as long as a sliver of grid is still in view.
    /// </summary>
    private static void EnsureGridVisibility(ref Vector3 camPos, Camera cam, SimpleGridMap grid, float margin, float minVisiblePixels)
    {
        float wWorld = grid.width * grid.tileSize;
        float hWorld = grid.height * grid.tileSize;

        // Subtract half view so camera doesn't show outside the grid.
        float halfH = cam.orthographicSize;
        float aspect = (Screen.height > 0) ? (Screen.width / (float)Screen.height) : (16f / 9f);
        float halfW = halfH * aspect;

        // Grid rect (expanded by margin so we don't put the edge exactly on the viewport border)
        float gMinX = 0f + margin;
        float gMaxX = wWorld - margin;
        float gMinZ = 0f + margin;
        float gMaxZ = hWorld - margin;

        // Camera rect from its center position
        float cMinX = camPos.x - halfW;
        float cMaxX = camPos.x + halfW;
        float cMinZ = camPos.z - halfH;
        float cMaxZ = camPos.z + halfH;

        // Required overlap in world units based on pixels (cap to grid size to avoid impossible requirements)
        float upp = Mathf.Max(1e-6f, PixelCameraHelper.WorldUnitsPerPixel(cam));
        float reqOverlapX = Mathf.Min(minVisiblePixels * upp, Mathf.Max(0f, gMaxX - gMinX));
        float reqOverlapZ = Mathf.Min(minVisiblePixels * upp, Mathf.Max(0f, gMaxZ - gMinZ));

        // --- X axis ---
        {
            float overlapX = Mathf.Min(cMaxX, gMaxX) - Mathf.Max(cMinX, gMinX);
            if (overlapX < reqOverlapX)
            {
                // Compute minimal shift to achieve the required overlap.
                float gridCenterX = 0.5f * (gMinX + gMaxX);
                if (cMaxX <= gMinX) // camera fully left of grid
                {
                    float desiredCamMax = gMinX + reqOverlapX;
                    camPos.x = desiredCamMax - halfW;
                }
                else if (cMinX >= gMaxX) // camera fully right of grid
                {
                    float desiredCamMin = gMaxX - reqOverlapX;
                    camPos.x = desiredCamMin + halfW;
                }
                else // partial overlap: nudge toward grid center
                {
                    float dir = (camPos.x < gridCenterX) ? +1f : -1f;
                    camPos.x += dir * (reqOverlapX - Mathf.Max(0f, overlapX));
                }
            }
        }
        // --- Z axis ---
        {
            float overlapZ = Mathf.Min(cMaxZ, gMaxZ) - Mathf.Max(cMinZ, gMinZ);
            if (overlapZ < reqOverlapZ)
            {
                float gridCenterZ = 0.5f * (gMinZ + gMaxZ);
                if (cMaxZ <= gMinZ) camPos.z = (gMinZ + reqOverlapZ) - halfH;                // fully below grid
                else if (cMinZ >= gMaxZ) camPos.z = (gMaxZ - reqOverlapZ) + halfH;           // fully above grid
                else camPos.z += ((camPos.z < gridCenterZ) ? +1f : -1f) * (reqOverlapZ - Mathf.Max(0f, overlapZ));
            }
        }
    }

    private Vector2 ReadMoveInput()
    {
#if ENABLE_INPUT_SYSTEM
        return _move != null ? _move.ReadValue<Vector2>() : Vector2.zero;
#else
        float x = 0f, y = 0f;
        if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow)) x -= 1f;
        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow)) x += 1f;
        if (Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.DownArrow)) y -= 1f;
        if (Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.UpArrow)) y += 1f;
        return new Vector2(x, y);
#endif
    }

    private bool ReadBoost()
    {
#if ENABLE_INPUT_SYSTEM
        return _boost != null && _boost.IsPressed();
#else
        return Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift);
#endif
    }

    private float ReadScrollDelta()
    {
#if ENABLE_INPUT_SYSTEM
        // New Input System: mouse scroll is in "lines" per frame (y positive = scroll up)
        if (_scroll == null) return 0f;
        Vector2 v = _scroll.ReadValue<Vector2>();
        return v.y;
#else
        // Legacy Input: positive y = scroll up
        return Input.mouseScrollDelta.y;
#endif
    }
}



// ===== FILE: Assets/Scripts/Camera/PixelCameraHelper.cs =====
using UnityEngine;

/// <summary>
/// Utilities for pixel-perfect math with an orthographic camera.
/// </summary>
public static class PixelCameraHelper
{
    /// <summary>
    /// World units per on-screen pixel for the given camera.
    /// </summary>
    public static float WorldUnitsPerPixel(Camera cam)
    {
        if (cam == null) cam = Camera.main;
        if (cam == null) return 1f / 100f; // safe fallback
        // For an ortho camera, vertical world size is 2 * orthographicSize.
        // Divide by screen height (pixels) to get units-per-pixel.
        float h = Screen.height > 0 ? Screen.height : 1080f;
        return (2f * cam.orthographicSize) / h;
    }

    /// <summary>
    /// Snap a world position to the camera's pixel grid (X/Z for top-down).
    /// </summary>
    public static Vector3 SnapToPixelGrid(Vector3 worldPos, Camera cam)
    {
        float upp = Mathf.Max(1e-5f, WorldUnitsPerPixel(cam));
        worldPos.x = Mathf.Round(worldPos.x / upp) * upp;
        worldPos.z = Mathf.Round(worldPos.z / upp) * upp;
        return worldPos;
    }

    /// <summary>
    /// Returns the world-space rectangle (minX,maxX,minZ,maxZ) visible by the camera.
    /// </summary>
    public static (float minX, float maxX, float minZ, float maxZ) OrthoWorldBounds(Camera cam)
    {
        float halfH = cam.orthographicSize;
        float halfW = halfH * ((Screen.height > 0) ? (Screen.width / (float)Screen.height) : (16f/9f));
        return (cam.transform.position.x - halfW, cam.transform.position.x + halfW, cam.transform.position.z - halfH, cam.transform.position.z + halfH);
    }
}



// ===== FILE: Assets/Scripts/Defs/BuildingDef.cs =====
using System;
using System.Collections.Generic;

namespace FantasyColony.Defs
{
    /// <summary>
    /// Building metadata consumed by placement, UI, and visuals. All logic remains in C#.
    /// </summary>
    [Serializable]
    public class BuildingDef : Def
    {
        // Identity & UI
        public string label;
        public string description;
        public string category;
        public bool showInPalette = true;
        public bool unique = false;

        // Footprint & orientation
        public int width = 1;
        public int height = 1;
        /// <summary>Allowed headings, e.g., ["N","E","S","W"]. If null/empty, assume all four.</summary>
        public List<string> allowedRotations;
        public string defaultRotation = "N";

        // Placement rules
        /// <summary>Preferred plane for placement/preview; falls back to visual's plane if empty.</summary>
        public string plane;

        // Pathing
        /// <summary>If true, navgrid can pass through this footprint.</summary>
        public bool canPathThrough = false;
        /// <summary>Soft avoidance radius (in tiles) to discourage pathing too close unless interacting.</summary>
        public float avoidanceRadius = 0f;

        // Interactions
        public List<string> interactTags;

        // Cost & work (v1: work only)
        public float workToBuild = 0f;

        // Visual link
        public string visualRef; // defName of a Visual2DDef

        // --- Compatibility aliases (temporary during migration) ---
        // Old snake_case alias; maps to visualRef.
        public string visual_ref
        {
            get => visualRef;
            set => visualRef = value;
        }
    }
}

namespace FantasyColony.Defs
{
    public static class BuildingDefKinds
    {
        public const string Root = "BuildingDef";
    }
}



// ===== FILE: Assets/Scripts/Defs/Def.cs =====
using System;

namespace FantasyColony.Defs
{
    /// <summary>
    /// Base class for all data-driven defs. All content lives in XML; behaviors live in C#.
    /// </summary>
    [Serializable]
    public abstract class Def
    {
        public string defName;
        public string modId; // set by loader based on the mod directory
        public string[] tags; // optional authoring tags

        public virtual string GetKindName() => GetType().Name;
    }
}

namespace FantasyColony.Defs
{
    /// <summary>
    /// Simple type discriminator for debugging/logging.
    /// </summary>
    public enum DefType
    {
        Unknown = 0,
        Visual2D = 1,
        Building = 2,
    }
}



// ===== FILE: Assets/Scripts/Defs/DefDatabase.cs =====
using System.Collections.Generic;
using UnityEngine;

namespace FantasyColony.Defs
{
    /// <summary>
    /// In-memory store for all loaded defs. Single source of truth.
    /// </summary>
    public static class DefDatabase
    {
        // Primary stores keyed by defName for fast lookup
        private static readonly Dictionary<string, Visual2DDef> _visualsByName = new Dictionary<string, Visual2DDef>();
        private static readonly Dictionary<string, BuildingDef> _buildingsByName = new Dictionary<string, BuildingDef>();

        // Legacy-style lists (for simple iteration) - derived views
        private static readonly List<Visual2DDef> _visualsList = new List<Visual2DDef>();
        private static readonly List<BuildingDef> _buildingsList = new List<BuildingDef>();

        public static IReadOnlyDictionary<string, Visual2DDef> VisualsByName => _visualsByName;
        public static IReadOnlyDictionary<string, BuildingDef> BuildingsByName => _buildingsByName;

        public static IReadOnlyList<Visual2DDef> Visuals => _visualsList;
        public static IReadOnlyList<BuildingDef> Buildings => _buildingsList;

        public static int TotalCount => _visualsByName.Count + _buildingsByName.Count;

        /// <summary>
        /// Called from BuildBootstrap.Ensure() during startup.
        /// </summary>
        public static void LoadAll()
        {
            _visualsByName.Clear();
            _buildingsByName.Clear();
            _visualsList.Clear();
            _buildingsList.Clear();

            try
            {
                var visualsTmp = new List<Visual2DDef>();
                var buildingsTmp = new List<BuildingDef>();
                Xml.XmlDefLoader.LoadAll(visualsTmp, buildingsTmp);

                foreach (var v in visualsTmp)
                {
                    if (string.IsNullOrEmpty(v.defName)) continue;
                    _visualsByName[v.defName] = v;
                }
                foreach (var b in buildingsTmp)
                {
                    if (string.IsNullOrEmpty(b.defName)) continue;
                    _buildingsByName[b.defName] = b;
                }
                _visualsList.AddRange(_visualsByName.Values);
                _buildingsList.AddRange(_buildingsByName.Values);

                Debug.Log($"[Defs] Loaded {TotalCount} defs (visuals: {_visualsByName.Count}, buildings: {_buildingsByName.Count}).");
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"[Defs] LoadAll failed: {ex.Message}\n{ex.StackTrace}");
            }
        }
    }

    /// <summary>Small helpers to keep legacy call sites compiling during migration.</summary>
    public static class DefListExtensions
    {
        public static bool TryGetValue(this IReadOnlyList<Visual2DDef> list, string defName, out Visual2DDef def)
        {
            def = null;
            if (string.IsNullOrEmpty(defName)) return false;
            foreach (var v in list)
            {
                if (v != null && v.defName == defName) { def = v; return true; }
            }
            return false;
        }
        public static bool TryGetValue(this IReadOnlyList<BuildingDef> list, string defName, out BuildingDef def)
        {
            def = null;
            if (string.IsNullOrEmpty(defName)) return false;
            foreach (var b in list)
            {
                if (b != null && b.defName == defName) { def = b; return true; }
            }
            return false;
        }
    }
}


// ===== FILE: Assets/Scripts/Defs/Defs.cs =====
// Placeholder file to satisfy an existing .meta (Unity asset GUID).
// Safe to remove later **from inside Unity** along with this file's .meta.
namespace FantasyColony.Defs
{
    internal static class __DefsPlaceholder { }
}



// ===== FILE: Assets/Scripts/Defs/Visual2DDef.cs =====
using System;
using System.Collections.Generic;

namespace FantasyColony.Defs
{
    /// <summary>
    /// 2D sprite visual definition. References art by path; registry will resolve at runtime.
    /// </summary>
    [Serializable]
    public class Visual2DDef : Def
    {
        public string spritePath;   // e.g., "Sprites/Stations/ConstructionBoard"
        public string sortingLayer = "Default";
        public int sortingOrder = 0;
        public float pivotX = 0.5f;
        public float pivotY = 0.0f;
        public float scale = 1.0f;

        // Plane & depth
        public string plane = "XY"; // XY or XZ
        public float z_lift = 0f;   // legacy-friendly name kept

        // Material & color (kept for legacy VisualFactory code)
        public string shader_hint;         // optional material/shader hint
        public string color_rgba = "1,1,1,1";

        // Optional variant sprites
        public List<Variant> variants;

        [Serializable]
        public class Variant
        {
            public string spritePath;
            public int weight = 1;
            public string conditionTag;
        }
    }
}

namespace FantasyColony.Defs
{
    public static class Visual2DDefKinds
    {
        public const string Root = "Visual2DDef";
    }
}



// ===== FILE: Assets/Scripts/Defs/VisualDef.cs =====
using FantasyColony.Defs;
using UnityEngine;

/// <summary>
/// Compatibility shim: legacy code references VisualDef. We now use Visual2DDef.
/// This shim keeps existing code compiling while we migrate call sites.
/// </summary>
[System.Serializable]
public class VisualDef : Visual2DDef
{
    // --- Legacy static keys (string) for code that uses string keys ---
    public static readonly string id_key = nameof(defName);
    public static readonly string render_layer_key = nameof(sortingLayer);
    public static readonly string color_rgba_key = "color_rgba";
    public static readonly string plane_key = "plane";
    public static readonly string shader_hint_key = "shader_hint";
    public static readonly string z_lift_key = "z_lift";

    // --- Instance properties expected by existing rendering code ---
    public string id => defName;
    public string render_layer => sortingLayer;
    public Color Color => ParseColor(color_rgba);
    public GridPlane Plane => ParsePlane(plane);

    private static Color ParseColor(string s)
    {
        if (string.IsNullOrWhiteSpace(s)) return Color.white;
        s = s.Trim();
        // Support hex like #RRGGBB or #RRGGBBAA
        if (s[0] == '#')
        {
            if (ColorUtility.TryParseHtmlString(s, out var cHex)) return cHex;
        }
        // Support comma floats: r,g,b[,a]
        var parts = s.Split(',');
        if (parts.Length >= 3)
        {
            float r = ParseFloat(parts[0], 1f);
            float g = ParseFloat(parts[1], 1f);
            float b = ParseFloat(parts[2], 1f);
            float a = parts.Length > 3 ? ParseFloat(parts[3], 1f) : 1f;
            return new Color(r, g, b, a);
        }
        return Color.white;
    }
    private static float ParseFloat(string s, float d)
    {
        return float.TryParse(s, System.Globalization.NumberStyles.Float, System.Globalization.CultureInfo.InvariantCulture, out var v) ? v : d;
    }
    private static GridPlane ParsePlane(string p)
    {
        if (string.IsNullOrEmpty(p)) return GridPlane.XY;
        return p.Equals("XZ", System.StringComparison.OrdinalIgnoreCase) ? GridPlane.XZ : GridPlane.XY;
    }
}
/// <summary>Legacy "Value" access pattern used by rendering code: allow key-based lookups from Visual2DDef.</summary>
public static class VisualDefExtensions
{
    public static string Value(this Visual2DDef d, string key, string fallback = null)
    {
        switch (key)
        {
            case "id": return d.defName ?? fallback;
            case "render_layer": return d.sortingLayer ?? fallback;
            case "plane": return d.plane ?? fallback;
            case "shader_hint": return (d as VisualDef)?.shader_hint ?? d.shader_hint ?? fallback;
            case "color_rgba": return (d as VisualDef)?.color_rgba ?? d.color_rgba ?? fallback;
            default: return fallback;
        }
    }
    public static int Value(this Visual2DDef d, string key, int fallback)
    {
        switch (key)
        {
            case "sortingOrder": return d.sortingOrder;
            default: return fallback;
        }
    }
    public static float Value(this Visual2DDef d, string key, float fallback)
    {
        switch (key)
        {
            case "z_lift": return d.z_lift;
            default: return fallback;
        }
    }
}


// ===== FILE: Assets/Scripts/Defs/Xml/XmlDefLoader.cs =====
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using UnityEngine;

namespace FantasyColony.Defs.Xml
{
    /// <summary>
    /// Minimal XML loader for v0 bring-up. One def per file, root element name is the type.
    /// </summary>
    public static class XmlDefLoader
    {
        public static void LoadAll(List<Visual2DDef> visuals, List<BuildingDef> buildings)
        {
            foreach (var file in Mods.ModDiscovery.EnumerateDefXmlFiles())
            {
                try
                {
                    string modId = new DirectoryInfo(Directory.GetParent(Directory.GetParent(file).FullName).FullName).Name; // Mods/<modId>/Defs/<...>/<file>
                    using (var reader = CreateSafeXmlReader(file))
                    {
                        var doc = XDocument.Load(reader, LoadOptions.PreserveWhitespace | LoadOptions.SetLineInfo);
                        var root = doc.Root;
                        if (root == null)
                            continue;

                        switch (root.Name.LocalName)
                        {
                            case Visual2DDefKinds.Root:
                                var v = ParseVisual2D(root);
                                v.modId = modId;
                                visuals.Add(v);
                                break;
                            // Back-compat: allow <VisualDef> as an alias for <Visual2DDef>
                            case "VisualDef":
                                var v2 = ParseVisual2D(root);
                                v2.modId = modId;
                                visuals.Add(v2);
                                break;
                            case BuildingDefKinds.Root:
                                var b = ParseBuilding(root);
                                b.modId = modId;
                                buildings.Add(b);
                                break;
                            default:
                                Debug.LogWarning($"[Defs] Unknown root '{root.Name.LocalName}' in {Short(file)} â€“ skipping.");
                                break;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.LogWarning($"[Defs] Failed to parse '{Short(file)}': {ex.Message}");
                }
            }
        }

        private static XmlReader CreateSafeXmlReader(string path)
        {
            var settings = new XmlReaderSettings
            {
                DtdProcessing = DtdProcessing.Prohibit,
                XmlResolver = null,
                IgnoreComments = true,
                IgnoreProcessingInstructions = true
            };
            return XmlReader.Create(path, settings);
        }

        private static string Short(string path)
        {
            return path.Replace(Application.dataPath, "Assets");
        }

        private static Visual2DDef ParseVisual2D(XElement root)
        {
            var v = new Visual2DDef();
            v.defName      = Value(root, "defName", required: true);
            v.spritePath   = Value(root, "spritePath", required: true);

            // Sorting & transform
            v.sortingLayer = Value(root, "sortingLayer", defaultValue: "Default");
            v.sortingOrder = Int(root, "sortingOrder", 0);
            v.pivotX       = Float(root, "pivotX", 0.5f);
            v.pivotY       = Float(root, "pivotY", 0.0f);
            v.scale        = Float(root, "scale", 1.0f);

            // Plane & depth
            v.plane        = Value(root, "plane", defaultValue: "XY");
            v.z_lift       = Float(root, "z_lift", 0f);

            // Material & color
            v.shader_hint  = Value(root, "shader_hint", defaultValue: null);
            v.color_rgba   = Value(root, "color_rgba", defaultValue: "1,1,1,1");

            // Variants
            var variantsEl = root.Element("variants");
            if (variantsEl != null)
            {
                v.variants = new List<Visual2DDef.Variant>();
                foreach (var li in variantsEl.Elements("li"))
                {
                    var varEl = new Visual2DDef.Variant
                    {
                        spritePath   = li.Element("spritePath")?.Value?.Trim(),
                        weight       = Int(li, "weight", 1),
                        conditionTag = li.Element("conditionTag")?.Value?.Trim()
                    };
                    if (!string.IsNullOrEmpty(varEl.spritePath))
                        v.variants.Add(varEl);
                }
            }
            return v;
        }

        private static BuildingDef ParseBuilding(XElement root)
        {
            var b = new BuildingDef();
            // Identity & UI
            b.defName       = Value(root, "defName", required: true);
            b.label         = Value(root, "label", defaultValue: null);
            b.description   = Value(root, "description", defaultValue: null);
            b.category      = Value(root, "category", defaultValue: null);
            b.showInPalette = Bool(root, "showInPalette", true);
            b.unique        = Bool(root, "unique", false);

            // Footprint & orientation
            b.width            = Int(root, "width", 1);
            b.height           = Int(root, "height", 1);
            var ar = Value(root, "allowedRotations", defaultValue: null);
            if (!string.IsNullOrEmpty(ar))
                b.allowedRotations = new List<string>(ar.Split(new[] {','}, StringSplitOptions.RemoveEmptyEntries));
            b.defaultRotation  = Value(root, "defaultRotation", defaultValue: "N");

            // Placement rules
            b.plane = Value(root, "plane", defaultValue: null);

            // Pathing
            b.canPathThrough  = Bool(root, "canPathThrough", false);
            b.avoidanceRadius = Float(root, "avoidanceRadius", 0f);

            // Interactions
            var tagsEl = root.Element("interactTags");
            if (tagsEl != null)
            {
                b.interactTags = new List<string>();
                foreach (var li in tagsEl.Elements("li"))
                {
                    var t = li.Value?.Trim();
                    if (!string.IsNullOrEmpty(t)) b.interactTags.Add(t);
                }
            }

            // Costs/work
            b.workToBuild = Float(root, "workToBuild", 0f);

            // Visual link (camelCase and snake_case)
            b.visualRef = Value(root, "visualRef", defaultValue: null);
            if (string.IsNullOrEmpty(b.visualRef))
                b.visualRef = Value(root, "visual_ref", defaultValue: null);
            return b;
        }

        private static string Value(XElement root, string name, string defaultValue = null, bool required = false)
        {
            var e = root.Element(name);
            if (e == null)
            {
                if (required)
                    throw new Exception($"Missing <{name}> element.");
                return defaultValue;
            }
            return e.Value?.Trim();
        }

        private static int Int(XElement root, string name, int defaultValue)
        {
            var s = Value(root, name, defaultValue.ToString(CultureInfo.InvariantCulture), required: false);
            return int.TryParse(s, NumberStyles.Integer, CultureInfo.InvariantCulture, out var v) ? v : defaultValue;
        }

        private static float Float(XElement root, string name, float defaultValue)
        {
            var s = Value(root, name, defaultValue.ToString(CultureInfo.InvariantCulture), required: false);
            return float.TryParse(s, NumberStyles.Float, CultureInfo.InvariantCulture, out var v) ? v : defaultValue;
        }

        private static bool Bool(XElement root, string name, bool defaultValue)
        {
            var s = Value(root, name, defaultValue ? "true" : "false", required: false);
            if (string.Equals(s, "true", StringComparison.OrdinalIgnoreCase)) return true;
            if (string.Equals(s, "false", StringComparison.OrdinalIgnoreCase)) return false;
            return defaultValue;
        }
    }
}



// ===== FILE: Assets/Scripts/Jobs/JobService.cs =====
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Central registry for job providers (buildings) and pawn job assignments.
/// </summary>
public class JobService : MonoBehaviour
{
    private class JobEntry
    {
        public int slots;
        public readonly List<PawnJob> assigned = new List<PawnJob>();
    }

    // Building -> JobType -> JobEntry
    private readonly Dictionary<Building, Dictionary<JobType, JobEntry>> _providers = new();

    // All known pawns
    private readonly List<PawnJob> _pawns = new();

    public void RegisterPawn(PawnJob pj)
    {
        if (!_pawns.Contains(pj)) _pawns.Add(pj);
    }

    public void UnregisterPawn(PawnJob pj)
    {
        _pawns.Remove(pj);
        foreach (var map in _providers.Values)
        {
            foreach (var e in map.Values)
            {
                e.assigned.Remove(pj);
            }
        }
    }

    public void SetSlots(Building b, JobType type, int slots)
    {
        if (b == null) return;
        if (!_providers.TryGetValue(b, out var map))
        {
            map = new Dictionary<JobType, JobEntry>();
            _providers[b] = map;
        }
        if (!map.TryGetValue(type, out var entry))
        {
            entry = new JobEntry();
            map[type] = entry;
        }
        entry.slots = Mathf.Max(0, slots);

        Rebalance(b, type, entry);
    }

    public List<PawnJob> AssignedFor(Building b, JobType type)
    {
        if (b == null) return new List<PawnJob>();
        if (_providers.TryGetValue(b, out var map) && map.TryGetValue(type, out var e))
        {
            return e.assigned;
        }
        return new List<PawnJob>();
    }

    private void Rebalance(Building b, JobType type, JobEntry e)
    {
        // Remove overfill
        while (e.assigned.Count > e.slots)
        {
            var pj = e.assigned[e.assigned.Count - 1];
            e.assigned.RemoveAt(e.assigned.Count - 1);
            if (pj != null && pj.AssignedBy == b) pj.SetJob(JobType.None, null);
        }

        // Fill underfill
        if (e.assigned.Count < e.slots)
        {
            foreach (var pj in _pawns)
            {
                if (pj == null) continue;
                if (!pj.IsIdle) continue;
                e.assigned.Add(pj);
                pj.SetJob(type, b);
                if (e.assigned.Count >= e.slots) break;
            }
        }
    }
}


// ===== FILE: Assets/Scripts/Jobs/JobType.cs =====
public enum JobType
{
    None = 0,
    Builder = 1,
}

public static class JobTypeExt
{
    public static string Name(this JobType t) => t.ToString();
}


// ===== FILE: Assets/Scripts/Mods/ModDiscovery.cs =====
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEngine;

namespace FantasyColony.Mods
{
    /// <summary>
    /// Finds Mods and their Defs directories under StreamingAssets.
    /// Load order: Core -> (other mods alphabetically)
    /// </summary>
    public static class ModDiscovery
    {
        public static IEnumerable<string> EnumerateDefXmlFiles()
        {
            var modsRoot = Path.Combine(Application.streamingAssetsPath, "Mods");
            if (!Directory.Exists(modsRoot))
                yield break;

            // Core first if present
            var core = Path.Combine(modsRoot, "Core");
            if (Directory.Exists(core))
            {
                foreach (var f in EnumerateDefFiles(core))
                    yield return f;
            }

            // Then other mods alphabetically
            foreach (var modDir in Directory.GetDirectories(modsRoot).OrderBy(p => p))
            {
                if (Path.GetFileName(modDir) == "Core")
                    continue;
                foreach (var f in EnumerateDefFiles(modDir))
                    yield return f;
            }
        }

        private static IEnumerable<string> EnumerateDefFiles(string modDir)
        {
            var defsDir = Path.Combine(modDir, "Defs");
            if (!Directory.Exists(defsDir))
                yield break;
            foreach (var f in Directory.GetFiles(defsDir, "*.xml", SearchOption.AllDirectories))
                yield return f;
        }
    }
}



// ===== FILE: Assets/Scripts/Pawns/PawnJob.cs =====
using UnityEngine;

/// <summary>
/// Minimal job holder for pawns; registers with JobService.
/// </summary>
public class PawnJob : MonoBehaviour
{
    [SerializeField] private JobType current = JobType.None;
    [SerializeField] private Building assignedBy;

    public bool IsIdle => current == JobType.None;
    public JobType Current => current;
    public Building AssignedBy => assignedBy;

    private void OnEnable()
    {
        JobService js;
#if UNITY_2023_1_OR_NEWER
        js = UnityEngine.Object.FindFirstObjectByType<JobService>();
#else
        js = FindObjectOfType<JobService>();
#endif
        if (js != null) js.RegisterPawn(this);
    }

    private void OnDisable()
    {
        JobService js;
#if UNITY_2023_1_OR_NEWER
        js = UnityEngine.Object.FindFirstObjectByType<JobService>();
#else
        js = FindObjectOfType<JobService>();
#endif
        if (js != null) js.UnregisterPawn(this);
    }

    public void SetJob(JobType t, Building by)
    {
        current = t;
        assignedBy = by;
        name = gameObject.name; // keep name stable; could add suffix if desired
    }
}


// ===== FILE: Assets/Scripts/Rendering/SpriteVisualFactory2D.cs =====
using System.Collections.Generic;
using FantasyColony.Defs;
using UnityEngine;
using System.Globalization;

public static class SpriteVisualFactory2D
{
    private static readonly Dictionary<string, GameObject> _ghostPrefabs = new();
    private static readonly Dictionary<string, GameObject> _placedPrefabs = new();
    private static Sprite _white;
    private static string _sortingLayer;
    private static int _orderGround;

    public static string SortingLayerName => _sortingLayer;
    public static int GroundOrder => _orderGround;

    public static void Build()
    {
        _ghostPrefabs.Clear();
        _placedPrefabs.Clear();
        EnsureWhiteSprite();
        DetectSortingLayer();

        foreach (var v in DefDatabase.Visuals)
        {
            // DefDatabase.Visuals is a list; build prefabs keyed by defName
            _ghostPrefabs[v.defName] = MakeSpritePrefab(v, translucent: true);
            _placedPrefabs[v.defName] = MakeSpritePrefab(v, translucent: false);
        }
        if (_ghostPrefabs.Count == 0)
        {
            // synthesize a default visual so we see something
            var v = new Visual2DDef { defName = "core.Visual.Board_Default", color_rgba = "#F3D95AFF", plane = "XY" };
            _ghostPrefabs[v.defName] = MakeSpritePrefab(v, translucent:true);
            _placedPrefabs[v.defName] = MakeSpritePrefab(v, translucent:false);
        }
        Debug.Log($"[SpriteVisualFactory2D] Ready. SortingLayer='{_sortingLayer}', GroundOrder={_orderGround}");
    }

    public static GameObject SpawnGhost(string visualId, Vector2Int foot, float tile, Transform parent)
    {
        if (!_ghostPrefabs.TryGetValue(visualId, out var pf)) return null;
        var inst = Object.Instantiate(pf, parent);
        SizeAndPlace(inst.transform, foot, tile, true);
        return inst;
    }

    public static GameObject SpawnPlaced(string visualId, Vector2Int foot, float tile, Transform parent)
    {
        if (!_placedPrefabs.TryGetValue(visualId, out var pf)) return null;
        var inst = Object.Instantiate(pf, parent);
        SizeAndPlace(inst.transform, foot, tile, false);
        return inst;
    }

    private static GameObject MakeSpritePrefab(Visual2DDef vdef, bool translucent)
    {
        var go = new GameObject((vdef.defName ?? "Unknown") + (translucent?".Ghost":".Placed"));
        var sr = go.AddComponent<SpriteRenderer>();
        Sprite sprite = _white;
        if (!string.IsNullOrEmpty(vdef.spritePath))
        {
            var loaded = Resources.Load<Sprite>(vdef.spritePath);
            if (loaded != null) sprite = loaded;
        }
        sr.sprite = sprite;
        sr.sortingLayerName = _sortingLayer;
        sr.sortingOrder = _orderGround + (translucent?5:3);
        var c = ParseColor(vdef.color_rgba); if (translucent) c.a *= 0.4f; sr.color = c;
        go.transform.localPosition = Vector3.zero;
        go.transform.localRotation = Quaternion.identity; // XY plane
        return go;
    }

    private static Color ParseColor(string s)
    {
        if (string.IsNullOrWhiteSpace(s)) return Color.white;
        s = s.Trim();
        if (s.StartsWith("#") && ColorUtility.TryParseHtmlString(s, out var cHex)) return cHex;
        var parts = s.Split(',');
        if (parts.Length >= 3)
        {
            float r = ParseFloat(parts[0], 1f);
            float g = ParseFloat(parts[1], 1f);
            float b = ParseFloat(parts[2], 1f);
            float a = parts.Length > 3 ? ParseFloat(parts[3], 1f) : 1f;
            return new Color(r, g, b, a);
        }
        return Color.white;
    }

    private static float ParseFloat(string s, float d)
    {
        return float.TryParse(s, NumberStyles.Float, CultureInfo.InvariantCulture, out var v) ? v : d;
    }

    private static void SizeAndPlace(Transform t, Vector2Int foot, float tile, bool ghost)
    {
        // Scale sprite in XY to desired world size: default white is 1 unit per side already
        t.localScale = new Vector3(Mathf.Max(0.1f, foot.x * tile), Mathf.Max(0.1f, foot.y * tile), 1f);
        // offset half size from parent (which is bottom-left)
        t.localPosition = new Vector3((foot.x * tile) * 0.5f, (foot.y * tile) * 0.5f, ghost ? -0.01f : 0f);
    }

    private static void EnsureWhiteSprite()
    {
        if (_white != null) return;
        var tex = new Texture2D(1,1, TextureFormat.RGBA32, false);
        tex.SetPixel(0,0,Color.white); tex.Apply();
        _white = Sprite.Create(tex, new Rect(0,0,1,1), new Vector2(0.5f,0.5f), 1f);
    }

    private static void DetectSortingLayer()
    {
        // Prefer a Pawn/Unit sprite if available, else any SpriteRenderer, else Default
        _sortingLayer = "Default";
        _orderGround = 0;
        SpriteRenderer picked = null;
        foreach (var sr in Object.FindObjectsByType<SpriteRenderer>(FindObjectsSortMode.None))
        {
            var n = sr.gameObject.name.ToLower();
            if (n.Contains("pawn") || n.Contains("unit") || n.Contains("colonist")) { picked = sr; break; }
            if (picked == null) picked = sr; // fallback to first seen
        }
        if (picked != null)
        {
            _sortingLayer = picked.sortingLayerName;
            _orderGround = picked.sortingOrder;
        }
    }
}


// ===== FILE: Assets/Scripts/Rendering/VisualFactory.cs =====
using FantasyColony.Defs;
using UnityEngine;

public static class VisualFactory
{
    public static GameObject CreateGhost(VisualDef vdef, Vector2Int foot, float tile, Transform parent, int preferredLayer, GridPlane plane, Camera cam)
    {
        var go = GameObject.CreatePrimitive(PrimitiveType.Quad);
        go.name = "Build Ghost";
        go.transform.SetParent(parent, false);
        var mr = go.GetComponent<MeshRenderer>();
        mr.sharedMaterial = MakeMaterial(vdef, true);
        mr.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;
        mr.receiveShadows = false;
        var col = go.GetComponent<Collider>(); if (col != null) Object.Destroy(col);
        go.layer = PickVisibleLayer(preferredLayer, cam);
        Orient(go.transform, vdef, foot, tile, true);
        return go;
    }

    public static GameObject CreatePlaced(VisualDef vdef, Vector2Int foot, float tile, Transform parent, int preferredLayer, GridPlane plane, Camera cam)
    {
        var go = GameObject.CreatePrimitive(PrimitiveType.Quad);
        go.name = "BoardVisual";
        go.transform.SetParent(parent, false);
        var mr = go.GetComponent<MeshRenderer>();
        mr.sharedMaterial = MakeMaterial(vdef, false);
        mr.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;
        mr.receiveShadows = false;
        var col = go.GetComponent<Collider>(); if (col != null) Object.Destroy(col);
        go.layer = PickVisibleLayer(preferredLayer, cam);
        Orient(go.transform, vdef, foot, tile, false);
        return go;
    }

    private static Material MakeMaterial(VisualDef vdef, bool translucent)
    {
        Shader s = null;
        if (vdef.shader_hint.Contains("URP")) s = Shader.Find("Universal Render Pipeline/Unlit");
        if (s == null && vdef.shader_hint.Contains("Unlit")) s = Shader.Find("Unlit/Color");
        if (s == null) s = Shader.Find("Standard");
        var m = new Material(s);
        if (s.name.Contains("Standard"))
        {
            // standard transparent setup
            m.SetFloat("_Mode", translucent ? 3 : 0);
            m.SetInt("_SrcBlend", (int)UnityEngine.Rendering.BlendMode.SrcAlpha);
            m.SetInt("_DstBlend", (int)UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);
            m.SetInt("_ZWrite", translucent ? 0 : 1);
            if (translucent) { m.EnableKeyword("_ALPHABLEND_ON"); m.renderQueue = 3001; } else { m.DisableKeyword("_ALPHABLEND_ON"); m.renderQueue = 2450; }
        }
        else
        {
            m.renderQueue = translucent ? 3001 : 2450;
        }
        var c = vdef.Color; if (translucent) c.a *= 0.4f; m.color = c;
        return m;
    }

    private static void Orient(Transform t, VisualDef vdef, Vector2Int foot, float tile, bool ghost)
    {
        if (vdef.Plane == GridPlane.XZ)
        {
            t.localRotation = Quaternion.Euler(-90f, 0f, 0f);
            var lift = vdef.z_lift <= 0f ? (ghost ? 0.08f : 0.05f) : vdef.z_lift;
            t.localPosition = new Vector3((foot.x * tile) * 0.5f, lift, (foot.y * tile) * 0.5f);
            t.localScale = new Vector3(foot.x * tile, foot.y * tile, 1f);
        }
        else
        {
            t.localRotation = Quaternion.identity;
            var lift = vdef.z_lift <= 0f ? (ghost ? 0.02f : 0.0f) : vdef.z_lift;
            t.localPosition = new Vector3((foot.x * tile) * 0.5f, (foot.y * tile) * 0.5f, lift);
            t.localScale = new Vector3(foot.x * tile, foot.y * tile, 1f);
        }
    }

    private static int PickVisibleLayer(int preferred, Camera cam)
    {
        if (cam == null) return preferred;
        int mask = cam.cullingMask;
        if ((mask & (1 << preferred)) != 0) return preferred;
        for (int i = 0; i < 32; i++) if ((mask & (1 << i)) != 0) return i;
        return 0;
    }
}


// ===== FILE: Assets/Scripts/Systems/ControlManager.cs =====
using System;
using UnityEngine;

// ReSharper disable Unity.InefficientPropertyAccess
/// <summary>
/// Global "assume control" ownership. Exactly one pawn can be controlled at a time.
/// </summary>
[AddComponentMenu("Systems/Control Manager")]
public class ControlManager : MonoBehaviour
{
    public static SpritePawn Controlled { get; private set; }
    public static event Action<SpritePawn> OnControlledChanged;

    public static void AssumeControl(SpritePawn pawn)
    {
        if (pawn == null) return;
        if (Controlled == pawn)
        {
            // Already controlled; no change but still raise event for listeners if needed.
            try { OnControlledChanged?.Invoke(Controlled); } catch { }
            return;
        }
        // Release previous
        if (Controlled != null) Controlled.SetControlled(false);
        Controlled = pawn;
        Controlled.SetControlled(true);
        SelectionController.SelectOnly(Controlled); // pin selection to the controlled pawn
        try { OnControlledChanged?.Invoke(Controlled); } catch { }
    }

    public static void ReleaseControl()
    {
        if (Controlled == null) return;
        Controlled.SetControlled(false);
        Controlled = null;
        try { OnControlledChanged?.Invoke(null); } catch { }
    }
}



// ===== FILE: Assets/Scripts/Systems/GameCalendar.cs =====
using System;
using System.Collections.Generic;
using UnityEngine;

[Serializable]
public class SeasonDef
{
    public string name = "Season";
    [Min(1)] public int days = 12;
    public Color color = Color.white; // reserved for future UI lighting/themes
}

/// <summary>
/// Lightweight calendar layered on top of GameClock. Supports custom seasons/lengths.
/// Default year = 4 seasons Ã— 12 days = 48 days.
/// </summary>
public class GameCalendar : MonoBehaviour
{
    [Header("Calendar Structure")]
    [SerializeField] private List<SeasonDef> seasons = new List<SeasonDef>
    {
        new SeasonDef { name = "Spring", days = 12, color = new Color(0.6f, 0.9f, 0.6f) },
        new SeasonDef { name = "Summer", days = 12, color = new Color(0.9f, 0.85f, 0.5f) },
        new SeasonDef { name = "Autumn", days = 12, color = new Color(0.95f, 0.7f, 0.4f) },
        new SeasonDef { name = "Winter", days = 12, color = new Color(0.8f, 0.9f, 1f) }
    };

    [Header("State (read-only)")]
    [SerializeField] private int year = 1;       // starts at 1
    [SerializeField] private int dayOfYear = 1;  // 1..DaysPerYear

    public event Action<int> OnYearChanged;
    public event Action<int> OnSeasonChanged; // passes SeasonIndex

    public int Year => year;
    public int DayOfYear => dayOfYear;
    public int SeasonCount => Mathf.Max(1, seasons.Count);
    public int DaysPerYear { get; private set; }

    public int SeasonIndex
    {
        get
        {
            var (idx, _) = ResolveSeasonAndDay(dayOfYear);
            return idx;
        }
    }

    public string CurrentSeasonName => seasons.Count == 0 ? "Season" : seasons[SeasonIndex].name;

    public int DayOfSeason
    {
        get
        {
            var (_, dayInSeason) = ResolveSeasonAndDay(dayOfYear);
            return dayInSeason;
        }
    }

    private GameClock _clock;

    private void Awake()
    {
        RecomputeDaysPerYear();
        dayOfYear = Mathf.Clamp(dayOfYear, 1, DaysPerYear);
    }

    private void OnEnable()
    {
        _clock = GameClockAPI.Find();
        if (_clock != null) _clock.OnDayChanged += HandleDayAdvanced;
    }

    private void OnDisable()
    {
        if (_clock != null) _clock.OnDayChanged -= HandleDayAdvanced;
        _clock = null;
    }

    private void HandleDayAdvanced(int newClockDay)
    {
        AdvanceOneDay();
    }

    public void ResetCalendar(int newYear, int newDayOfYear)
    {
        RecomputeDaysPerYear();
        int prevSeason = SeasonIndex;
        year = Mathf.Max(1, newYear);
        dayOfYear = Mathf.Clamp(newDayOfYear, 1, DaysPerYear);
        int nowSeason = SeasonIndex;
        if (nowSeason != prevSeason) SafeInvokeSeasonChanged(nowSeason);
    }

    public void AdvanceOneDay()
    {
        int prevSeason = SeasonIndex;
        dayOfYear++;
        if (dayOfYear > DaysPerYear)
        {
            dayOfYear = 1;
            year++;
            SafeInvokeYearChanged(year);
        }
        int nowSeason = SeasonIndex;
        if (nowSeason != prevSeason) SafeInvokeSeasonChanged(nowSeason);
    }

    private void RecomputeDaysPerYear()
    {
        if (seasons == null || seasons.Count == 0)
        {
            seasons = new List<SeasonDef> { new SeasonDef { name = "All-Year", days = 48 } };
        }
        int total = 0;
        foreach (var s in seasons) total += Mathf.Max(1, s.days);
        DaysPerYear = Mathf.Max(1, total);
    }

    private (int seasonIndex, int dayInSeason) ResolveSeasonAndDay(int dayOfYear1)
    {
        int d = Mathf.Clamp(dayOfYear1, 1, DaysPerYear);
        int acc = 0;
        for (int i = 0; i < seasons.Count; i++)
        {
            int len = Mathf.Max(1, seasons[i].days);
            if (d <= acc + len)
            {
                int dayInSeason = d - acc; // 1-based
                return (i, dayInSeason);
            }
            acc += len;
        }
        // Fallback
        return (0, d);
    }

    private void SafeInvokeYearChanged(int y)
    {
        try { OnYearChanged?.Invoke(y); } catch { }
    }

    private void SafeInvokeSeasonChanged(int season)
    {
        try { OnSeasonChanged?.Invoke(season); } catch { }
    }
}

public static class GameCalendarAPI
{
    public static GameCalendar Find()
    {
#if UNITY_2023_1_OR_NEWER
        // Prefer the modern API to avoid CS0618 warnings.
        return UnityEngine.Object.FindFirstObjectByType<GameCalendar>();
#else
        // Fallback for older Unity versions.
        return UnityEngine.Object.FindObjectOfType<GameCalendar>();
#endif
    }
}



// ===== FILE: Assets/Scripts/Systems/GameClock.cs =====
using System;
using UnityEngine;

/// <summary>
/// Central 24-hour game clock that advances with Time.deltaTime (respects pause & speed).
/// Exposes Day, Hour, Minute, and useful helpers for schedules/lighting.
/// </summary>
public class GameClock : MonoBehaviour
{
    [Header("Tuning")]
    [Tooltip("Real-time seconds for one full in-game day at 1Ã— speed.")]
    [SerializeField] private float secondsPerGameDay = 600f; // 10 real minutes per game day by default

    [Tooltip("Starting in-game time (24h clock).")]
    [Range(0, 23)] [SerializeField] private int startHour = 8;
    [Range(0, 59)] [SerializeField] private int startMinute = 0;

    [Header("State (read-only)")]
    [SerializeField] private int currentDay = 1;
    [SerializeField] private float timeOfDaySeconds; // 0..secondsPerGameDay

    public event Action<int> OnDayChanged;

    public int Day => currentDay;
    public float NormalizedDay => secondsPerGameDay <= 0f ? 0f : Mathf.Clamp01(timeOfDaySeconds / secondsPerGameDay);

    public int Hour24
    {
        get
        {
            float hourLen = HourLengthSeconds;
            return Mathf.FloorToInt(timeOfDaySeconds / hourLen) % 24;
        }
    }

    public int Minute
    {
        get
        {
            float minuteLen = MinuteLengthSeconds;
            return Mathf.FloorToInt(timeOfDaySeconds / minuteLen) % 60;
        }
    }

    public int Second
    {
        get
        {
            float secondLen = SecondLengthSeconds;
            return Mathf.FloorToInt(timeOfDaySeconds / secondLen) % 60;
        }
    }

    public string TimeHHMM => $"{Hour24:00}:{Minute:00}";

    private float HourLengthSeconds => secondsPerGameDay / 24f;
    private float MinuteLengthSeconds => secondsPerGameDay / (24f * 60f);
    private float SecondLengthSeconds => secondsPerGameDay / (24f * 60f * 60f);

    private void Awake()
    {
        if (secondsPerGameDay <= 0f) secondsPerGameDay = 600f;
        InitializeToStartTime();
    }

    private void Update()
    {
        // deltaTime respects pause & timeScale; perfect for the clock.
        timeOfDaySeconds += Time.deltaTime;

        if (timeOfDaySeconds >= secondsPerGameDay)
        {
            timeOfDaySeconds -= secondsPerGameDay;
            currentDay = Mathf.Max(1, currentDay + 1);
            try { OnDayChanged?.Invoke(currentDay); } catch { /* ignore listener errors */ }
        }
    }

    /// <summary>Resets the clock to a specific day/hour/minute (seconds = 0).</summary>
    public void ResetClock(int day, int hour, int minute)
    {
        currentDay = Mathf.Max(1, day);
        SetTimeOfDay(hour, minute, 0);
    }

    private void InitializeToStartTime()
    {
        currentDay = Mathf.Max(1, currentDay);
        SetTimeOfDay(startHour, startMinute, 0);
    }

    private void SetTimeOfDay(int hour, int minute, int second)
    {
        hour = Mathf.Clamp(hour, 0, 23);
        minute = Mathf.Clamp(minute, 0, 59);
        second = Mathf.Clamp(second, 0, 59);

        // Map HH:MM:SS to our simulated-day seconds.
        float realSecondsInDay = (hour * 3600f) + (minute * 60f) + second;
        float t = realSecondsInDay / 86400f; // 0..1
        timeOfDaySeconds = Mathf.Repeat(t * secondsPerGameDay, secondsPerGameDay);
    }
}

// Convenience static accessor if desired elsewhere.
public static class GameClockAPI
{
    public static GameClock Find()
    {
#if UNITY_2023_1_OR_NEWER
        // Prefer the modern API to avoid CS0618 warnings.
        return UnityEngine.Object.FindFirstObjectByType<GameClock>();
#else
        // Fallback for older Unity versions.
        return UnityEngine.Object.FindObjectOfType<GameClock>();
#endif
    }
}


// ===== FILE: Assets/Scripts/Systems/PauseController.cs =====
using System;
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.LowLevel;
#endif

/// <summary>
/// Global pause toggle (Space). Pauses via Time.timeScale and shows a tiny overlay while paused.
/// </summary>
[AddComponentMenu("Systems/Pause Controller")]
public class PauseController : MonoBehaviour
{
    public static bool IsPaused { get; private set; }
    public static float CurrentSpeed { get; private set; } = 1f; // 1x by default
    public static event Action<bool> OnPauseChanged;

    [Header("Overlay")]
    [SerializeField] private Vector2 indicatorPadding = new Vector2(12f, 8f);
    [SerializeField] private float indicatorScale = 0.022f; // % of screen height for font sizing

#if ENABLE_INPUT_SYSTEM
    private InputAction _pauseAction;
    private InputAction _speed1Action;
    private InputAction _speed2Action;
    private InputAction _speed3Action;
#endif

    private void Update()
    {
#if ENABLE_INPUT_SYSTEM
        // With the new Input System active, we use an InputAction (enabled in OnEnable).
#else
        if (Input.GetKeyDown(KeyCode.Space))
        {
            TogglePause();
        }
        if (Input.GetKeyDown(KeyCode.Alpha1)) SetSpeed(1f);
        if (Input.GetKeyDown(KeyCode.Alpha2)) SetSpeed(2f);
        if (Input.GetKeyDown(KeyCode.Alpha3)) SetSpeed(3f);
#endif
    }

    public static void SetPaused(bool pause)
    {
        if (IsPaused == pause) return;
        IsPaused = pause;
        ApplyTimeScale();
#if UNITY_EDITOR
        Debug.Log($"Paused: {IsPaused}");
#endif
        try { OnPauseChanged?.Invoke(IsPaused); } catch { /* no-op */ }
    }

    public static void SetSpeed(float s)
    {
        CurrentSpeed = Mathf.Clamp(s, 0.25f, 3f);
        if (!IsPaused) ApplyTimeScale();
    }

    private static void ApplyTimeScale()
    {
        Time.timeScale = IsPaused ? 0f : CurrentSpeed;
    }

    private void TogglePause()
    {
        SetPaused(!IsPaused);
    }

#if ENABLE_INPUT_SYSTEM
    private void OnEnable()
    {
        if (_pauseAction == null)
        {
            // Bind keyboard Space; also allow gamepad Start as a convenience.
            _pauseAction = new InputAction("Pause", binding: "<Keyboard>/space");
            _pauseAction.AddBinding("<Gamepad>/start");
            _pauseAction.performed += OnPausePerformed;
        }
        if (_speed1Action == null)
        {
            _speed1Action = new InputAction("Speed1", binding: "<Keyboard>/1");
            _speed1Action.performed += ctx => SetSpeed(1f);
        }
        if (_speed2Action == null)
        {
            _speed2Action = new InputAction("Speed2", binding: "<Keyboard>/2");
            _speed2Action.performed += ctx => SetSpeed(2f);
        }
        if (_speed3Action == null)
        {
            _speed3Action = new InputAction("Speed3", binding: "<Keyboard>/3");
            _speed3Action.performed += ctx => SetSpeed(3f);
        }
        _pauseAction.Enable();
        _speed1Action.Enable();
        _speed2Action.Enable();
        _speed3Action.Enable();
    }

    private void OnDisable()
    {
        if (_pauseAction != null)
            _pauseAction.Disable();
        if (_speed1Action != null)
            _speed1Action.Disable();
        if (_speed2Action != null)
            _speed2Action.Disable();
        if (_speed3Action != null)
            _speed3Action.Disable();
    }

    private void OnPausePerformed(InputAction.CallbackContext ctx)
    {
        TogglePause();
    }
#endif

    private void OnGUI()
    {
        // Top-right speed (and paused) indicator
        var sw = Screen.width;
        var sh = Screen.height;

        var label = new GUIStyle(GUI.skin.label)
        {
            alignment = TextAnchor.UpperRight,
            wordWrap = false,
            fontSize = Mathf.Max(12, Mathf.RoundToInt(sh * indicatorScale))
        };

        string text = IsPaused ? $"Paused â€” Speed: {CurrentSpeed:0.##}Ã—" : $"Speed: {CurrentSpeed:0.##}Ã—";
        Vector2 size = label.CalcSize(new GUIContent(text));
        float x = sw - size.x - indicatorPadding.x;
        float y = indicatorPadding.y;
        GUI.Label(new Rect(x, y, size.x, size.y), text, label);
    }
}


// ===== FILE: Assets/Scripts/Systems/PawnInteractionManager.cs =====
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Detects pawn/pawn overlaps and starts short "chat" interactions:
/// they walk side-by-side for a few seconds, then the follower returns to
/// its collision point along the shortest route.
/// If one pawn is controlled, the non-controlled pawn is always the follower.
/// </summary>
[AddComponentMenu("Systems/Pawn Interaction Manager")]
public class PawnInteractionManager : MonoBehaviour
{
    [SerializeField] private float minChatSeconds = 2.5f;
    [SerializeField] private float maxChatSeconds = 4.0f;
    [SerializeField] private float extraRadiusPadding = 0.12f; // widen trigger to improve reliability
    [SerializeField] private float pairRetestCooldown = 2.0f;  // seconds after an interaction ends before same pair can retrigger

    // Remember last time two specific pawns interacted to avoid immediate retriggers.
    private readonly Dictionary<(int,int), float> pairCooldownUntil = new Dictionary<(int,int), float>();

    private void Update()
    {
        // If any pawn is being controlled, still allow interactions with others (but controlled pawn will always be leader).
        if (SpritePawn.Instances.Count < 2) return;

        var now = Time.unscaledTime;
        // Copy to list to avoid potential enumeration issues if Instances changes mid-frame.
        var list = ListCache;
        list.Clear();
        foreach (var p in SpritePawn.Instances) if (p != null) list.Add(p);

        int n = list.Count;
        for (int i = 0; i < n; i++)
        {
            var a = list[i];
            if (a == null || !a.IsInteractable) continue;

            for (int j = i + 1; j < n; j++)
            {
                var b = list[j];
                if (b == null || !b.IsInteractable) continue;

                // Pair cooldown gate
                var key = GetKey(a, b);
                if (pairCooldownUntil.TryGetValue(key, out float until) && now < until) continue;

                // Distance check (XZ)
                Vector3 pa = a.transform.position;
                Vector3 pb = b.transform.position;
                float dx = pa.x - pb.x;
                float dz = pa.z - pb.z;
                float dist2 = dx * dx + dz * dz;
                float rad = (a.CollisionRadius + b.CollisionRadius) * 1.05f + extraRadiusPadding;
                if (dist2 > rad * rad) continue;

                // Sprinting cancels/ignores interactions (dash through)
                if (a.IsSprinting || b.IsSprinting)
                    continue;

                // Decide leader/follower
                SpritePawn leader, follower;
                if (a.IsControlled && !b.IsControlled) { leader = a; follower = b; }
                else if (b.IsControlled && !a.IsControlled) { leader = b; follower = a; }
                else
                {
                    // 50/50 random when both are AI
                    if (Random.value < 0.5f) { leader = a; follower = b; } else { leader = b; follower = a; }
                }

                // Start chat interaction
                float seconds = Random.Range(minChatSeconds, maxChatSeconds);
                // Use midpoint as collision point so both agree on the same spot visually.
                Vector3 collisionPoint = (pa + pb) * 0.5f;
                leader.BeginChatLeader(follower, seconds, collisionPoint);
                follower.BeginChatFollower(leader, seconds, collisionPoint);

                // Per-pair cooldown
                pairCooldownUntil[key] = now + pairRetestCooldown;
            }
        }
    }

    private static (int,int) GetKey(SpritePawn a, SpritePawn b)
    {
        int ia = a.GetInstanceID();
        int ib = b.GetInstanceID();
        return ia < ib ? (ia, ib) : (ib, ia);
    }

    // Simple reusable list to avoid allocs
    private static readonly List<SpritePawn> ListCache = new List<SpritePawn>(16);
}


// ===== FILE: Assets/Scripts/Systems/SelectionController.cs =====
using System;
using System.Collections.Generic;
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
#endif

/// <summary>
/// Central selection controller.
/// - Single click selects a pawn (click empty clears).
/// - Drag-select (marquee) to select one or many pawns.
/// </summary>
[AddComponentMenu("Systems/Selection Controller")]
public class SelectionController : MonoBehaviour
{
    public static SpritePawn Selected { get; private set; }
    public static event Action<SpritePawn> OnSelectionChanged;
    private static SelectionController _instance;

    private static readonly List<SpritePawn> _selectedGroup = new List<SpritePawn>();
    public static IReadOnlyList<SpritePawn> SelectedGroup => _selectedGroup;

    private Camera _cam;

    // Drag/marquee state (screen-space, origin bottom-left)
    private bool _dragging;
    private Vector2 _dragStart;
    private Vector2 _dragNow;
    private const float _dragThreshold = 6f; // pixels

    // If a press began over HUD, ignore the whole press/drag/release sequence.
    private bool _pressOverHUD;

    // GUI helpers
    private static Texture2D _texWhite;

    private void Awake()
    {
        _cam = Camera.main;
        if (_cam == null)
        {
            // Fallback to any camera in scene
#if UNITY_2022_2_OR_NEWER
            var any = UnityEngine.Object.FindAnyObjectByType<Camera>();
#else
            var any = UnityEngine.Object.FindObjectOfType<Camera>();
#endif
            _cam = any;
        }
    }
    private void OnEnable() { _instance = this; }
    private void OnDisable() { if (_instance == this) _instance = null; }

    private void Update()
    {
        // Handle mouse input for both legacy and new input systems.
#if ENABLE_INPUT_SYSTEM
        var mouse = Mouse.current;
        if (mouse != null)
        {
            Vector2 pos = mouse.position.ReadValue();
            // If we are controlling a pawn, block selection input unless it's over HUD (so gizmos remain usable).
            if (ControlManager.Controlled != null && !IsOverHUD(pos))
            {
                // Still allow HUD clicks to go through (handled in SelectionHUD)
                _pressOverHUD = true;
                return;
            }
            if (IsOverHUD(pos)) { if (mouse.leftButton.wasPressedThisFrame) _pressOverHUD = true; return; }
            if (mouse.leftButton.wasPressedThisFrame) OnMouseDown(pos);
            if (mouse.leftButton.isPressed) OnMouseDrag(pos);
            if (mouse.leftButton.wasReleasedThisFrame) OnMouseUp(pos);
            return;
        }
#endif

        // Legacy Input fallback
        Vector2 mpos = Input.mousePosition;
        if (ControlManager.Controlled != null && !IsOverHUD(mpos))
        {
            if (Input.GetMouseButtonDown(0)) _pressOverHUD = true;
            // Ignore all selection while controlled (unless HUD)
            return;
        }

        if (IsOverHUD(mpos))
        {
            if (Input.GetMouseButtonDown(0)) _pressOverHUD = true;
            return;
        }
        if (Input.GetMouseButtonDown(0)) OnMouseDown(mpos);
        if (Input.GetMouseButton(0)) OnMouseDrag(mpos);
        if (Input.GetMouseButtonUp(0)) OnMouseUp(mpos);
    }

    public static void SetSelected(SpritePawn pawn)
    {
        if (Selected == pawn)
        {
            // Keep group as-is; still raise event for listeners.
            try { OnSelectionChanged?.Invoke(Selected); } catch { }
            return;
        }
        Selected = pawn; // primary selection
        try { OnSelectionChanged?.Invoke(Selected); } catch { /* no-op */ }
    }

    /// <summary>
    /// Clears the group and selects only the provided pawn. Used when assuming control.
    /// </summary>
    public static void SelectOnly(SpritePawn pawn)
    {
        if (_instance == null)
        {
            SetSelected(pawn);
            return;
        }
        // Turn off previous rings
        for (int i = 0; i < _selectedGroup.Count; i++)
        {
            var p = _selectedGroup[i];
            if (p != null) p.SetSelected(false);
        }
        _selectedGroup.Clear();
        if (pawn != null)
        {
            _selectedGroup.Add(pawn);
            pawn.SetSelected(true);
        }
        SetSelected(pawn);
    }
    private void ApplyGroupSelection(List<SpritePawn> newGroup)
    {
        // Turn off previous rings
        for (int i = 0; i < _selectedGroup.Count; i++)
        {
            var p = _selectedGroup[i];
            if (p != null) p.SetSelected(false);
        }

        _selectedGroup.Clear();
        if (newGroup != null && newGroup.Count > 0)
        {
            _selectedGroup.AddRange(newGroup);
            // Turn on rings for new group
            for (int i = 0; i < _selectedGroup.Count; i++)
            {
                var p = _selectedGroup[i];
                if (p != null) p.SetSelected(true);
            }
            // Primary = first
            SetSelected(_selectedGroup[0]);
        }
        else
        {
            SetSelected(null);
        }
    }

    private void SingleClickSelect(Vector2 screenPosBL)
    {
        if (_cam == null) return;
        var ray = _cam.ScreenPointToRay(screenPosBL);
        if (Physics.Raycast(ray, out var hit, 1000f, ~0, QueryTriggerInteraction.Ignore))
        {
            var pawn = hit.collider != null ? hit.collider.GetComponentInParent<SpritePawn>() : null;
            var list = new List<SpritePawn>();
            if (pawn != null) list.Add(pawn);
            ApplyGroupSelection(list);
        }
        else
        {
            ApplyGroupSelection(null);
        }
    }

    private void OnMouseDown(Vector2 screenPosBL)
    {
        if (_pressOverHUD) return;
        _dragStart = screenPosBL;
        _dragNow = screenPosBL;
        _dragging = false;
    }

    private void OnMouseDrag(Vector2 screenPosBL)
    {
        if (_pressOverHUD) return;
        _dragNow = screenPosBL;
        if (!_dragging && Vector2.Distance(_dragStart, _dragNow) > _dragThreshold)
        {
            _dragging = true;
        }
    }

    private void OnMouseUp(Vector2 screenPosBL)
    {
        if (_pressOverHUD) { _pressOverHUD = false; return; }
        _dragNow = screenPosBL;
        if (!_dragging)
        {
            // Treat as a click
            SingleClickSelect(screenPosBL);
        }
        else
        {
            // Marquee select
            var rect = GetScreenRectBL(_dragStart, _dragNow);
            var candidates = new List<SpritePawn>();
            if (_cam != null)
            {
                foreach (var pawn in SpritePawn.Instances)
                {
                    if (pawn == null) continue;
                    var wp = pawn.transform.position;
                    var sp = _cam.WorldToScreenPoint(wp);
                    if (sp.z < 0f) continue; // behind camera
                    var p = new Vector2(sp.x, sp.y); // bottom-left origin
                    if (rect.Contains(p))
                    {
                        candidates.Add(pawn);
                    }
                }
            }
            ApplyGroupSelection(candidates);
        }
        _dragging = false;
    }

    private static Rect GetScreenRectBL(Vector2 aBL, Vector2 bBL)
    {
        float xMin = Mathf.Min(aBL.x, bBL.x);
        float xMax = Mathf.Max(aBL.x, bBL.x);
        float yMin = Mathf.Min(aBL.y, bBL.y);
        float yMax = Mathf.Max(aBL.y, bBL.y);
        return Rect.MinMaxRect(xMin, yMin, xMax, yMax);
    }

    private bool IsOverHUD(Vector2 screenPosBL)
    {
        var p = SelectionHUD.LastPanelRectBL;
        var g = SelectionHUD.LastGizmoRectBL;
        bool overPanel = p.width > 0f && p.height > 0f && p.Contains(screenPosBL);
        bool overGizmo = g.width > 0f && g.height > 0f && g.Contains(screenPosBL);
        return overPanel || overGizmo;
    }

    private void OnGUI()
    {
        if (!_dragging) return;

        var sw = Screen.width;
        var sh = Screen.height;

        // Convert bottom-left rect to GUI-space (top-left origin)
        var rBL = GetScreenRectBL(_dragStart, _dragNow);
        var rGUI = new Rect(rBL.xMin, sh - rBL.yMax, rBL.width, rBL.height);

        if (_texWhite == null)
        {
            _texWhite = new Texture2D(1, 1, TextureFormat.RGBA32, false);
            _texWhite.SetPixel(0, 0, Color.white);
            _texWhite.Apply(false, false);
        }

        // Fill
        var fillCol = new Color(0.2f, 0.6f, 1f, 0.15f);
        var borderCol = new Color(0.2f, 0.6f, 1f, 0.9f);
        GUI.color = fillCol;
        GUI.DrawTexture(rGUI, _texWhite);
        // Border
        GUI.color = borderCol;
        GUI.DrawTexture(new Rect(rGUI.xMin, rGUI.yMin, rGUI.width, 2f), _texWhite);
        GUI.DrawTexture(new Rect(rGUI.xMin, rGUI.yMax - 2f, rGUI.width, 2f), _texWhite);
        GUI.DrawTexture(new Rect(rGUI.xMin, rGUI.yMin, 2f, rGUI.height), _texWhite);
        GUI.DrawTexture(new Rect(rGUI.xMax - 2f, rGUI.yMin, 2f, rGUI.height), _texWhite);
        GUI.color = Color.white;
    }
}


// ===== FILE: Assets/Scripts/UI/ClockHUD.cs =====
using UnityEngine;

/// <summary>
/// Minimal IMGUI overlay showing Year/Season/Day and 24h time (HH:MM).
/// Rendered under the speed indicator at the top-right, slightly smaller.
/// </summary>
public class ClockHUD : MonoBehaviour
{
    [Header("Layout")]
    [SerializeField] private Vector2 topRightOffset = new Vector2(12f, 12f);
    [SerializeField] private float fontPct = 0.032f; // slightly smaller than speed text
    [SerializeField] private float extraTopOffsetPct = 0.040f; // approximate height of speed label + padding

    private GUIStyle _label;
    private GUIStyle _shadow;
    private void Ensure()
    {
        if (_label == null)
        {
            _label = new GUIStyle(GUI.skin.label)
            {
                alignment = TextAnchor.UpperRight,
                fontStyle = FontStyle.Bold
            };
            _label.normal.textColor = Color.white;
        }
        if (_shadow == null)
        {
            _shadow = new GUIStyle(_label);
            _shadow.normal.textColor = new Color(0f, 0f, 0f, 0.6f);
        }
    }

    private void OnGUI()
    {
        var clock = GameClockAPI.Find();
        if (clock == null) return; // nothing to show

        var cal = GameCalendarAPI.Find();

        Ensure();

        int fontSize = Mathf.RoundToInt(Mathf.Max(14f, Screen.height * fontPct));
        _label.fontSize = fontSize;
        _shadow.fontSize = fontSize;

        // Compose text: prefer calendar if available
        string prefix;
        if (cal != null)
        {
            prefix = $"Y{cal.Year} Â· {cal.CurrentSeasonName} {cal.DayOfSeason:00}";
        }
        else
        {
            prefix = $"Day {clock.Day:0}";
        }
        string text = $"{prefix} â€” {clock.TimeHHMM}";

        // Layout: top-right, below speed label. We approximate the speed label height via extraTopOffsetPct.
        float y = topRightOffset.y + Mathf.Max(24f, Screen.height * extraTopOffsetPct);
        Rect r = new Rect(0f + topRightOffset.x, y, Screen.width - (topRightOffset.x * 2f), Screen.height);

        // Shadow + main text
        Rect rShadow = new Rect(r.x + 1, r.y + 1, r.width, r.height);
        GUI.Label(rShadow, text, _shadow);
        GUI.Label(r, text, _label);
    }
}


// ===== FILE: Assets/Scripts/UI/IntroScreen.cs =====
using UnityEngine;

public class IntroScreen : MonoBehaviour
{
    // Public flag so other HUDs (e.g., Build) can hide during the intro menu
    public static bool IsVisible { get; private set; }
    [Header("Layout")]
    [SerializeField] private float titlePct = 0.18f;            // % of screen height for the title font size
    [SerializeField] private float buttonPct = 0.06f;           // % of screen height for button height
    [SerializeField] private float minButtonHeight = 64f;       // hard floor so buttons are never tiny
    [SerializeField] private Color backgroundColor = new Color(0.08f, 0.09f, 0.11f, 1f); // opaque

    [Header("Content")]
    [SerializeField] private string gameTitle = "Fantasy Colony";

    [Header("Map Settings")]
    [Tooltip("Select the starting map size.")]
    [SerializeField] private string[] mapSizeLabels = { "32Ã—32", "64Ã—64", "128Ã—128", "256Ã—256" };
    private static readonly int[] mapSizes = { 32, 64, 128, 256 };
    [SerializeField] private int selectedMapIndex = 2; // Default to 128Ã—128

    private bool showMenu = true;
    private GUIStyle titleStyle;
    private GUIStyle buttonStyle;
    private GUIStyle sizeStyle;
    private GUIStyle sizeSelectedStyle;
    private GUIStyle confirmStyle;
    private GUIStyle bgStyle;
    private Texture2D bgTex;
    private Texture2D sizeTex;
    private Texture2D sizeSelTex;

    private void OnEnable() { IsVisible = true; }
    private void OnDisable() { IsVisible = false; }
    private void EnsureStyles()
    {
        if (bgTex == null)
        {
            bgTex = new Texture2D(1, 1, TextureFormat.RGBA32, false);
            bgTex.SetPixel(0, 0, backgroundColor);
            bgTex.Apply();
        }
        if (sizeTex == null)
        {
            sizeTex = new Texture2D(1, 1, TextureFormat.RGBA32, false);
            sizeTex.SetPixel(0, 0, new Color(0.22f, 0.24f, 0.28f, 1f));
            sizeTex.Apply();
        }
        if (sizeSelTex == null)
        {
            sizeSelTex = new Texture2D(1, 1, TextureFormat.RGBA32, false);
            sizeSelTex.SetPixel(0, 0, new Color(0.32f, 0.52f, 0.92f, 1f));
            sizeSelTex.Apply();
        }
        if (bgStyle == null)
        {
            bgStyle = new GUIStyle(GUI.skin.box)
            {
                normal = { background = bgTex },
                border = new RectOffset(0, 0, 0, 0),
                margin = new RectOffset(0, 0, 0, 0),
                padding = new RectOffset(0, 0, 0, 0)
            };
        }
        if (titleStyle == null)
        {
            titleStyle = new GUIStyle(GUI.skin.label)
            {
                alignment = TextAnchor.MiddleCenter,
                fontStyle = FontStyle.Bold,
                wordWrap = true
            };
            titleStyle.normal.textColor = Color.white;
        }
        if (buttonStyle == null)
        {
            buttonStyle = new GUIStyle(GUI.skin.button)
            {
                alignment = TextAnchor.MiddleCenter
            };
        }
        if (sizeStyle == null)
        {
            sizeStyle = new GUIStyle(buttonStyle);
            sizeStyle.normal.background = sizeTex;
            sizeStyle.hover.background = sizeTex;
            sizeStyle.active.background = sizeTex;
            sizeStyle.fontStyle = FontStyle.Normal;
            sizeStyle.normal.textColor = new Color(0.9f, 0.9f, 0.9f, 1f);
        }
        if (sizeSelectedStyle == null)
        {
            sizeSelectedStyle = new GUIStyle(buttonStyle);
            sizeSelectedStyle.normal.background = sizeSelTex;
            sizeSelectedStyle.hover.background = sizeSelTex;
            sizeSelectedStyle.active.background = sizeSelTex;
            sizeSelectedStyle.fontStyle = FontStyle.Bold;
            sizeSelectedStyle.normal.textColor = Color.white;
        }
        if (confirmStyle == null)
        {
            confirmStyle = new GUIStyle(GUI.skin.label) { alignment = TextAnchor.MiddleCenter, fontStyle = FontStyle.Bold };
            confirmStyle.normal.textColor = Color.white;
        }
    }

    private void OnGUI()
    {
        // Keep public flag synced so other HUDs can hide while intro is up
        IsVisible = showMenu;
        if (!showMenu) return;

        EnsureStyles();

        // Full-screen opaque background
        Rect full = new Rect(0, 0, Screen.width, Screen.height);
        GUI.Box(full, GUIContent.none, bgStyle);

        // Dynamic sizes based on screen height
        float titleSize = Mathf.Max(32f, Screen.height * titlePct);
        float btnH = Mathf.Max(minButtonHeight, Screen.height * buttonPct);

        titleStyle.fontSize = Mathf.RoundToInt(titleSize);
        buttonStyle.fontSize = Mathf.RoundToInt(btnH * 0.38f);
        sizeStyle.fontSize = buttonStyle.fontSize;
        sizeSelectedStyle.fontSize = buttonStyle.fontSize;
        confirmStyle.fontSize = Mathf.RoundToInt(btnH * 0.45f);

        GUILayout.BeginArea(full);
        GUILayout.BeginVertical();
        GUILayout.FlexibleSpace();

        // Title
        GUILayout.Label(gameTitle, titleStyle);
        GUILayout.Space(btnH * 0.6f);

        // Map size grid (2Ã—2) with large, tappable buttons
        float gridPadding = Mathf.Max(8f, btnH * 0.25f);
        for (int row = 0; row < 2; row++)
        {
            GUILayout.BeginHorizontal();
            GUILayout.Space(gridPadding);
            for (int col = 0; col < 2; col++)
            {
                int i = row * 2 + col;
                if (i >= mapSizeLabels.Length) break;

                bool isActive = selectedMapIndex == i;
                string label = isActive ? mapSizeLabels[i] + "   \u2713" : mapSizeLabels[i];
                GUIStyle st = isActive ? sizeSelectedStyle : sizeStyle;
                if (GUILayout.Button(label, st, GUILayout.Height(btnH), GUILayout.ExpandWidth(true)))
                {
                    selectedMapIndex = i;
                }

                GUILayout.Space(gridPadding);
            }
            GUILayout.EndHorizontal();
            GUILayout.Space(gridPadding * 0.6f);
        }

        GUILayout.Space(btnH * 0.2f);
        GUILayout.Label($"Map Size: {mapSizeLabels[selectedMapIndex]}", confirmStyle);

        GUILayout.Space(btnH * 0.4f);

        // Start button (extra tall)
        if (GUILayout.Button("Start", buttonStyle, GUILayout.Height(btnH * 1.2f)))
        {
            OnStartGame();
        }
        GUILayout.Space(gridPadding * 0.5f);

        // Quit button
        if (GUILayout.Button("Quit", buttonStyle, GUILayout.Height(btnH)))
        {
#if UNITY_EDITOR
            UnityEditor.EditorApplication.isPlaying = false;
#else
            Application.Quit();
#endif
        }

        GUILayout.FlexibleSpace();
        GUILayout.EndVertical();
        GUILayout.EndArea();
    }

    // Called when Start is pressed: clear/hide the intro overlay.
private void OnStartGame()
{
        // Generate the selected grid map and frame the camera before hiding the menu.
        int idx = Mathf.Clamp(selectedMapIndex, 0, mapSizes.Length - 1);
        int size = mapSizes[idx];
        WorldBootstrap.GenerateDefaultGrid(size, size, 1f);

        // Spawn test pawns
        PawnBootstrap.SpawnSpritePawn();
        PawnBootstrap.SpawnSecondPawn();

        // Reset the game clock to Day 1 at the configured start time.
        var clock = GameClockAPI.Find();
        if (clock != null) clock.ResetClock(1, 8, 0);

        // Reset the calendar to Year 1, Day 1.
        var cal = GameCalendarAPI.Find();
        if (cal != null) cal.ResetCalendar(1, 1);

        showMenu = false;
        IsVisible = false;
    }
}



// ===== FILE: Assets/Scripts/UI/SelectionHUD.cs =====
using UnityEngine;

/// <summary>
/// Bottom-left info panel (blank for now) and a right-side gizmo strip.
/// Appears only when a pawn is selected. First gizmo: Assume Control / Release.
/// </summary>
[AddComponentMenu("UI/Selection HUD")]
public class SelectionHUD : MonoBehaviour
{
    [Header("Layout")]
    [SerializeField] private Vector2 panelMinMaxW = new Vector2(260f, 420f);
    [SerializeField] private Vector2 panelMinMaxH = new Vector2(130f, 220f);
    [SerializeField] private float panelWidthPct = 0.28f; // of screen width
    [SerializeField] private float panelHeightPct = 0.22f; // of screen height
    [SerializeField] private float margin = 12f;
    [SerializeField] private float gizmoSpacing = 8f;
    [SerializeField] private float buttonHeightPct = 0.055f; // of screen height

    private GUIStyle _panelStyle;
    private GUIStyle _headerStyle;
    private GUIStyle _buttonStyle;
    private GUIStyle _labelStyle;

    // Expose last-drawn HUD rects in SCREEN (bottom-left origin) space so SelectionController can ignore clicks over HUD.
    public static Rect LastPanelRectBL { get; private set; }
    public static Rect LastGizmoRectBL { get; private set; }

    private void OnGUI()
    {
        var selected = SelectionController.Selected;
        if (selected == null)
        {
            LastPanelRectBL = Rect.zero;
            LastGizmoRectBL = Rect.zero;
            return;
        }

        float sw = Screen.width;
        float sh = Screen.height;

        // Sizing
        float panelW = Mathf.Clamp(sw * panelWidthPct, panelMinMaxW.x, panelMinMaxW.y);
        float panelH = Mathf.Clamp(sh * panelHeightPct, panelMinMaxH.x, panelMinMaxH.y);
        float btnH = Mathf.Max(28f, sh * buttonHeightPct);

        // Panel rect (bottom-left anchor)
        var panelRectGUI = new Rect(margin, sh - panelH - margin, panelW, panelH);

        // Gizmo strip to the right of the panel
        var gizmoRectGUI = new Rect(panelRectGUI.xMax + gizmoSpacing, panelRectGUI.y, Mathf.Max(160f, sw * 0.15f), panelRectGUI.height);

        EnsureStyles(sh);

        // Update BL-space rects for input guarding
        LastPanelRectBL = new Rect(panelRectGUI.xMin, sh - (panelRectGUI.yMin + panelRectGUI.height), panelRectGUI.width, panelRectGUI.height);
        LastGizmoRectBL = new Rect(gizmoRectGUI.xMin, sh - (gizmoRectGUI.yMin + gizmoRectGUI.height), gizmoRectGUI.width, gizmoRectGUI.height);

        // Draw panel (blank content for now; just a header for visual structure)
        GUILayout.BeginArea(panelRectGUI, GUIContent.none, _panelStyle);
        {
            GUILayout.Label("Unit Info", _headerStyle);
            GUILayout.Space(btnH * 0.2f);
            // Blank content placeholder
            GUILayout.Label("(Coming soon)", _labelStyle);
            GUILayout.FlexibleSpace();
        }
        GUILayout.EndArea();

        // Gizmos
        GUILayout.BeginArea(gizmoRectGUI);
        {
            // Assume/Release Control
            bool isControlled = (ControlManager.Controlled == selected);
            string btn = isControlled ? "Release Control" : "Assume Control";
            if (GUILayout.Button(btn, _buttonStyle, GUILayout.Height(btnH)))
            {
                if (isControlled) ControlManager.ReleaseControl();
                else ControlManager.AssumeControl(selected);
            }
            // Keep selection pinned to controlled pawn even if HUD was clicked first
            if (ControlManager.Controlled != null && SelectionController.Selected != ControlManager.Controlled)
            {
                SelectionController.SelectOnly(ControlManager.Controlled);
            }

            GUILayout.Space(btnH * 0.25f);
            GUILayout.Label("Tip: WASD/Arrows to move when controlled.\nSpace = Pause. 1/2/3 = Speed.", _labelStyle);
        }
        GUILayout.EndArea();
    }

    void EnsureStyles(float sh)
    {
        if (_panelStyle == null)
        {
            _panelStyle = new GUIStyle(GUI.skin.box)
            {
                padding = new RectOffset(12, 12, 10, 10)
            };
        }
        if (_headerStyle == null)
        {
            _headerStyle = new GUIStyle(GUI.skin.label)
            {
                alignment = TextAnchor.MiddleLeft,
                fontSize = Mathf.Max(14, Mathf.RoundToInt(sh * 0.028f)),
                fontStyle = FontStyle.Bold
            };
        }
        if (_buttonStyle == null)
        {
            _buttonStyle = new GUIStyle(GUI.skin.button)
            {
                fontSize = Mathf.Max(12, Mathf.RoundToInt(sh * 0.024f))
            };
        }
        if (_labelStyle == null)
        {
            _labelStyle = new GUIStyle(GUI.skin.label)
            {
                fontSize = Mathf.Max(11, Mathf.RoundToInt(sh * 0.02f)),
                wordWrap = true
            };
        }
    }
}



// ===== FILE: Assets/Scripts/Units/SpritePawn.cs =====
using System.Collections.Generic;
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
#endif

/// <summary>
/// SNES-style pawn that idly wanders around. Generates its own sprite and
/// supports simple chat interactions with other pawns.
/// </summary>
[AddComponentMenu("Units/Sprite Pawn (Test)")]
public class SpritePawn : MonoBehaviour
{
    // Registry used by selection and interaction systems
    public static readonly HashSet<SpritePawn> Instances = new HashSet<SpritePawn>();

    [Header("Sprite")]
    [SerializeField] private int spriteWidthPx = 16;
    [SerializeField] private int spriteHeightPx = 24;
    [SerializeField] private int pixelsPerUnit = 16;

    [Header("Palette")]
    [SerializeField] private Color body = new Color(0.82f, 0.80f, 0.65f, 1f);
    [SerializeField] private Color shade = new Color(0.62f, 0.60f, 0.48f, 1f);
    [SerializeField] private Color accent = new Color(0.35f, 0.42f, 0.65f, 1f);
    [SerializeField] private Color outline = new Color(0.10f, 0.10f, 0.10f, 1f);

    [Header("Selection Visual")]
    [SerializeField] private Color ringColor = new Color(1f, 0.92f, 0.25f, 1f);

    [Header("Movement")]
    [SerializeField] private float speed = 3f;
    [SerializeField] private float margin = 1.25f;

    [Header("Detection & Timing")]
    [SerializeField] private float collisionRadius = -1f; // <=0 => auto from sprite width
    [SerializeField] private float interactionCooldown = 2f;
    [SerializeField] private Vector2 chatDurationRange = new Vector2(2.5f, 4f);

    [Header("Chat Formation")]
    [SerializeField] private float chatLateral = 0.8f;           // side-by-side offset
    [SerializeField] private float chatApproachSmoothing = 8f;   // follower slot smoothing

    [Header("Idle Wander")]
    [SerializeField] private float wanderArriveRadius = 0.12f;
    [SerializeField] private float wanderPickMargin = 1f;
    [SerializeField] private float wanderMinWait = 0.4f;
    [SerializeField] private float wanderMaxWait = 1.2f;
    [SerializeField] private float wanderRepickSeconds = 6f;

    [Header("Manual Control")]
    [SerializeField] private float manualAccel = 20f;
    [SerializeField] private float manualDecel = 30f;
    private Vector2 manualInput;
    private Vector3 manualVel;

    // Public status used by manager
    public bool IsControlled => isControlled;
    // Allow controlled pawns to participate in interactions (as leaders); manager enforces follower rule.
    public bool IsInteractable => interactionState == InteractionState.None && Time.unscaledTime >= cooldownUntilUnscaled;
    public float CollisionRadius => (collisionRadius > 0f ? collisionRadius : Mathf.Max(0.2f, (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit) * 0.6f));
    [Header("Sprint")]
    [SerializeField] private float sprintMultiplier = 1.6f;
    private bool isSprinting;
    public bool IsSprinting => isSprinting && isControlled;

    // Internal state
    private Camera cam;
    private GameObject quadGO; private Material mat;
    private GameObject ringGO; private Material ringMat;
    private bool isControlled, isSelected;
    private Vector3 logicalPos;
    private Vector3 lastWorldPos, lastVelocity;

    // Wander
    private Vector3 wanderTarget;
    private bool hasWanderTarget;
    private float nextWanderPickUnscaled;
    private float wanderTargetSetUnscaled;
    private SimpleGridMap gridCache;

    // Interaction
    private enum InteractionState { None, ChatLeader, ChatFollower, ReturnToPoint }
    private InteractionState interactionState = InteractionState.None;
    private SpritePawn chatPartner;
    private float chatUntilUnscaled;
    private int chatSide = 1; // +1 right, -1 left relative to leader forward
    private float cooldownUntilUnscaled;
    private Vector3 returnPoint;

#if ENABLE_INPUT_SYSTEM
    private InputAction _moveAction;
#endif

    private void Awake()
    {
        cam = Camera.main;
        if (cam == null)
        {
#if UNITY_2022_2_OR_NEWER
            cam = UnityEngine.Object.FindAnyObjectByType<Camera>();
#else
            cam = UnityEngine.Object.FindObjectOfType<Camera>();
#endif
        }

        CreateVisual();
        EnsureCollider();
        CreateSelectionRing();

        logicalPos = transform.position;
        if (gridCache == null)
        {
#if UNITY_2022_2_OR_NEWER
            gridCache = UnityEngine.Object.FindAnyObjectByType<SimpleGridMap>();
#else
            gridCache = UnityEngine.Object.FindObjectOfType<SimpleGridMap>();
#endif
        }
        if (gridCache != null)
        {
            float w = gridCache.width * gridCache.tileSize;
            float h = gridCache.height * gridCache.tileSize;
            logicalPos = new Vector3(w * 0.5f, 0.02f, h * 0.5f);
        }
        else if (cam != null)
        {
            var b = PixelCameraHelper.OrthoWorldBounds(cam);
            logicalPos = new Vector3((b.minX + b.maxX) * 0.5f, 0.02f, (b.minZ + b.maxZ) * 0.5f);
        }
        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
        PickNewWanderTarget(true);
        FinalizeTransform();
    }

    private void OnEnable()
    {
        Instances.Add(this);
#if ENABLE_INPUT_SYSTEM
        if (_moveAction == null)
        {
            _moveAction = new InputAction("PawnMove", type: InputActionType.Value, binding: "2DVector");
            _moveAction.AddCompositeBinding("2DVector")
                .With("Up", "<Keyboard>/w").With("Up", "<Keyboard>/upArrow")
                .With("Down", "<Keyboard>/s").With("Down", "<Keyboard>/downArrow")
                .With("Left", "<Keyboard>/a").With("Left", "<Keyboard>/leftArrow")
                .With("Right", "<Keyboard>/d").With("Right", "<Keyboard>/rightArrow");
            _moveAction.AddBinding("<Gamepad>/leftStick");
        }
        _moveAction.Enable();
#endif
    }

    private void OnDisable()
    {
        Instances.Remove(this);
#if ENABLE_INPUT_SYSTEM
        _moveAction?.Disable();
#endif
    }

    private void Update()
    {
        if (isControlled && interactionState != InteractionState.None)
            EndInteraction();

        if (interactionState == InteractionState.ChatFollower && chatPartner != null)
        {
            UpdateChatFollower();
            FinalizeTransform();
            return;
        }
        if (interactionState == InteractionState.ReturnToPoint)
        {
            UpdateReturnToPoint();
            FinalizeTransform();
            return;
        }

        // Manual control overrides wandering
        if (isControlled)
        {
            UpdateManualControl();
            FinalizeTransform();
            return;
        }

        // Default idle wandering movement
        UpdateIdleWander();

        // Leader state: allow normal movement while timer runs
        if (interactionState == InteractionState.ChatLeader && Time.unscaledTime >= chatUntilUnscaled)
        {
            EndInteraction();
        }

        FinalizeTransform();
    }

    // ---------------- Manual control ----------------
    private void UpdateManualControl()
    {
        // Toggle sprint with Shift (works on both input systems)
#if ENABLE_INPUT_SYSTEM
        if (Keyboard.current != null &&
            (Keyboard.current.leftShiftKey.wasPressedThisFrame || Keyboard.current.rightShiftKey.wasPressedThisFrame))
        {
            isSprinting = !isSprinting;
        }
#else
        if (Input.GetKeyDown(KeyCode.LeftShift) || Input.GetKeyDown(KeyCode.RightShift)) isSprinting = !isSprinting;
#endif

        Vector2 input = ReadMoveInput();
        if (input.sqrMagnitude > 1f) input.Normalize();

        // target velocity in world XZ plane at "speed"
        float mult = isSprinting ? sprintMultiplier : 1f;
        Vector3 targetVel = new Vector3(input.x, 0f, input.y) * speed * mult;

        // accelerate/decelerate toward target
        Vector3 delta = targetVel - manualVel;
        float accel = (targetVel.sqrMagnitude > manualVel.sqrMagnitude) ? manualAccel : manualDecel;
        Vector3 change = Vector3.ClampMagnitude(delta, accel * Time.deltaTime);
        manualVel += change;

        // move
        logicalPos += manualVel * Time.deltaTime;

        // clamp to grid if available
        if (gridCache == null)
        {
#if UNITY_2022_2_OR_NEWER
            gridCache = UnityEngine.Object.FindAnyObjectByType<SimpleGridMap>();
#else
            gridCache = UnityEngine.Object.FindObjectOfType<SimpleGridMap>();
#endif
        }
        if (gridCache != null)
        {
            float minX = margin, minZ = margin;
            float maxX = gridCache.width * gridCache.tileSize - margin;
            float maxZ = gridCache.height * gridCache.tileSize - margin;
            logicalPos.x = Mathf.Clamp(logicalPos.x, minX, maxX);
            logicalPos.z = Mathf.Clamp(logicalPos.z, minZ, maxZ);
        }

        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
    }

    // --------------------------------------------------
    // Idle wandering
    // --------------------------------------------------
    private void UpdateIdleWander()
    {
        if (!hasWanderTarget || Time.unscaledTime >= nextWanderPickUnscaled ||
            (Time.unscaledTime - wanderTargetSetUnscaled) > wanderRepickSeconds ||
            Vector3.SqrMagnitude(new Vector3(wanderTarget.x - logicalPos.x, 0f, wanderTarget.z - logicalPos.z)) <= wanderArriveRadius * wanderArriveRadius)
        {
            PickNewWanderTarget(false);
        }

        Vector3 to = new Vector3(wanderTarget.x - logicalPos.x, 0f, wanderTarget.z - logicalPos.z);
        float dist = to.magnitude;
        if (dist > 1e-4f)
        {
            Vector3 dir = to / dist;
            float step = Mathf.Min(speed * Time.deltaTime, dist);
            logicalPos += dir * step;
        }
        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
    }

    private void PickNewWanderTarget(bool first)
    {
        if (gridCache == null)
        {
#if UNITY_2022_2_OR_NEWER
            gridCache = UnityEngine.Object.FindAnyObjectByType<SimpleGridMap>();
#else
            gridCache = UnityEngine.Object.FindObjectOfType<SimpleGridMap>();
#endif
        }

        float minX, maxX, minZ, maxZ;
        if (gridCache != null)
        {
            minX = margin + wanderPickMargin;
            minZ = margin + wanderPickMargin;
            maxX = gridCache.width * gridCache.tileSize - (margin + wanderPickMargin);
            maxZ = gridCache.height * gridCache.tileSize - (margin + wanderPickMargin);
        }
        else if (cam != null)
        {
            var b = PixelCameraHelper.OrthoWorldBounds(cam);
            minX = b.minX + (margin + wanderPickMargin);
            maxX = b.maxX - (margin + wanderPickMargin);
            minZ = b.minZ + (margin + wanderPickMargin);
            maxZ = b.maxZ - (margin + wanderPickMargin);
        }
        else
        {
            minX = -5f; maxX = 5f; minZ = -5f; maxZ = 5f;
        }

        if (minX > maxX) { float c = (minX + maxX) * 0.5f; minX = maxX = c; }
        if (minZ > maxZ) { float c = (minZ + maxZ) * 0.5f; minZ = maxZ = c; }

        float x = Random.Range(minX, maxX);
        float z = Random.Range(minZ, maxZ);
        wanderTarget = new Vector3(x, 0.02f, z);
        hasWanderTarget = true;
        wanderTargetSetUnscaled = Time.unscaledTime;
        float wait = first ? 0f : Random.Range(wanderMinWait, wanderMaxWait);
        nextWanderPickUnscaled = Time.unscaledTime + wait;
    }

    // --------------------------------------------------
    // Interaction API & behaviour
    // --------------------------------------------------
    public void BeginChatLeader(SpritePawn follower, float seconds, Vector3 collisionPoint)
    {
        interactionState = InteractionState.ChatLeader;
        chatPartner = follower;
        chatUntilUnscaled = Time.unscaledTime + Mathf.Clamp(seconds, chatDurationRange.x, chatDurationRange.y);
    }

    public void BeginChatFollower(SpritePawn leader, float seconds, Vector3 collisionPoint)
    {
        if (isControlled) return; // cannot be follower if controlled
        interactionState = InteractionState.ChatFollower;
        chatPartner = leader;
        chatUntilUnscaled = Time.unscaledTime + Mathf.Clamp(seconds, chatDurationRange.x, chatDurationRange.y);
        chatSide = Random.value < 0.5f ? -1 : +1;
        returnPoint = collisionPoint;
    }

    private void EndInteraction()
    {
        interactionState = InteractionState.None;
        chatPartner = null;
        cooldownUntilUnscaled = Time.unscaledTime + interactionCooldown;
    }

    private void UpdateChatFollower()
    {
        if (chatPartner == null)
        {
            EndInteraction();
            return;
        }

        Vector3 lp = chatPartner.transform.position;
        Vector3 fwd = chatPartner.lastVelocity.sqrMagnitude > 1e-6f
            ? chatPartner.lastVelocity.normalized
            : new Vector3(1f, 0f, 0f);
        Vector3 right = Vector3.Cross(Vector3.up, fwd).normalized;
        Vector3 slot = lp + right * (chatSide * chatLateral);

        Vector3 to = new Vector3(slot.x - logicalPos.x, 0f, slot.z - logicalPos.z);
        float dist = to.magnitude;
        if (dist > 1e-4f)
        {
            Vector3 dir = to / dist;
            float approach = Mathf.Min(speed, dist * chatApproachSmoothing) * Time.deltaTime;
            logicalPos += dir * approach;
        }
        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);

        if (Time.unscaledTime >= chatUntilUnscaled)
        {
            interactionState = InteractionState.ReturnToPoint;
            chatPartner = null;
        }
    }

    private void UpdateReturnToPoint()
    {
        Vector3 to = new Vector3(returnPoint.x - logicalPos.x, 0f, returnPoint.z - logicalPos.z);
        float dist = to.magnitude;
        float upp = cam != null ? PixelCameraHelper.WorldUnitsPerPixel(cam) : 0.01f;
        float arriveEps = Mathf.Max(upp, 0.05f);
        if (dist <= arriveEps)
        {
            logicalPos = new Vector3(returnPoint.x, 0.02f, returnPoint.z);
            transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
            interactionState = InteractionState.None;
            cooldownUntilUnscaled = Time.unscaledTime + interactionCooldown;
            hasWanderTarget = false;
            PickNewWanderTarget(false);
            return;
        }
        if (dist > 1e-4f)
        {
            Vector3 dir = to / dist;
            float step = Mathf.Min(speed * Time.deltaTime, dist);
            logicalPos += dir * step;
        }
        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
    }

    // --------------------------------------------------
    // Visual helpers
    // --------------------------------------------------
    private void FinalizeTransform()
    {
        Vector3 wp = transform.position;
        lastVelocity = (Time.deltaTime > 1e-6f) ? (wp - lastWorldPos) / Time.deltaTime : lastVelocity;
        lastVelocity.y = 0f;
        lastWorldPos = wp;
    }

    private Vector2 ReadMoveInput()
    {
#if ENABLE_INPUT_SYSTEM
        if (_moveAction != null) return _moveAction.ReadValue<Vector2>();
        return Vector2.zero;
#else
        float x = 0f, y = 0f;
        if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow)) x -= 1f;
        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow)) x += 1f;
        if (Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.DownArrow)) y -= 1f;
        if (Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.UpArrow)) y += 1f;
        return new Vector2(x, y);
#endif
    }

    private void CreateVisual()
    {
        int W = Mathf.Max(8, spriteWidthPx);
        int H = Mathf.Max(8, spriteHeightPx);
        var tex = new Texture2D(W, H, TextureFormat.RGBA32, false);
        tex.filterMode = FilterMode.Point;
        tex.wrapMode = TextureWrapMode.Clamp;

        var px = new Color32[W * H];
        Color32 cBody = body; Color32 cShade = shade; Color32 cOut = outline; Color32 cAcc = accent;
        for (int y = 0; y < H; y++)
        {
            for (int x = 0; x < W; x++)
            {
                bool border = (x == 0 || y == 0 || x == W - 1 || y == H - 1);
                Color32 c = border ? cOut : (y > H * 0.65f ? cShade : cBody);
                if (!border && y == (int)(H * 0.45f) && x > W * 0.2f && x < W * 0.8f) c = cAcc;
                px[y * W + x] = c;
            }
        }
        tex.SetPixels32(px); tex.Apply(false, false);

        var shader = Shader.Find("Unlit/Transparent") ?? Shader.Find("Sprites/Default") ?? Shader.Find("Unlit/Texture");
        mat = new Material(shader);
        if (mat.HasProperty("_BaseMap")) mat.SetTexture("_BaseMap", tex);
        if (mat.HasProperty("_MainTex")) mat.SetTexture("_MainTex", tex);
        if (mat.HasProperty("_Color")) mat.SetColor("_Color", Color.white);
        if (mat.HasProperty("_BaseColor")) mat.SetColor("_BaseColor", Color.white);

        quadGO = GameObject.CreatePrimitive(PrimitiveType.Quad);
        quadGO.name = "SpriteQuad";
        quadGO.transform.SetParent(transform, false);
        quadGO.transform.localRotation = Quaternion.Euler(90f, 0f, 0f);
        float worldW = (float)W / Mathf.Max(1, pixelsPerUnit);
        float worldH = (float)H / Mathf.Max(1, pixelsPerUnit);
        quadGO.transform.localScale = new Vector3(worldW, worldH, 1f);
        var r = quadGO.GetComponent<MeshRenderer>(); r.sharedMaterial = mat;
        var ccol = quadGO.GetComponent<Collider>(); if (ccol) Destroy(ccol);
    }

    private void EnsureCollider()
    {
        var col = gameObject.GetComponent<BoxCollider>();
        if (col == null) col = gameObject.AddComponent<BoxCollider>();
        float worldW = (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit);
        float worldH = (float)spriteHeightPx / Mathf.Max(1, pixelsPerUnit);
        col.center = new Vector3(0f, 0.05f, 0f);
        col.size = new Vector3(worldW, 0.1f, worldH);
        col.isTrigger = false;
    }

    private void CreateSelectionRing()
    {
        const int S = 64;
        var tex = new Texture2D(S, S, TextureFormat.RGBA32, false);
        tex.filterMode = FilterMode.Point;
        tex.wrapMode = TextureWrapMode.Clamp;
        var px = new Color32[S * S];
        for (int i = 0; i < px.Length; i++) px[i] = new Color32(0, 0, 0, 0);
        float cx = (S - 1) * 0.5f, cy = (S - 1) * 0.5f;
        float rOuter = S * 0.48f;
        float rInner = S * 0.32f;
        for (int y = 0; y < S; y++)
            for (int x = 0; x < S; x++)
            {
                float dx = x - cx, dy = y - cy;
                float d = Mathf.Sqrt(dx * dx + dy * dy);
                if (d <= rOuter && d >= rInner) px[y * S + x] = ringColor;
            }
        tex.SetPixels32(px); tex.Apply(false, false);

        var shader = Shader.Find("Unlit/Transparent") ?? Shader.Find("Sprites/Default") ?? Shader.Find("Unlit/Texture");
        ringMat = new Material(shader);
        if (ringMat.HasProperty("_BaseMap")) ringMat.SetTexture("_BaseMap", tex);
        if (ringMat.HasProperty("_MainTex")) ringMat.SetTexture("_MainTex", tex);
        if (ringMat.HasProperty("_Color")) ringMat.SetColor("_Color", Color.white);
        if (ringMat.HasProperty("_BaseColor")) ringMat.SetColor("_BaseColor", Color.white);
        ringMat.renderQueue = 3000;

        ringGO = GameObject.CreatePrimitive(PrimitiveType.Quad);
        ringGO.name = "SelectionRing";
        ringGO.transform.SetParent(transform, false);
        ringGO.transform.localRotation = Quaternion.Euler(90f, 0f, 0f);
        ringGO.transform.localPosition = new Vector3(0f, 0.025f, 0f);
        float worldW = (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit);
        float scale = worldW * 1.6f;
        ringGO.transform.localScale = new Vector3(scale, scale, 1f);
        var rr = ringGO.GetComponent<MeshRenderer>(); rr.sharedMaterial = ringMat;
        var rc = ringGO.GetComponent<Collider>(); if (rc) Destroy(rc);
        ringGO.SetActive(false);
    }

    // --------------------------------------------------
    // Selection / control visuals
    // --------------------------------------------------
    public void SetControlled(bool on)
    {
        isControlled = on;
        // If we release control, clear sprint state so next time starts normal
        if (!on) { isSprinting = false; manualVel = Vector3.zero; }
        // Visual cue: brighten ring when controlled
        if (ringGO != null && ringMat != null)
        {
            float worldW = (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit);
            float scale = worldW * (on ? 1.9f : 1.6f);
            ringGO.transform.localScale = new Vector3(scale, scale, 1f);

            var col = ringColor;
            if (on) col = Color.Lerp(ringColor, Color.white, 0.3f);
            if (ringMat.HasProperty("_Color")) ringMat.SetColor("_Color", col);
            if (ringMat.HasProperty("_BaseColor")) ringMat.SetColor("_BaseColor", col);
        }
        if (on && interactionState != InteractionState.None)
            EndInteraction();
        // If we just started sprinting pre-control, ensure interactions won't linger
        if (isControlled && isSprinting && interactionState != InteractionState.None)
            EndInteraction();
        if (ringGO != null) ringGO.SetActive(on || isSelected);
    }

    public void SetSelected(bool on)
    {
        isSelected = on;
        if (ringGO != null) ringGO.SetActive(on || isControlled);
    }
}


// ===== FILE: Assets/Scripts/World/Building.cs =====
using UnityEngine;

/// <summary>
/// Base component for placeable buildings.
/// </summary>
public class Building : MonoBehaviour
{
    public string id = "building";
    public string displayName = "Building";
    public bool uniquePerMap = false;
    public Vector2Int size = Vector2Int.one; // tiles wide (X) / deep (Z)

    [Header("Runtime")]
    [SerializeField] protected Vector2Int gridPos; // bottom-left tile of footprint
    [SerializeField] protected float tileSize = 1f;

    public Vector2Int GridPos => gridPos;

    public virtual void OnPlaced(Vector2Int grid, float tile)
    {
        gridPos = grid;
        tileSize = tile;

        // Add/adjust a 3D collider that sits on the XZ plane
        var col3 = GetComponent<BoxCollider>();
        if (col3 == null) col3 = gameObject.AddComponent<BoxCollider>();
        float w = size.x * tileSize;
        float d = size.y * tileSize;
        col3.size = new Vector3(w, 0.1f, d);
        col3.center = new Vector3(w * 0.5f, 0.05f, d * 0.5f);
    }

    public virtual void OnRemoved() { }

    public bool Occupies(Vector2Int tile)
    {
        return tile.x >= gridPos.x && tile.x < gridPos.x + size.x && tile.y >= gridPos.y && tile.y < gridPos.y + size.y;
    }
}


// ===== FILE: Assets/Scripts/World/Buildings/ConstructionBoard.cs =====
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// One-per-map station that offers the Builder job via slots.
/// Footprint: 3x1 tiles (horizontal), anchored at bottom-left.
/// </summary>
public class ConstructionBoard : Building
{
    [SerializeField, Min(0)] private int builderSlots = 1;
    private bool _showInspector;

    private void Start()
    {
        id = "construction_board";
        displayName = string.IsNullOrEmpty(displayName) ? "Construction Board" : displayName;
        uniquePerMap = true;
        size = new Vector2Int(3, 1);
    }

    private void OnMouseUpAsButton()
    {
        _showInspector = !_showInspector;
    }

    public override void OnPlaced(Vector2Int grid, float tile)
    {
        base.OnPlaced(grid, tile);
        JobService js;
#if UNITY_2023_1_OR_NEWER
        js = UnityEngine.Object.FindFirstObjectByType<JobService>();
#else
        js = FindObjectOfType<JobService>();
#endif
        if (js != null)
        {
            js.SetSlots(this, JobType.Builder, builderSlots);
        }

        // Visual now handled by SpriteVisualFactory2D from the placement tool.
        // Keep logic & collider only.
    }

    /*private int DetectGridLayer()
    {
        // Try to find the grid's renderer & inherit its layer
        var grid = FindAnyGridRenderer();
        if (grid != null) return grid.gameObject.layer;
        return 0; // Default
    }

    private static Renderer FindAnyGridRenderer()
    {
        var grid = Object.FindAnyObjectByType<Component>();
        // Try a few common names first
        var go = GameObject.Find("Grid");
        if (go != null)
        {
            var r = go.GetComponentInChildren<Renderer>();
            if (r != null) return r;
        }
        // Fallback: find any renderer tagged as ground or in root
        foreach (var r in Object.FindObjectsByType<Renderer>(FindObjectsSortMode.None))
        {
            if (r.gameObject.name.ToLower().Contains("grid") || r.gameObject.name.ToLower().Contains("ground")) return r;
        }
        return null;
    }*/

    private void OnGUI()
    {
        if (!_showInspector) return;

        JobService js;
#if UNITY_2023_1_OR_NEWER
        js = UnityEngine.Object.FindFirstObjectByType<JobService>();
#else
        js = FindObjectOfType<JobService>();
#endif
        if (js == null) return;

        Rect r = new Rect(20f, Screen.height * 0.6f, Mathf.Max(260f, Screen.width * 0.22f), Screen.height * 0.35f);
        GUILayout.BeginArea(r, displayName, GUI.skin.window);

        GUILayout.Label("Builder job", GUI.skin.label);
        GUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(32f)))
        {
            builderSlots = Mathf.Max(0, builderSlots - 1);
            js.SetSlots(this, JobType.Builder, builderSlots);
        }
        GUILayout.Label($"Slots: {builderSlots}", GUILayout.Width(120f));
        if (GUILayout.Button("+", GUILayout.Width(32f)))
        {
            builderSlots = Mathf.Min(99, builderSlots + 1);
            js.SetSlots(this, JobType.Builder, builderSlots);
        }
        GUILayout.EndHorizontal();

        GUILayout.Space(6f);
        var assigned = js.AssignedFor(this, JobType.Builder);
        GUILayout.Label($"Assigned ({assigned.Count})");
        int show = Mathf.Min(assigned.Count, 5);
        for (int i = 0; i < show; i++)
        {
            GUILayout.Label($"- {assigned[i].name}");
        }
        if (assigned.Count > show)
        {
            GUILayout.Label($"...and {assigned.Count - show} more");
        }

        GUILayout.FlexibleSpace();
        if (GUILayout.Button("Close")) _showInspector = false;
        GUILayout.EndArea();
    }
}


// ===== FILE: Assets/Scripts/World/SimpleGridMap.cs =====
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Procedurally builds a flat checkerboard grid as a single mesh with two submeshes (A/B colors).
/// Keeps dependencies minimal and works without any art assets.
/// </summary>
[AddComponentMenu("World/Simple Grid Map")]
public class SimpleGridMap : MonoBehaviour
{
    [Header("Size")]
    [Min(1)] public int width = 32;
    [Min(1)] public int height = 32;
    [Min(0.1f)] public float tileSize = 1f;

    [Header("Palette")]
    public Color colorA = new Color(0.42f, 0.48f, 0.33f); // muted grass
    public Color colorB = new Color(0.36f, 0.42f, 0.28f); // darker tile

    MeshFilter _filter;
    MeshRenderer _renderer;

    /// <summary>Rebuilds using serialized dimensions.</summary>
    public void Build()
    {
        Build(width, height, tileSize, colorA, colorB);
    }

    /// <summary>Build grid with explicit parameters.</summary>
    public void Build(int w, int h, float size, Color a, Color b)
    {
        width = Mathf.Max(1, w);
        height = Mathf.Max(1, h);
        tileSize = Mathf.Max(0.1f, size);
        colorA = a;
        colorB = b;

        EnsureComponents();
        var mesh = GenerateMesh(width, height, tileSize);
        _filter.sharedMesh = mesh;

        // Two materials for the two submeshes
        var matA = CreateMaterial();
        var matB = CreateMaterial();
        SetMaterialColor(matA, colorA);
        SetMaterialColor(matB, colorB);
        _renderer.sharedMaterials = new[] { matA, matB };
    }

    void EnsureComponents()
    {
        if (_filter == null)
            _filter = gameObject.GetComponent<MeshFilter>() ?? gameObject.AddComponent<MeshFilter>();
        if (_renderer == null)
            _renderer = gameObject.GetComponent<MeshRenderer>() ?? gameObject.AddComponent<MeshRenderer>();
    }

    Mesh GenerateMesh(int w, int h, float t)
    {
        int tiles = w * h;
        int vCount = tiles * 4;

        var verts = new Vector3[vCount];
        var uvs = new Vector2[vCount];
        var norms = new Vector3[vCount];

        // Two submeshes for checkerboard coloring
        var trisA = new List<int>(tiles * 6 / 2 + 6);
        var trisB = new List<int>(tiles * 6 / 2 + 6);

        int vi = 0;
        for (int y = 0; y < h; y++)
        {
            for (int x = 0; x < w; x++)
            {
                float x0 = x * t;
                float x1 = (x + 1) * t;
                float z0 = y * t;
                float z1 = (y + 1) * t;

                //  v2---v3
                //  |  / |
                //  v0---v1
                int v0 = vi + 0;
                int v1 = vi + 1;
                int v2 = vi + 2;
                int v3 = vi + 3;

                verts[v0] = new Vector3(x0, 0f, z0);
                verts[v1] = new Vector3(x1, 0f, z0);
                verts[v2] = new Vector3(x0, 0f, z1);
                verts[v3] = new Vector3(x1, 0f, z1);

                uvs[v0] = new Vector2(0f, 0f);
                uvs[v1] = new Vector2(1f, 0f);
                uvs[v2] = new Vector2(0f, 1f);
                uvs[v3] = new Vector2(1f, 1f);

                norms[v0] = Vector3.up;
                norms[v1] = Vector3.up;
                norms[v2] = Vector3.up;
                norms[v3] = Vector3.up;

                // Triangles (front face up)
                // v0, v1, v2 and v2, v1, v3 (clockwise when viewed from above)
                var which = ((x + y) & 1) == 0 ? trisA : trisB;
                which.Add(v0); which.Add(v1); which.Add(v2);
                which.Add(v2); which.Add(v1); which.Add(v3);

                vi += 4;
            }
        }

        var mesh = new Mesh();
#if UNITY_2017_3_OR_NEWER
        if (vCount > 65000) mesh.indexFormat = UnityEngine.Rendering.IndexFormat.UInt32;
#endif
        mesh.name = "SimpleGridMap";
        mesh.vertices = verts;
        mesh.uv = uvs;
        mesh.normals = norms;
        mesh.subMeshCount = 2;
        mesh.SetTriangles(trisA, 0, true);
        mesh.SetTriangles(trisB, 1, true);
        mesh.RecalculateBounds();
        return mesh;
    }

    static Material CreateMaterial()
    {
        Shader shader = FindFirstShader(
#if UNITY_2021_2_OR_NEWER
            "Universal Render Pipeline/Unlit",
#endif
            "Unlit/Color",
            "HDRP/Unlit",
            "Sprites/Default",
            "Standard"
        );
        var mat = new Material(shader);
        // Make it a bit less shiny if Standard is used
        if (mat.HasProperty("_Glossiness")) mat.SetFloat("_Glossiness", 0f);
        if (mat.HasProperty("_Metallic")) mat.SetFloat("_Metallic", 0f);
        return mat;
    }

    static Shader FindFirstShader(params string[] names)
    {
        foreach (var n in names)
        {
            var s = Shader.Find(n);
            if (s != null) return s;
        }
        // Fallback to any available shader
        return Shader.Find("Standard") ?? Shader.Find("Sprites/Default");
    }

    static void SetMaterialColor(Material m, Color c)
    {
        // Try common color property names across pipelines
        if (m.HasProperty("_BaseColor")) m.SetColor("_BaseColor", c);
        if (m.HasProperty("_Color")) m.SetColor("_Color", c);
        if (m.HasProperty("_TintColor")) m.SetColor("_TintColor", c);
    }
}



// ===== FILE: Assets/TutorialInfo/Scripts/Editor/ReadmeEditor.cs =====
ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System;
using System.IO;
using System.Reflection;

[CustomEditor(typeof(Readme))]
[InitializeOnLoad]
public class ReadmeEditor : Editor
{
    static string s_ShowedReadmeSessionStateName = "ReadmeEditor.showedReadme";
    
    static string s_ReadmeSourceDirectory = "Assets/TutorialInfo";

    const float k_Space = 16f;

    static ReadmeEditor()
    {
        EditorApplication.delayCall += SelectReadmeAutomatically;
    }

    static void RemoveTutorial()
    {
        if (EditorUtility.DisplayDialog("Remove Readme Assets",
            
            $"All contents under {s_ReadmeSourceDirectory} will be removed, are you sure you want to proceed?",
            "Proceed",
            "Cancel"))
        {
            if (Directory.Exists(s_ReadmeSourceDirectory))
            {
                FileUtil.DeleteFileOrDirectory(s_ReadmeSourceDirectory);
                FileUtil.DeleteFileOrDirectory(s_ReadmeSourceDirectory + ".meta");
            }
            else
            {
                Debug.Log($"Could not find the Readme folder at {s_ReadmeSourceDirectory}");
            }

            var readmeAsset = SelectReadme();
            if (readmeAsset != null)
            {
                var path = AssetDatabase.GetAssetPath(readmeAsset);
                FileUtil.DeleteFileOrDirectory(path + ".meta");
                FileUtil.DeleteFileOrDirectory(path);
            }

            AssetDatabase.Refresh();
        }
    }

    static void SelectReadmeAutomatically()
    {
        if (!SessionState.GetBool(s_ShowedReadmeSessionStateName, false))
        {
            var readme = SelectReadme();
            SessionState.SetBool(s_ShowedReadmeSessionStateName, true);

            if (readme && !readme.loadedLayout)
            {
                LoadLayout();
                readme.loadedLayout = true;
            }
        }
    }

    static void LoadLayout()
    {
        var assembly = typeof(EditorApplication).Assembly;
        var windowLayoutType = assembly.GetType("UnityEditor.WindowLayout", true);
        var method = windowLayoutType.GetMethod("LoadWindowLayout", BindingFlags.Public | BindingFlags.Static);
        method.Invoke(null, new object[] { Path.Combine(Application.dataPath, "TutorialInfo/Layout.wlt"), false });
    }

    static Readme SelectReadme()
    {
        var ids = AssetDatabase.FindAssets("Readme t:Readme");
        if (ids.Length == 1)
        {
            var readmeObject = AssetDatabase.LoadMainAssetAtPath(AssetDatabase.GUIDToAssetPath(ids[0]));

            Selection.objects = new UnityEngine.Object[] { readmeObject };

            return (Readme)readmeObject;
        }
        else
        {
            Debug.Log("Couldn't find a readme");
            return null;
        }
    }

    protected override void OnHeaderGUI()
    {
        var readme = (Readme)target;
        Init();

        var iconWidth = Mathf.Min(EditorGUIUtility.currentViewWidth / 3f - 20f, 128f);

        GUILayout.BeginHorizontal("In BigTitle");
        {
            if (readme.icon != null)
            {
                GUILayout.Space(k_Space);
                GUILayout.Label(readme.icon, GUILayout.Width(iconWidth), GUILayout.Height(iconWidth));
            }
            GUILayout.Space(k_Space);
            GUILayout.BeginVertical();
            {

                GUILayout.FlexibleSpace();
                GUILayout.Label(readme.title, TitleStyle);
                GUILayout.FlexibleSpace();
            }
            GUILayout.EndVertical();
            GUILayout.FlexibleSpace();
        }
        GUILayout.EndHorizontal();
    }

    public override void OnInspectorGUI()
    {
        var readme = (Readme)target;
        Init();

        foreach (var section in readme.sections)
        {
            if (!string.IsNullOrEmpty(section.heading))
            {
                GUILayout.Label(section.heading, HeadingStyle);
            }

            if (!string.IsNullOrEmpty(section.text))
            {
                GUILayout.Label(section.text, BodyStyle);
            }

            if (!string.IsNullOrEmpty(section.linkText))
            {
                if (LinkLabel(new GUIContent(section.linkText)))
                {
                    Application.OpenURL(section.url);
                }
            }

            GUILayout.Space(k_Space);
        }

        if (GUILayout.Button("Remove Readme Assets", ButtonStyle))
        {
            RemoveTutorial();
        }
    }

    bool m_Initialized;

    GUIStyle LinkStyle
    {
        get { return m_LinkStyle; }
    }

    [SerializeField]
    GUIStyle m_LinkStyle;

    GUIStyle TitleStyle
    {
        get { return m_TitleStyle; }
    }

    [SerializeField]
    GUIStyle m_TitleStyle;

    GUIStyle HeadingStyle
    {
        get { return m_HeadingStyle; }
    }

    [SerializeField]
    GUIStyle m_HeadingStyle;

    GUIStyle BodyStyle
    {
        get { return m_BodyStyle; }
    }

    [SerializeField]
    GUIStyle m_BodyStyle;

    GUIStyle ButtonStyle
    {
        get { return m_ButtonStyle; }
    }

    [SerializeField]
    GUIStyle m_ButtonStyle;

    void Init()
    {
        if (m_Initialized)
            return;
        m_BodyStyle = new GUIStyle(EditorStyles.label);
        m_BodyStyle.wordWrap = true;
        m_BodyStyle.fontSize = 14;
        m_BodyStyle.richText = true;

        m_TitleStyle = new GUIStyle(m_BodyStyle);
        m_TitleStyle.fontSize = 26;

        m_HeadingStyle = new GUIStyle(m_BodyStyle);
        m_HeadingStyle.fontStyle = FontStyle.Bold;
        m_HeadingStyle.fontSize = 18;

        m_LinkStyle = new GUIStyle(m_BodyStyle);
        m_LinkStyle.wordWrap = false;

        // Match selection color which works nicely for both light and dark skins
        m_LinkStyle.normal.textColor = new Color(0x00 / 255f, 0x78 / 255f, 0xDA / 255f, 1f);
        m_LinkStyle.stretchWidth = false;

        m_ButtonStyle = new GUIStyle(EditorStyles.miniButton);
        m_ButtonStyle.fontStyle = FontStyle.Bold;

        m_Initialized = true;
    }

    bool LinkLabel(GUIContent label, params GUILayoutOption[] options)
    {
        var position = GUILayoutUtility.GetRect(label, LinkStyle, options);

        Handles.BeginGUI();
        Handles.color = LinkStyle.normal.textColor;
        Handles.DrawLine(new Vector3(position.xMin, position.yMax), new Vector3(position.xMax, position.yMax));
        Handles.color = Color.white;
        Handles.EndGUI();

        EditorGUIUtility.AddCursorRect(position, MouseCursor.Link);

        return GUI.Button(position, label, LinkStyle);
    }
}


// ===== FILE: Assets/TutorialInfo/Scripts/Readme.cs =====
ï»¿using System;
using UnityEngine;

public class Readme : ScriptableObject
{
    public Texture2D icon;
    public string title;
    public Section[] sections;
    public bool loadedLayout;

    [Serializable]
    public class Section
    {
        public string heading, text, linkText, url;
    }
}


// ===== FILE: Tools/XmlDefsTools/Emit/SchemaCatalogWriter.cs =====
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml.Linq;
using XmlDefsTools.Scan;
using XmlDefsTools.Util;

namespace XmlDefsTools.Emit
{
    /// <summary>
    /// Writes a consolidated catalog file listing all schemas,
    /// their union of attributes and elements, and a canonical template
    /// sample for each schema.
    /// </summary>
    public static class SchemaCatalogWriter
    {
        public static void Write(string outputDir, ScanResult scan,
            IReadOnlyDictionary<string, IList<string>> orderHints)
        {
            Directory.CreateDirectory(outputDir);
            var outPath = Path.Combine(outputDir, "_AllSchemas.xml");

            var configuredSchemas = orderHints.Keys
                .Where(k => !string.Equals(k, "_common", StringComparison.OrdinalIgnoreCase)
                    && !k.StartsWith("//"))
                .ToHashSet(StringComparer.OrdinalIgnoreCase);
            var allSchemas = new HashSet<string>(scan.Schemas, StringComparer.OrdinalIgnoreCase);
            foreach (var s in configuredSchemas) allSchemas.Add(s);

            var doc = new XDocument(
                new XElement("DefSchemas",
                    new XAttribute("generated",
                        DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ")))
            );

            var common = orderHints.TryGetValue("_common", out var commonOrder)
                ? commonOrder
                : Array.Empty<string>();

            foreach (var schema in allSchemas.OrderBy(s => s, StringComparer.OrdinalIgnoreCase))
            {
                var perSchema = orderHints.TryGetValue(schema, out var per)
                    ? per : Array.Empty<string>();
                var precedence = common.Concat(perSchema).ToList();

                // Collect union of fields from discovered defs
                var attrFields = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
                var elemFields = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
                if (scan.DefsBySchema.TryGetValue(schema, out var defs))
                {
                    foreach (var d in defs)
                    {
                        foreach (var a in d.AttributeFields) attrFields.Add(a);
                        foreach (var e in d.ElementFields) elemFields.Add(e);
                    }
                }

                // Seed with configured fields
                foreach (var hinted in perSchema) elemFields.Add(hinted);

                // Attributes for root + ordered element list
                var rootAttrs = NormalizeOrder(attrFields, precedence,
                    keepOnly: new[] { "id", "schema", "name_key", "tags", "version", "requires" });
                var elementNames = NormalizeOrder(
                    elemFields.Except(rootAttrs, StringComparer.OrdinalIgnoreCase), precedence);

                // Build a canonical template element (same rules as TemplateSynthesizer)
                var root = new XElement(schema);
                foreach (var a in rootAttrs)
                {
                    var placeholder = a.Equals("id", StringComparison.OrdinalIgnoreCase) ? "your_id_here"
                        : a.Equals("name_key", StringComparison.OrdinalIgnoreCase) ? "ui.your.key.here"
                        : a.Equals("tags", StringComparison.OrdinalIgnoreCase) ? string.Empty
                        : a.Equals("version", StringComparison.OrdinalIgnoreCase) ? "1"
                        : string.Empty;
                    root.SetAttributeValue(a, placeholder);
                }

                bool HasElem(string name) =>
                    elementNames.Any(n => n.Equals(name, StringComparison.OrdinalIgnoreCase));
                if (HasElem("version") && root.Attribute("version") == null)
                    root.Add(new XElement("version", "1"));
                if (HasElem("requires") && root.Attribute("requires") == null)
                    root.Add(new XElement("requires"));
                if (HasElem("components") ||
                    perSchema.Contains("components", StringComparer.OrdinalIgnoreCase))
                {
                    root.Add(new XElement("components",
                        new XComment(" Add component entries like <Component type=\"...\"/> ")));
                }
                foreach (var el in elementNames)
                {
                    if (string.Equals(el, "components", StringComparison.OrdinalIgnoreCase))
                        continue;
                    if (string.Equals(el, "version", StringComparison.OrdinalIgnoreCase)
                        && root.Elements("version").Any())
                        continue;
                    if (string.Equals(el, "requires", StringComparison.OrdinalIgnoreCase)
                        && root.Elements("requires").Any())
                        continue;
                    root.Add(new XElement(el));
                }
                var canonicalElement = CanonicalXml.CanonicalizeElement(root);

                // Compose catalog node
                var schemaNode = new XElement("Schema",
                    new XAttribute("name", schema),
                    new XElement("Attributes",
                        rootAttrs.Select(a => new XElement("Attr", new XAttribute("name", a)))),
                    new XElement("Elements",
                        elementNames.Select(e => new XElement("El", new XAttribute("name", e)))),
                    new XElement("Template", canonicalElement));

                doc.Root!.Add(schemaNode);
            }

            doc.Save(outPath);
        }

        private static List<string> NormalizeOrder(IEnumerable<string> names,
            IList<string> precedence, IEnumerable<string>? keepOnly = null)
        {
            var all = new HashSet<string>(names, StringComparer.OrdinalIgnoreCase);
            if (keepOnly != null)
            {
                var keep = new HashSet<string>(keepOnly, StringComparer.OrdinalIgnoreCase);
                all.RemoveWhere(n => !keep.Contains(n));
            }

            var ordered = new List<string>();
            foreach (var p in precedence)
            {
                if (all.Remove(p)) ordered.Add(p);
            }
            ordered.AddRange(all.OrderBy(n => n, StringComparer.OrdinalIgnoreCase));
            return ordered;
        }
    }
}



// ===== FILE: Tools/XmlDefsTools/Emit/TemplateSynthesizer.cs =====
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using XmlDefsTools.Scan;
using XmlDefsTools.Util;

namespace XmlDefsTools.Emit
{
    public static class TemplateSynthesizer
    {
        public static void WriteTemplates(string outputDir, ScanResult scan, IReadOnlyDictionary<string, IList<string>> orderHints)
        {
            Directory.CreateDirectory(outputDir);
            // union of discovered schemas and configured schemas (ensures baseline output)
            var configuredSchemas = orderHints.Keys
                .Where(k => !string.Equals(k, "_common", StringComparison.OrdinalIgnoreCase) && !k.StartsWith("//"))
                .ToHashSet(StringComparer.OrdinalIgnoreCase);
            var allSchemas = new HashSet<string>(scan.Schemas, StringComparer.OrdinalIgnoreCase);
            foreach (var s in configuredSchemas) allSchemas.Add(s);

            foreach (var schema in allSchemas.OrderBy(s => s))
            {
                // if no defs discovered, synthesize from hints only
                var defs = scan.DefsBySchema.ContainsKey(schema)
                    ? scan.DefsBySchema[schema]
                    : new List<DefInfo>();

                // union of observed fields (attributes + elements)
                var attrFields = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
                var elemFields = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
                // include configured per-schema fields as elements to seed structure
                if (orderHints.TryGetValue(schema, out var hinted))
                {
                    foreach (var h in hinted) elemFields.Add(h);
                }
                foreach (var d in defs)
                {
                    foreach (var f in d.AttributeFields) attrFields.Add(f);
                    foreach (var f in d.ElementFields) elemFields.Add(f);
                }

                // known/common order
                var common = orderHints.TryGetValue("_common", out var c) ? c : Array.Empty<string>();
                var perSchema = orderHints.TryGetValue(schema, out var s) ? s : Array.Empty<string>();
                var precedence = common.Concat(perSchema).ToList();

                // Attributes to place on root element
                var rootAttrs = NormalizeOrder(attrFields, precedence, keepOnly: new[] { "id","schema","name_key","tags","version","requires" });
                // Remaining element fields (drop those already in attributes)
                var elementNames = NormalizeOrder(elemFields.Except(rootAttrs, StringComparer.OrdinalIgnoreCase),
                                                  precedence);

                bool HasElem(string name) => elementNames.Any(n => n.Equals(name, StringComparison.OrdinalIgnoreCase));

                var sb = new StringBuilder();
                sb.AppendLine($"<!-- Auto-generated default template for {schema}. Edit your copies; this file is regenerated. -->");

                var root = new XElement(schema);
                // Put attributes with placeholders
                foreach (var a in rootAttrs)
                {
                    var placeholder = a.Equals("id", StringComparison.OrdinalIgnoreCase) ? "your_id_here"
                                   : a.Equals("name_key", StringComparison.OrdinalIgnoreCase) ? "ui.your.key.here"
                                   : a.Equals("tags", StringComparison.OrdinalIgnoreCase) ? ""
                                   : a.Equals("version", StringComparison.OrdinalIgnoreCase) ? "1"
                                   : "";
                    root.SetAttributeValue(a, placeholder);
                }

                // Insert version/requires as elements too if heavily used as elements
                if (HasElem("version") && root.Attribute("version") == null)
                    root.Add(new XElement("version", "1"));
                if (HasElem("requires") && root.Attribute("requires") == null)
                    root.Add(new XElement("requires"));

                // Components block if observed
                if (HasElem("components") || perSchema.Contains("components", StringComparer.OrdinalIgnoreCase))
                {
                    root.Add(new XElement("components",
                        new XComment(" Add component entries like <Component type=\"...\"/> ")));
                }

                // Other fields as empty elements
                foreach (var el in elementNames)
                {
                    if (string.Equals(el, "components", StringComparison.OrdinalIgnoreCase)) continue;
                    if (string.Equals(el, "version", StringComparison.OrdinalIgnoreCase) && root.Elements("version").Any()) continue;
                    if (string.Equals(el, "requires", StringComparison.OrdinalIgnoreCase) && root.Elements("requires").Any()) continue;
                    root.Add(new XElement(el));
                }

                // Canonicalize attribute order
                var canonical = CanonicalXml.CanonicalizeElement(root);
                sb.AppendLine(canonical.ToString(SaveOptions.None));

                var outPath = Path.Combine(outputDir, $"{schema}.xml");
                File.WriteAllText(outPath, sb.ToString());
            }
        }

        private static List<string> NormalizeOrder(IEnumerable<string> names, IList<string> precedence, IEnumerable<string>? keepOnly = null)
        {
            var all = new HashSet<string>(names, StringComparer.OrdinalIgnoreCase);
            if (keepOnly != null)
            {
                var keep = new HashSet<string>(keepOnly, StringComparer.OrdinalIgnoreCase);
                all.RemoveWhere(n => !keep.Contains(n));
            }
            var ordered = new List<string>();
            foreach (var p in precedence)
            {
                if (all.Remove(p)) ordered.Add(p);
            }
            ordered.AddRange(all.OrderBy(n => n, StringComparer.OrdinalIgnoreCase));
            return ordered;
        }
    }
}


// ===== FILE: Tools/XmlDefsTools/Emit/XmlIndexWriter.cs =====
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using XmlDefsTools.Scan;

namespace XmlDefsTools.Emit
{
    public static class XmlIndexWriter
    {
        public static void Write(string repoRoot, string outFile, ScanResult scan)
        {
            var sb = new StringBuilder();
            sb.AppendLine("# XML Index (.xml)");
            sb.AppendLine();
            sb.AppendLine($"_Generated: {DateTime.UtcNow:yyyy-MM-dd HH:mm} UTC_");
            sb.AppendLine();
            sb.AppendLine($"**Total files scanned:** {scan.TotalFiles}  ");
            sb.AppendLine($"**Valid XML files:** {scan.ValidFiles}  ");
            sb.AppendLine($"**Defs discovered:** {scan.TotalDefs}  ");
            sb.AppendLine();

            if (scan.Errors.Any())
            {
                sb.AppendLine("## Parse Errors");
                foreach (var err in scan.Errors)
                {
                    sb.AppendLine($"- `{Rel(repoRoot, err.File)}` â€” {err.Message}");
                }
                sb.AppendLine();
            }

            if (scan.DuplicateIds.Any())
            {
                sb.AppendLine("## Duplicate IDs");
                foreach (var kvp in scan.DuplicateIds.OrderBy(k => k.Key, StringComparer.OrdinalIgnoreCase))
                {
                    sb.AppendLine($"- **{kvp.Key}**");
                    foreach (var item in kvp.Value)
                    {
                        sb.AppendLine($"  - `{item.Schema}` in `{Rel(repoRoot, item.SourceFile)}`");
                    }
                }
                sb.AppendLine();
            }

            // Match Code Index style: bulleted list of files with View Â· Raw links
            var (repo, branch) = RepoMeta();
            var allXmlFiles = scan.FileDocs.Keys.OrderBy(p => p, StringComparer.OrdinalIgnoreCase).ToList();
            if (allXmlFiles.Count > 0)
            {
                foreach (var file in allXmlFiles)
                {
                    var rel = Rel(repoRoot, file);
                    var webPath = rel.Replace('\\','/'); // ensure URL form
                    var enc = EncodePathSegments(webPath);
                    var viewUrl = $"https://github.com/{repo}/blob/{branch}/{enc}";
                    var rawUrl  = $"https://raw.githubusercontent.com/{repo}/{branch}/{enc}";
                    sb.AppendLine($"- `{webPath}` â€” [View]({viewUrl}) Â· [Raw]({rawUrl})");
                }
                sb.AppendLine();
            }

            // Keep the schema summary (below the list) for quick counts
            sb.AppendLine("## Summary by Schema");
            sb.AppendLine();
            sb.AppendLine("| Schema | Def Count | Files |");
            sb.AppendLine("|---|---:|---|");
            foreach (var schema in scan.Schemas.OrderBy(s => s))
            {
                var defs = scan.DefsBySchema[schema];
                var files = defs.Select(d => Rel(repoRoot, d.SourceFile)).Distinct().OrderBy(s => s);
                sb.AppendLine($"| {schema} | {defs.Count} | {string.Join("<br/>", files)} |");
            }
            sb.AppendLine();

            // Per-schema sections unchanged below (list ids + rare fields)

            foreach (var schema in scan.Schemas.OrderBy(s => s))
            {
                var defs = scan.DefsBySchema[schema];
                sb.AppendLine($"### {schema}");
                sb.AppendLine();
                foreach (var d in defs.OrderBy(d => d.Id, StringComparer.OrdinalIgnoreCase))
                {
                    sb.AppendLine($"- `{d.Id}` â€” `{Rel(repoRoot, d.SourceFile)}`");
                }
                // Any newly observed/rare fields
                var fieldCounts = new Dictionary<string,int>(StringComparer.OrdinalIgnoreCase);
                foreach (var d in defs)
                {
                    foreach (var f in d.AttributeFields.Concat(d.ElementFields))
                        fieldCounts[f] = fieldCounts.TryGetValue(f, out var c) ? c + 1 : 1;
                }
                var rare = fieldCounts.Where(kvp => kvp.Value <= Math.Max(1, defs.Count/5)).Select(kvp => kvp.Key).OrderBy(s=>s, StringComparer.OrdinalIgnoreCase).ToList();
                if (rare.Count > 0)
                {
                    sb.AppendLine();
                    sb.AppendLine("<details><summary>Less common fields</summary>");
                    sb.AppendLine();
                    foreach (var f in rare) sb.AppendLine($"- `{f}`");
                    sb.AppendLine();
                    sb.AppendLine("</details>");
                }
                sb.AppendLine();
            }

            Directory.CreateDirectory(Path.GetDirectoryName(outFile)!);
            File.WriteAllText(outFile, sb.ToString());
        }

        // Encode each path segment to avoid corrupting '/' and handle special characters safely.
        private static string EncodePathSegments(string path)
        {
            var parts = path.Replace('\\','/').Split(new[]{'/'}, StringSplitOptions.RemoveEmptyEntries);
            var encoded = parts.Select(Uri.EscapeDataString);
            return string.Join("/", encoded);
        }

        private static (string repo, string branch) RepoMeta()
        {
            var repo = Environment.GetEnvironmentVariable("GITHUB_REPOSITORY");
            if (string.IsNullOrWhiteSpace(repo)) repo = "Natangry/FantasyColony";
            var branch = Environment.GetEnvironmentVariable("GITHUB_REF_NAME");
            if (string.IsNullOrWhiteSpace(branch)) branch = "main";
            // strip refs/heads/ if present
            branch = branch.Replace("refs/heads/", "");
            return (repo, branch);
        }

        private static string Rel(string root, string path)
        {
            try
            {
                var rp = Path.GetRelativePath(root, path).Replace('\\','/');
                return rp;
            }
            catch
            {
                return path.Replace('\\','/');
            }
        }
    }
}


// ===== FILE: Tools/XmlDefsTools/Emit/XmlSnapshotWriter.cs =====
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using XmlDefsTools.Util;

namespace XmlDefsTools.Emit
{
    public static class XmlSnapshotWriter
    {
        public static void Write(string repoRoot, string outFile, IEnumerable<(string path, XDocument? doc)> docs)
        {
            var sb = new StringBuilder();
            foreach (var (path, doc) in docs.OrderBy(t => t.path, StringComparer.OrdinalIgnoreCase))
            {
                sb.AppendLine($"// ===== FILE: {Rel(repoRoot, path)} =====");
                if (doc == null)
                {
                    sb.AppendLine("// (invalid XML)");
                    sb.AppendLine();
                    continue;
                }
                var normalized = CanonicalXml.Canonicalize(doc);
                sb.AppendLine(normalized);
                sb.AppendLine();
            }
            File.WriteAllText(outFile, sb.ToString());
        }

        private static string Rel(string root, string path)
        {
            try
            {
                var rp = Path.GetRelativePath(root, path).Replace('\\','/');
                return rp;
            }
            catch
            {
                return path.Replace('\\','/');
            }
        }
    }
}


// ===== FILE: Tools/XmlDefsTools/Program.cs =====
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;
using XmlDefsTools.Emit;
using XmlDefsTools.Scan;

namespace XmlDefsTools
{
    internal static class Program
    {
        private static int Main(string[] args)
        {
            try
            {
                var repoRoot = GetRepoRoot();
                var defsDir = GetDefsDir(repoRoot);
                Console.WriteLine($"[XmlDefsTools] Repo root: {repoRoot}");
                Console.WriteLine($"[XmlDefsTools] Defs dir : {defsDir}");

                var scanner = new XmlDefScanner();
                var scan = scanner.Scan(defsDir);

                // Load order hints
                var hintsPath = Path.Combine(repoRoot, "Tools", "XmlDefsTools", "Config", "SchemaOrder.json");
                var orderHints = File.Exists(hintsPath)
                    ? JsonSerializer.Deserialize<Dictionary<string, IList<string>>>(File.ReadAllText(hintsPath))
                    : new Dictionary<string, IList<string>>(StringComparer.OrdinalIgnoreCase);
                orderHints ??= new Dictionary<string, IList<string>>(StringComparer.OrdinalIgnoreCase);

                // Write index
                var indexPath = Path.Combine(repoRoot, "XML_INDEX.md");
                XmlIndexWriter.Write(repoRoot, indexPath, scan);
                Console.WriteLine($"[XmlDefsTools] Wrote index: {indexPath}");

                // Write snapshot
                var snapshotPath = Path.Combine(repoRoot, "XML_SNAPSHOT.txt");
                var docs = scan.FileDocs.Select(kvp => (kvp.Key, kvp.Value));
                XmlSnapshotWriter.Write(repoRoot, snapshotPath, docs);
                Console.WriteLine($"[XmlDefsTools] Wrote snapshot: {snapshotPath}");

                // Write templates
                var templatesDir = Path.Combine(repoRoot, "Docs", "Templates", "Defs");
                TemplateSynthesizer.WriteTemplates(templatesDir, scan, orderHints);
                Console.WriteLine($"[XmlDefsTools] Wrote templates to: {templatesDir}");

                // Write consolidated schema catalog
                var catalogPath = Path.Combine(templatesDir, "_AllSchemas.xml");
                SchemaCatalogWriter.Write(templatesDir, scan, orderHints);
                Console.WriteLine($"[XmlDefsTools] Wrote consolidated catalog: {catalogPath}");

                return 0;
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine(ex.ToString());
                return 1;
            }
        }

        private static string GetRepoRoot()
        {
            var env = Environment.GetEnvironmentVariable("FC_REPO_ROOT");
            if (!string.IsNullOrWhiteSpace(env))
                return Path.GetFullPath(env);
            // assume current working directory is repo root (CI) or a subfolder (local)
            var cwd = Directory.GetCurrentDirectory();
            // try to find .git upwards
            var dir = new DirectoryInfo(cwd);
            while (dir != null)
            {
                if (Directory.Exists(Path.Combine(dir.FullName, ".git")))
                    return dir.FullName;
                dir = dir.Parent;
            }
            return cwd;
        }

        private static string GetDefsDir(string repoRoot)
        {
            var env = Environment.GetEnvironmentVariable("FC_DEFS_DIR");
            if (!string.IsNullOrWhiteSpace(env))
            {
                var p = Path.IsPathRooted(env) ? env : Path.Combine(repoRoot, env);
                return Directory.Exists(p) ? p : repoRoot;
            }
            var candidates = new[]
            {
                Path.Combine(repoRoot, "StreamingAssets", "Defs"),
                Path.Combine(repoRoot, "Assets", "StreamingAssets", "Defs"),
                Path.Combine(repoRoot, "GameData", "Defs")
            };
            foreach (var c in candidates)
                if (Directory.Exists(c)) return c;
            // fallback: repo root (will scan, find no files, still emit artifacts)
            return repoRoot;
        }
    }
}


// ===== FILE: Tools/XmlDefsTools/Scan/XmlDefScanner.cs =====
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml;
using System.Xml.Linq;

namespace XmlDefsTools.Scan
{
    public sealed class XmlDefScanner
    {
        public ScanResult Scan(string rootDir)
        {
            var res = new ScanResult();
            if (!Directory.Exists(rootDir))
                return res;

            var files = Directory.EnumerateFiles(rootDir, "*.xml", SearchOption.AllDirectories).ToList();
            res.TotalFiles = files.Count;
            foreach (var file in files)
            {
                XDocument? doc = null;
                try
                {
                    var text = File.ReadAllText(file);
                    doc = XDocument.Parse(text, LoadOptions.PreserveWhitespace | LoadOptions.SetLineInfo);
                    res.ValidFiles++;
                    res.FileDocs[file] = doc;
                }
                catch (Exception ex)
                {
                    res.Errors.Add(new ScanError { File = file, Message = ex.GetBaseException().Message });
                    res.FileDocs[file] = null;
                    continue;
                }

                // Collect defs: any element with an 'id' attribute
                var defs = doc.Descendants()
                    .Where(e => e.NodeType == System.Xml.XmlNodeType.Element)
                    .OfType<XElement>()
                    .Where(e => e.Attribute("id") != null)
                    .ToList();

                foreach (var el in defs)
                {
                    var schema = el.Name.LocalName;
                    var id = (string?)el.Attribute("id") ?? "(missing)";
                    var info = new DefInfo
                    {
                        Schema = schema,
                        Id = id,
                        SourceFile = file
                    };

                    // Attribute fields (names only)
                    foreach (var a in el.Attributes())
                    {
                        if (a.IsNamespaceDeclaration) continue;
                        info.AttributeFields.Add(a.Name.LocalName);
                    }

                    // Element fields (direct child element names only)
                    foreach (var child in el.Elements())
                    {
                        info.ElementFields.Add(child.Name.LocalName);
                    }

                    res.TotalDefs++;
                    if (!res.DefsBySchema.TryGetValue(schema, out var list))
                    {
                        list = new List<DefInfo>();
                        res.DefsBySchema[schema] = list;
                        res.Schemas.Add(schema);
                    }
                    list.Add(info);

                    // Track duplicates
                    var dupKey = id;
                    if (!res.DuplicateIds.TryGetValue(dupKey, out var dupList))
                    {
                        dupList = new List<DefInfo>();
                        res.DuplicateIds[dupKey] = dupList;
                    }
                    dupList.Add(info);
                }
            }

            // Remove entries that are not actually duplicates (only one occurrence)
            var toPrune = res.DuplicateIds.Where(kvp => kvp.Value.Count <= 1)
                                          .Select(kvp => kvp.Key).ToList();
            foreach (var k in toPrune) res.DuplicateIds.Remove(k);

            return res;
        }
    }

    public sealed class ScanResult
    {
        public int TotalFiles { get; set; }
        public int ValidFiles { get; set; }
        public int TotalDefs { get; set; }
        public HashSet<string> Schemas { get; } = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        public Dictionary<string, List<DefInfo>> DefsBySchema { get; } = new Dictionary<string, List<DefInfo>>(StringComparer.OrdinalIgnoreCase);
        public List<ScanError> Errors { get; } = new List<ScanError>();
        public Dictionary<string, XDocument?> FileDocs { get; } = new Dictionary<string, XDocument?>(StringComparer.OrdinalIgnoreCase);
        public Dictionary<string, List<DefInfo>> DuplicateIds { get; } = new Dictionary<string, List<DefInfo>>(StringComparer.OrdinalIgnoreCase);
    }

    public sealed class DefInfo
    {
        public string Schema { get; set; } = "";
        public string Id { get; set; } = "";
        public string SourceFile { get; set; } = "";
        public HashSet<string> AttributeFields { get; } = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        public HashSet<string> ElementFields { get; } = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
    }

    public sealed class ScanError
    {
        public string File { get; set; } = "";
        public string Message { get; set; } = "";
    }
}


// ===== FILE: Tools/XmlDefsTools/Util/CanonicalXml.cs =====
using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;

namespace XmlDefsTools.Util
{
    public static class CanonicalXml
    {
        private static readonly string[] AttributePrecedence =
        {
            "id","schema","name_key","tags","version","requires"
        };

        public static string Canonicalize(XDocument doc)
        {
            // Remove comments
            foreach (var c in doc.DescendantNodes().OfType<XComment>().ToList())
                c.Remove();

            // Canonicalize elements & attributes
            var root = CanonicalizeElement(doc.Root!);
            var newDoc = new XDocument(root);

            // Save with stable formatting
            var settings = new XmlWriterSettings
            {
                OmitXmlDeclaration = true,
                Indent = true,
                NewLineOnAttributes = false
            };
            var sb = new StringBuilder();
            using (var writer = XmlWriter.Create(sb, settings))
            {
                newDoc.Save(writer);
            }
            return sb.ToString().Trim() + Environment.NewLine;
        }

        public static XElement CanonicalizeElement(XElement el)
        {
            var orderedAttrs = el.Attributes()
                .Where(a => !a.IsNamespaceDeclaration)
                .OrderBy(a => OrderKey(a.Name.LocalName))
                .ThenBy(a => a.Name.LocalName, StringComparer.OrdinalIgnoreCase)
                .ToList();

            var newEl = new XElement(el.Name);
            foreach (var a in orderedAttrs)
                newEl.SetAttributeValue(a.Name.LocalName, a.Value);

            foreach (var node in el.Nodes())
            {
                if (node is XElement child)
                {
                    newEl.Add(CanonicalizeElement(child));
                }
                else if (node is XText t)
                {
                    var v = t.Value;
                    if (!string.IsNullOrWhiteSpace(v))
                        newEl.Add(new XText(NormalizeWhitespace(v)));
                }
                // other node types (comments, processing instructions) are skipped
            }
            return newEl;
        }

        private static int OrderKey(string name)
        {
            for (int i = 0; i < AttributePrecedence.Length; i++)
                if (name.Equals(AttributePrecedence[i], StringComparison.OrdinalIgnoreCase))
                    return i - 1000; // bubble to front
            return 0;
        }

        private static string NormalizeWhitespace(string s)
        {
            // Collapse internal whitespace sequences
            var arr = s.ToCharArray();
            var sb = new StringBuilder(arr.Length);
            bool inWs = false;
            foreach (var ch in arr)
            {
                if (char.IsWhiteSpace(ch))
                {
                    if (!inWs)
                    {
                        sb.Append(' ');
                        inWs = true;
                    }
                }
                else
                {
                    sb.Append(ch);
                    inWs = false;
                }
            }
            return sb.ToString().Trim();
        }
    }
}


