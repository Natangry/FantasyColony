// ===== FILE: Assets/Scripts/Boot/IntroBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures the temporary IntroScreen (Start/Quit) exists when the game boots,
/// independent of scene setup or build order.
/// </summary>
public static class IntroBootstrap
{
    private static bool spawnedOnce;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureIntro()
    {
#if NO_INTRO
        return;
#endif
        if (spawnedOnce)
            return;

        // If an IntroScreen already exists in the scene (FindAnyObjectByType/FindObjectOfType), do nothing.
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<IntroScreen>();
#else
        var existing = Object.FindObjectOfType<IntroScreen>();
#endif
        if (existing != null)
        {
            spawnedOnce = true;
            return;
        }

        // Otherwise, create one.
        var go = new GameObject("IntroScreen (Auto)");
        // Keep it alive across scene loads; the IntroScreen script can hide/clear itself on Start.
        Object.DontDestroyOnLoad(go);
        go.AddComponent<IntroScreen>();

        spawnedOnce = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/PauseBootstrap.cs =====
using UnityEngine;

public static class PauseBootstrap
{
    private static bool spawned;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsurePauseController()
    {
#if NO_INTRO
        // Even if NO_INTRO is defined, we still want pause in gameplay.
#endif
        if (spawned) return;
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<PauseController>();
#else
        var existing = Object.FindObjectOfType<PauseController>();
#endif
        if (existing != null) { spawned = true; return; }

        var go = new GameObject("PauseController (Auto)");
        Object.DontDestroyOnLoad(go);
        go.AddComponent<PauseController>();
        spawned = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/PawnBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Helper to spawn a single SNES-style sprite pawn into the world.
/// </summary>
public static class PawnBootstrap
{
    public static GameObject SpawnSpritePawn()
    {
        // World root
        var root = GameObject.Find("World");
        if (root == null)
        {
            root = new GameObject("World");
        }

        // Avoid duplicates if already spawned.
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<SpritePawn>();
#else
        var existing = Object.FindObjectOfType<SpritePawn>();
#endif
        if (existing != null)
        {
            return existing.gameObject;
        }

        var pawnGO = new GameObject("TestPawn");
        pawnGO.transform.SetParent(root.transform, false);
        pawnGO.AddComponent<SpritePawn>();
        return pawnGO;
    }
}



// ===== FILE: Assets/Scripts/Boot/SelectionBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures a SelectionController exists at runtime in any scene.
/// (Updated for marquee selection support)
/// </summary>
public static class SelectionBootstrap
{
    private static bool spawned;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureSelectionController()
    {
        if (spawned) return;
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<SelectionController>();
#else
        var existing = Object.FindObjectOfType<SelectionController>();
#endif
        if (existing != null) { spawned = true; return; }

        var go = new GameObject("SelectionController (Auto)");
        Object.DontDestroyOnLoad(go);
        go.AddComponent<SelectionController>();
        // HUD that draws the bottom-left info panel and right-side gizmos
        go.AddComponent<SelectionHUD>();
        spawned = true;
    }
}



// ===== FILE: Assets/Scripts/Boot/WorldBootstrap.cs =====
using UnityEngine;

/// <summary>
/// One-time helper to generate a small default grid world and frame the camera.
/// </summary>
public static class WorldBootstrap
{
    public static void GenerateDefaultGrid(int w = 32, int h = 32, float tile = 1f)
    {
        // Create/find root
        var root = GameObject.Find("World");
        if (root == null)
        {
            root = new GameObject("World");
        }

        // Create/find grid
        var grid = root.GetComponentInChildren<SimpleGridMap>();
        if (grid == null)
        {
            var gridGO = new GameObject("Grid");
            gridGO.transform.SetParent(root.transform, false);
            grid = gridGO.AddComponent<SimpleGridMap>();
        }

        grid.Build(w, h, tile, grid.colorA, grid.colorB);

        EnsureDirectionalLight();
        FrameCameraToGrid(grid);
    }

    static void EnsureDirectionalLight()
    {
        Light dir = null;
#if UNITY_2022_2_OR_NEWER
        var lights = Object.FindObjectsByType<Light>(FindObjectsSortMode.None);
        foreach (var l in lights) { if (l != null && l.type == LightType.Directional) { dir = l; break; } }
#else
        var lights = Object.FindObjectsOfType<Light>();
        foreach (var l in lights) { if (l != null && l.type == LightType.Directional) { dir = l; break; } }
#endif
        if (dir == null)
        {
            var go = new GameObject("Directional Light");
            dir = go.AddComponent<Light>();
            dir.type = LightType.Directional;
            dir.intensity = 1.0f;
            go.transform.rotation = Quaternion.Euler(50f, -30f, 0f);
        }
    }

    static void FrameCameraToGrid(SimpleGridMap grid)
    {
        var cam = Camera.main;
        if (cam == null)
        {
            var camGO = new GameObject("Main Camera");
            cam = camGO.AddComponent<Camera>();
            // Make sure it's tagged correctly so Camera.main works later.
            camGO.tag = "MainCamera";
        }

        // Orthographic top-down
        cam.orthographic = true;
        cam.nearClipPlane = 0.1f;
        cam.farClipPlane = 100f;
        cam.transform.rotation = Quaternion.Euler(90f, 0f, 0f);

        // Compute world center
        float wWorld = grid.width * grid.tileSize;
        float hWorld = grid.height * grid.tileSize;
        var center = new Vector3(
            (grid.width * grid.tileSize) * 0.5f - (grid.tileSize * 0.5f),
            0f,
            (grid.height * grid.tileSize) * 0.5f - (grid.tileSize * 0.5f)
        );

        // Position camera above center
        cam.transform.position = new Vector3(center.x, 10f, center.z);

        // Fit orthographic size to show most of the grid with a small margin
        float aspect = (Screen.height > 0) ? (Screen.width / (float)Screen.height) : (16f / 9f);
        float halfHeight = hWorld * 0.5f;
        float halfWidth = wWorld * 0.5f;
        float sizeToFit = Mathf.Max(halfHeight, halfWidth / Mathf.Max(0.1f, aspect));
        cam.orthographicSize = sizeToFit * 1.1f;
    }
}



// ===== FILE: Assets/Scripts/Camera/PixelCameraHelper.cs =====
using UnityEngine;

/// <summary>
/// Utilities for pixel-perfect math with an orthographic camera.
/// </summary>
public static class PixelCameraHelper
{
    /// <summary>
    /// World units per on-screen pixel for the given camera.
    /// </summary>
    public static float WorldUnitsPerPixel(Camera cam)
    {
        if (cam == null) cam = Camera.main;
        if (cam == null) return 1f / 100f; // safe fallback
        // For an ortho camera, vertical world size is 2 * orthographicSize.
        // Divide by screen height (pixels) to get units-per-pixel.
        float h = Screen.height > 0 ? Screen.height : 1080f;
        return (2f * cam.orthographicSize) / h;
    }

    /// <summary>
    /// Snap a world position to the camera's pixel grid (X/Z for top-down).
    /// </summary>
    public static Vector3 SnapToPixelGrid(Vector3 worldPos, Camera cam)
    {
        float upp = Mathf.Max(1e-5f, WorldUnitsPerPixel(cam));
        worldPos.x = Mathf.Round(worldPos.x / upp) * upp;
        worldPos.z = Mathf.Round(worldPos.z / upp) * upp;
        return worldPos;
    }

    /// <summary>
    /// Returns the world-space rectangle (minX,maxX,minZ,maxZ) visible by the camera.
    /// </summary>
    public static (float minX, float maxX, float minZ, float maxZ) OrthoWorldBounds(Camera cam)
    {
        float halfH = cam.orthographicSize;
        float halfW = halfH * ((Screen.height > 0) ? (Screen.width / (float)Screen.height) : (16f/9f));
        return (cam.transform.position.x - halfW, cam.transform.position.x + halfW, cam.transform.position.z - halfH, cam.transform.position.z + halfH);
    }
}



// ===== FILE: Assets/Scripts/Systems/ControlManager.cs =====
using System;
using UnityEngine;

// ReSharper disable Unity.InefficientPropertyAccess
/// <summary>
/// Global "assume control" ownership. Exactly one pawn can be controlled at a time.
/// </summary>
[AddComponentMenu("Systems/Control Manager")]
public class ControlManager : MonoBehaviour
{
    public static SpritePawn Controlled { get; private set; }
    public static event Action<SpritePawn> OnControlledChanged;

    public static void AssumeControl(SpritePawn pawn)
    {
        if (pawn == null) return;
        if (Controlled == pawn)
        {
            // Already controlled; no change but still raise event for listeners if needed.
            try { OnControlledChanged?.Invoke(Controlled); } catch { }
            return;
        }
        // Release previous
        if (Controlled != null) Controlled.SetControlled(false);
        Controlled = pawn;
        Controlled.SetControlled(true);
        SelectionController.SelectOnly(Controlled); // pin selection to the controlled pawn
        try { OnControlledChanged?.Invoke(Controlled); } catch { }
    }

    public static void ReleaseControl()
    {
        if (Controlled == null) return;
        Controlled.SetControlled(false);
        Controlled = null;
        try { OnControlledChanged?.Invoke(null); } catch { }
    }
}



// ===== FILE: Assets/Scripts/Systems/PauseController.cs =====
using System;
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.LowLevel;
#endif

/// <summary>
/// Global pause toggle (Space). Pauses via Time.timeScale and shows a tiny overlay while paused.
/// </summary>
[AddComponentMenu("Systems/Pause Controller")]
public class PauseController : MonoBehaviour
{
    public static bool IsPaused { get; private set; }
    public static float CurrentSpeed { get; private set; } = 1f; // 1x by default
    public static event Action<bool> OnPauseChanged;

    [Header("Overlay")]
    [SerializeField] private Vector2 indicatorPadding = new Vector2(12f, 8f);
    [SerializeField] private float indicatorScale = 0.022f; // % of screen height for font sizing

#if ENABLE_INPUT_SYSTEM
    private InputAction _pauseAction;
    private InputAction _speed1Action;
    private InputAction _speed2Action;
    private InputAction _speed3Action;
#endif

    private void Update()
    {
#if ENABLE_INPUT_SYSTEM
        // With the new Input System active, we use an InputAction (enabled in OnEnable).
#else
        if (Input.GetKeyDown(KeyCode.Space))
        {
            TogglePause();
        }
        if (Input.GetKeyDown(KeyCode.Alpha1)) SetSpeed(1f);
        if (Input.GetKeyDown(KeyCode.Alpha2)) SetSpeed(2f);
        if (Input.GetKeyDown(KeyCode.Alpha3)) SetSpeed(3f);
#endif
    }

    public static void SetPaused(bool pause)
    {
        if (IsPaused == pause) return;
        IsPaused = pause;
        ApplyTimeScale();
#if UNITY_EDITOR
        Debug.Log($"Paused: {IsPaused}");
#endif
        try { OnPauseChanged?.Invoke(IsPaused); } catch { /* no-op */ }
    }

    public static void SetSpeed(float s)
    {
        CurrentSpeed = Mathf.Clamp(s, 0.25f, 3f);
        if (!IsPaused) ApplyTimeScale();
    }

    private static void ApplyTimeScale()
    {
        Time.timeScale = IsPaused ? 0f : CurrentSpeed;
    }

    private void TogglePause()
    {
        SetPaused(!IsPaused);
    }

#if ENABLE_INPUT_SYSTEM
    private void OnEnable()
    {
        if (_pauseAction == null)
        {
            // Bind keyboard Space; also allow gamepad Start as a convenience.
            _pauseAction = new InputAction("Pause", binding: "<Keyboard>/space");
            _pauseAction.AddBinding("<Gamepad>/start");
            _pauseAction.performed += OnPausePerformed;
        }
        if (_speed1Action == null)
        {
            _speed1Action = new InputAction("Speed1", binding: "<Keyboard>/1");
            _speed1Action.performed += ctx => SetSpeed(1f);
        }
        if (_speed2Action == null)
        {
            _speed2Action = new InputAction("Speed2", binding: "<Keyboard>/2");
            _speed2Action.performed += ctx => SetSpeed(2f);
        }
        if (_speed3Action == null)
        {
            _speed3Action = new InputAction("Speed3", binding: "<Keyboard>/3");
            _speed3Action.performed += ctx => SetSpeed(3f);
        }
        _pauseAction.Enable();
        _speed1Action.Enable();
        _speed2Action.Enable();
        _speed3Action.Enable();
    }

    private void OnDisable()
    {
        if (_pauseAction != null)
            _pauseAction.Disable();
        if (_speed1Action != null)
            _speed1Action.Disable();
        if (_speed2Action != null)
            _speed2Action.Disable();
        if (_speed3Action != null)
            _speed3Action.Disable();
    }

    private void OnPausePerformed(InputAction.CallbackContext ctx)
    {
        TogglePause();
    }
#endif

    private void OnGUI()
    {
        // Top-right speed (and paused) indicator
        var sw = Screen.width;
        var sh = Screen.height;

        var label = new GUIStyle(GUI.skin.label)
        {
            alignment = TextAnchor.UpperRight,
            wordWrap = false,
            fontSize = Mathf.Max(12, Mathf.RoundToInt(sh * indicatorScale))
        };

        string text = IsPaused ? $"Paused — Speed: {CurrentSpeed:0.##}×" : $"Speed: {CurrentSpeed:0.##}×";
        Vector2 size = label.CalcSize(new GUIContent(text));
        float x = sw - size.x - indicatorPadding.x;
        float y = indicatorPadding.y;
        GUI.Label(new Rect(x, y, size.x, size.y), text, label);
    }
}


// ===== FILE: Assets/Scripts/Systems/SelectionController.cs =====
using System;
using System.Collections.Generic;
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
#endif

/// <summary>
/// Central selection controller.
/// - Single click selects a pawn (click empty clears).
/// - Drag-select (marquee) to select one or many pawns.
/// </summary>
[AddComponentMenu("Systems/Selection Controller")]
public class SelectionController : MonoBehaviour
{
    public static SpritePawn Selected { get; private set; }
    public static event Action<SpritePawn> OnSelectionChanged;
    private static SelectionController _instance;

    private static readonly List<SpritePawn> _selectedGroup = new List<SpritePawn>();
    public static IReadOnlyList<SpritePawn> SelectedGroup => _selectedGroup;

    private Camera _cam;

    // Drag/marquee state (screen-space, origin bottom-left)
    private bool _dragging;
    private Vector2 _dragStart;
    private Vector2 _dragNow;
    private const float _dragThreshold = 6f; // pixels

    // If a press began over HUD, ignore the whole press/drag/release sequence.
    private bool _pressOverHUD;

    // GUI helpers
    private static Texture2D _texWhite;

    private void Awake()
    {
        _cam = Camera.main;
        if (_cam == null)
        {
            // Fallback to any camera in scene
#if UNITY_2022_2_OR_NEWER
            var any = UnityEngine.Object.FindAnyObjectByType<Camera>();
#else
            var any = UnityEngine.Object.FindObjectOfType<Camera>();
#endif
            _cam = any;
        }
    }
    private void OnEnable() { _instance = this; }
    private void OnDisable() { if (_instance == this) _instance = null; }

    private void Update()
    {
        // Handle mouse input for both legacy and new input systems.
#if ENABLE_INPUT_SYSTEM
        var mouse = Mouse.current;
        if (mouse != null)
        {
            Vector2 pos = mouse.position.ReadValue();
            // If we are controlling a pawn, block selection input unless it's over HUD (so gizmos remain usable).
            if (ControlManager.Controlled != null && !IsOverHUD(pos))
            {
                // Still allow HUD clicks to go through (handled in SelectionHUD)
                _pressOverHUD = true;
                return;
            }
            if (IsOverHUD(pos)) { if (mouse.leftButton.wasPressedThisFrame) _pressOverHUD = true; return; }
            if (mouse.leftButton.wasPressedThisFrame) OnMouseDown(pos);
            if (mouse.leftButton.isPressed) OnMouseDrag(pos);
            if (mouse.leftButton.wasReleasedThisFrame) OnMouseUp(pos);
            return;
        }
#endif

        // Legacy Input fallback
        Vector2 mpos = Input.mousePosition;
        if (ControlManager.Controlled != null && !IsOverHUD(mpos))
        {
            if (Input.GetMouseButtonDown(0)) _pressOverHUD = true;
            // Ignore all selection while controlled (unless HUD)
            return;
        }

        if (IsOverHUD(mpos))
        {
            if (Input.GetMouseButtonDown(0)) _pressOverHUD = true;
            return;
        }
        if (Input.GetMouseButtonDown(0)) OnMouseDown(mpos);
        if (Input.GetMouseButton(0)) OnMouseDrag(mpos);
        if (Input.GetMouseButtonUp(0)) OnMouseUp(mpos);
    }

    public static void SetSelected(SpritePawn pawn)
    {
        if (Selected == pawn)
        {
            // Keep group as-is; still raise event for listeners.
            try { OnSelectionChanged?.Invoke(Selected); } catch { }
            return;
        }
        Selected = pawn; // primary selection
        try { OnSelectionChanged?.Invoke(Selected); } catch { /* no-op */ }
    }

    /// <summary>
    /// Clears the group and selects only the provided pawn. Used when assuming control.
    /// </summary>
    public static void SelectOnly(SpritePawn pawn)
    {
        if (_instance == null)
        {
            SetSelected(pawn);
            return;
        }
        // Turn off previous rings
        for (int i = 0; i < _selectedGroup.Count; i++)
        {
            var p = _selectedGroup[i];
            if (p != null) p.SetSelected(false);
        }
        _selectedGroup.Clear();
        if (pawn != null)
        {
            _selectedGroup.Add(pawn);
            pawn.SetSelected(true);
        }
        SetSelected(pawn);
    }
    private void ApplyGroupSelection(List<SpritePawn> newGroup)
    {
        // Turn off previous rings
        for (int i = 0; i < _selectedGroup.Count; i++)
        {
            var p = _selectedGroup[i];
            if (p != null) p.SetSelected(false);
        }

        _selectedGroup.Clear();
        if (newGroup != null && newGroup.Count > 0)
        {
            _selectedGroup.AddRange(newGroup);
            // Turn on rings for new group
            for (int i = 0; i < _selectedGroup.Count; i++)
            {
                var p = _selectedGroup[i];
                if (p != null) p.SetSelected(true);
            }
            // Primary = first
            SetSelected(_selectedGroup[0]);
        }
        else
        {
            SetSelected(null);
        }
    }

    private void SingleClickSelect(Vector2 screenPosBL)
    {
        if (_cam == null) return;
        var ray = _cam.ScreenPointToRay(screenPosBL);
        if (Physics.Raycast(ray, out var hit, 1000f, ~0, QueryTriggerInteraction.Ignore))
        {
            var pawn = hit.collider != null ? hit.collider.GetComponentInParent<SpritePawn>() : null;
            var list = new List<SpritePawn>();
            if (pawn != null) list.Add(pawn);
            ApplyGroupSelection(list);
        }
        else
        {
            ApplyGroupSelection(null);
        }
    }

    private void OnMouseDown(Vector2 screenPosBL)
    {
        if (_pressOverHUD) return;
        _dragStart = screenPosBL;
        _dragNow = screenPosBL;
        _dragging = false;
    }

    private void OnMouseDrag(Vector2 screenPosBL)
    {
        if (_pressOverHUD) return;
        _dragNow = screenPosBL;
        if (!_dragging && Vector2.Distance(_dragStart, _dragNow) > _dragThreshold)
        {
            _dragging = true;
        }
    }

    private void OnMouseUp(Vector2 screenPosBL)
    {
        if (_pressOverHUD) { _pressOverHUD = false; return; }
        _dragNow = screenPosBL;
        if (!_dragging)
        {
            // Treat as a click
            SingleClickSelect(screenPosBL);
        }
        else
        {
            // Marquee select
            var rect = GetScreenRectBL(_dragStart, _dragNow);
            var candidates = new List<SpritePawn>();
            if (_cam != null)
            {
                foreach (var pawn in SpritePawn.Instances)
                {
                    if (pawn == null) continue;
                    var wp = pawn.transform.position;
                    var sp = _cam.WorldToScreenPoint(wp);
                    if (sp.z < 0f) continue; // behind camera
                    var p = new Vector2(sp.x, sp.y); // bottom-left origin
                    if (rect.Contains(p))
                    {
                        candidates.Add(pawn);
                    }
                }
            }
            ApplyGroupSelection(candidates);
        }
        _dragging = false;
    }

    private static Rect GetScreenRectBL(Vector2 aBL, Vector2 bBL)
    {
        float xMin = Mathf.Min(aBL.x, bBL.x);
        float xMax = Mathf.Max(aBL.x, bBL.x);
        float yMin = Mathf.Min(aBL.y, bBL.y);
        float yMax = Mathf.Max(aBL.y, bBL.y);
        return Rect.MinMaxRect(xMin, yMin, xMax, yMax);
    }

    private bool IsOverHUD(Vector2 screenPosBL)
    {
        var p = SelectionHUD.LastPanelRectBL;
        var g = SelectionHUD.LastGizmoRectBL;
        bool overPanel = p.width > 0f && p.height > 0f && p.Contains(screenPosBL);
        bool overGizmo = g.width > 0f && g.height > 0f && g.Contains(screenPosBL);
        return overPanel || overGizmo;
    }

    private void OnGUI()
    {
        if (!_dragging) return;

        var sw = Screen.width;
        var sh = Screen.height;

        // Convert bottom-left rect to GUI-space (top-left origin)
        var rBL = GetScreenRectBL(_dragStart, _dragNow);
        var rGUI = new Rect(rBL.xMin, sh - rBL.yMax, rBL.width, rBL.height);

        if (_texWhite == null)
        {
            _texWhite = new Texture2D(1, 1, TextureFormat.RGBA32, false);
            _texWhite.SetPixel(0, 0, Color.white);
            _texWhite.Apply(false, false);
        }

        // Fill
        var fillCol = new Color(0.2f, 0.6f, 1f, 0.15f);
        var borderCol = new Color(0.2f, 0.6f, 1f, 0.9f);
        GUI.color = fillCol;
        GUI.DrawTexture(rGUI, _texWhite);
        // Border
        GUI.color = borderCol;
        GUI.DrawTexture(new Rect(rGUI.xMin, rGUI.yMin, rGUI.width, 2f), _texWhite);
        GUI.DrawTexture(new Rect(rGUI.xMin, rGUI.yMax - 2f, rGUI.width, 2f), _texWhite);
        GUI.DrawTexture(new Rect(rGUI.xMin, rGUI.yMin, 2f, rGUI.height), _texWhite);
        GUI.DrawTexture(new Rect(rGUI.xMax - 2f, rGUI.yMin, 2f, rGUI.height), _texWhite);
        GUI.color = Color.white;
    }
}


// ===== FILE: Assets/Scripts/UI/IntroScreen.cs =====
using UnityEngine;

#if UNITY_EDITOR
using UnityEditor;
#endif

/// <summary>
/// Temporary intro overlay with Start / Quit buttons.
/// This version scales its layout and fonts with the screen resolution so it remains readable on 720p–4K.
/// </summary>
[AddComponentMenu("UI/Intro Screen (Temporary)")]
public class IntroScreen : MonoBehaviour
{
    [Header("Responsive Layout")]
    [Tooltip("Panel size as a percentage of the screen (width, height).")]
    [SerializeField] private Vector2 panelPercent = new Vector2(0.40f, 0.45f);

    [Tooltip("Min/Max width (pixels) clamp for the panel.")]
    [SerializeField] private Vector2 panelMinMaxW = new Vector2(420f, 900f);

    [Tooltip("Min/Max height (pixels) clamp for the panel.")]
    [SerializeField] private Vector2 panelMinMaxH = new Vector2(260f, 700f);

    [Header("Typography (as % of screen height)")]
    [SerializeField] private float titlePct = 0.060f;
    [SerializeField] private float buttonPct = 0.035f;

    [Header("Content")]
    [SerializeField] private string gameTitle = "Fantasy Colony";

    private bool showMenu = true;
    private bool focusedFirstButton;

    private GUIStyle titleStyle;
    private GUIStyle buttonStyle;
    private GUIStyle boxStyle;

    private void Awake()
    {
        // Ensure visible on first frame in case another script toggled this beforehand.
        showMenu = true;
    }

    private void OnGUI()
    {
        if (!showMenu)
            return;

        float sw = Screen.width;
        float sh = Screen.height;

        // Compute responsive panel size with sensible clamps.
        float panelW = Mathf.Clamp(sw * Mathf.Clamp01(panelPercent.x), panelMinMaxW.x, panelMinMaxW.y);
        float panelH = Mathf.Clamp(sh * Mathf.Clamp01(panelPercent.y), panelMinMaxH.x, panelMinMaxH.y);
        Rect panelRect = new Rect((sw - panelW) * 0.5f, (sh - panelH) * 0.5f, panelW, panelH);

        // Styles that scale with resolution.
        int titleFontSize = Mathf.Max(18, Mathf.RoundToInt(sh * titlePct));
        int buttonFontSize = Mathf.Max(12, Mathf.RoundToInt(sh * buttonPct));
        float buttonHeight = Mathf.Max(40f, sh * 0.06f);
        float contentPadding = Mathf.Round(panelH * 0.08f);

        // Title
        titleStyle = new GUIStyle(GUI.skin.label)
        {
            alignment = TextAnchor.MiddleCenter,
            fontSize = titleFontSize,
            wordWrap = true,
            richText = true
        };

        // Buttons
        buttonStyle = new GUIStyle(GUI.skin.button)
        {
            fontSize = buttonFontSize
        };

        // Panel background
        boxStyle = new GUIStyle(GUI.skin.box)
        {
            padding = new RectOffset(
                Mathf.RoundToInt(contentPadding),
                Mathf.RoundToInt(contentPadding),
                Mathf.RoundToInt(contentPadding),
                Mathf.RoundToInt(contentPadding))
        };

        GUILayout.BeginArea(panelRect, GUIContent.none, boxStyle);
        {
            GUILayout.FlexibleSpace();

            GUILayout.Label($"<b>{gameTitle}</b>", titleStyle);

            GUILayout.Space(panelH * 0.06f);

            // Focus first button once so keyboard/gamepad users can press Enter/Space.
            if (!focusedFirstButton)
            {
                GUI.SetNextControlName("StartButton");
            }
            if (GUILayout.Button("Start", buttonStyle, GUILayout.Height(buttonHeight)))
            {
                OnStartGame();
            }
            if (!focusedFirstButton)
            {
                GUI.FocusControl("StartButton");
                focusedFirstButton = true;
            }

            GUILayout.Space(panelH * 0.02f);

            if (GUILayout.Button("Quit", buttonStyle, GUILayout.Height(buttonHeight)))
            {
                QuitGame();
            }

            GUILayout.FlexibleSpace();
        }
        GUILayout.EndArea();
    }

    // Called when Start is pressed: clear/hide the intro overlay.
    private void OnStartGame()
    {
        // Generate a small default grid map and frame the camera before hiding the menu.
        WorldBootstrap.GenerateDefaultGrid();
        // Spawn a SNES-style sprite pawn that patrols the visible area.
        PawnBootstrap.SpawnSpritePawn();

        showMenu = false;
        // The bootstrap GameObject is marked DontDestroyOnLoad, so we simply hide UI here.
        // Additional game flow can be wired in later when a real title scene exists.
    }

    // Called when Quit is pressed: exit the game (or stop play mode in Editor).
    private void QuitGame()
    {
#if UNITY_EDITOR
        EditorApplication.isPlaying = false;
#else
        Application.Quit();
#endif
    }
}



// ===== FILE: Assets/Scripts/UI/SelectionHUD.cs =====
using UnityEngine;

/// <summary>
/// Bottom-left info panel (blank for now) and a right-side gizmo strip.
/// Appears only when a pawn is selected. First gizmo: Assume Control / Release.
/// </summary>
[AddComponentMenu("UI/Selection HUD")]
public class SelectionHUD : MonoBehaviour
{
    [Header("Layout")]
    [SerializeField] private Vector2 panelMinMaxW = new Vector2(260f, 420f);
    [SerializeField] private Vector2 panelMinMaxH = new Vector2(130f, 220f);
    [SerializeField] private float panelWidthPct = 0.28f; // of screen width
    [SerializeField] private float panelHeightPct = 0.22f; // of screen height
    [SerializeField] private float margin = 12f;
    [SerializeField] private float gizmoSpacing = 8f;
    [SerializeField] private float buttonHeightPct = 0.055f; // of screen height

    private GUIStyle _panelStyle;
    private GUIStyle _headerStyle;
    private GUIStyle _buttonStyle;
    private GUIStyle _labelStyle;

    // Expose last-drawn HUD rects in SCREEN (bottom-left origin) space so SelectionController can ignore clicks over HUD.
    public static Rect LastPanelRectBL { get; private set; }
    public static Rect LastGizmoRectBL { get; private set; }

    private void OnGUI()
    {
        var selected = SelectionController.Selected;
        if (selected == null)
        {
            LastPanelRectBL = Rect.zero;
            LastGizmoRectBL = Rect.zero;
            return;
        }

        float sw = Screen.width;
        float sh = Screen.height;

        // Sizing
        float panelW = Mathf.Clamp(sw * panelWidthPct, panelMinMaxW.x, panelMinMaxW.y);
        float panelH = Mathf.Clamp(sh * panelHeightPct, panelMinMaxH.x, panelMinMaxH.y);
        float btnH = Mathf.Max(28f, sh * buttonHeightPct);

        // Panel rect (bottom-left anchor)
        var panelRectGUI = new Rect(margin, sh - panelH - margin, panelW, panelH);

        // Gizmo strip to the right of the panel
        var gizmoRectGUI = new Rect(panelRectGUI.xMax + gizmoSpacing, panelRectGUI.y, Mathf.Max(160f, sw * 0.15f), panelRectGUI.height);

        EnsureStyles(sh);

        // Update BL-space rects for input guarding
        LastPanelRectBL = new Rect(panelRectGUI.xMin, sh - (panelRectGUI.yMin + panelRectGUI.height), panelRectGUI.width, panelRectGUI.height);
        LastGizmoRectBL = new Rect(gizmoRectGUI.xMin, sh - (gizmoRectGUI.yMin + gizmoRectGUI.height), gizmoRectGUI.width, gizmoRectGUI.height);

        // Draw panel (blank content for now; just a header for visual structure)
        GUILayout.BeginArea(panelRectGUI, GUIContent.none, _panelStyle);
        {
            GUILayout.Label("Unit Info", _headerStyle);
            GUILayout.Space(btnH * 0.2f);
            // Blank content placeholder
            GUILayout.Label("(Coming soon)", _labelStyle);
            GUILayout.FlexibleSpace();
        }
        GUILayout.EndArea();

        // Gizmos
        GUILayout.BeginArea(gizmoRectGUI);
        {
            // Assume/Release Control
            bool isControlled = (ControlManager.Controlled == selected);
            string btn = isControlled ? "Release Control" : "Assume Control";
            if (GUILayout.Button(btn, _buttonStyle, GUILayout.Height(btnH)))
            {
                if (isControlled) ControlManager.ReleaseControl();
                else ControlManager.AssumeControl(selected);
            }
            // Keep selection pinned to controlled pawn even if HUD was clicked first
            if (ControlManager.Controlled != null && SelectionController.Selected != ControlManager.Controlled)
            {
                SelectionController.SelectOnly(ControlManager.Controlled);
            }

            GUILayout.Space(btnH * 0.25f);
            GUILayout.Label("Tip: WASD/Arrows to move when controlled.\nSpace = Pause. 1/2/3 = Speed.", _labelStyle);
        }
        GUILayout.EndArea();
    }

    void EnsureStyles(float sh)
    {
        if (_panelStyle == null)
        {
            _panelStyle = new GUIStyle(GUI.skin.box)
            {
                padding = new RectOffset(12, 12, 10, 10)
            };
        }
        if (_headerStyle == null)
        {
            _headerStyle = new GUIStyle(GUI.skin.label)
            {
                alignment = TextAnchor.MiddleLeft,
                fontSize = Mathf.Max(14, Mathf.RoundToInt(sh * 0.028f)),
                fontStyle = FontStyle.Bold
            };
        }
        if (_buttonStyle == null)
        {
            _buttonStyle = new GUIStyle(GUI.skin.button)
            {
                fontSize = Mathf.Max(12, Mathf.RoundToInt(sh * 0.024f))
            };
        }
        if (_labelStyle == null)
        {
            _labelStyle = new GUIStyle(GUI.skin.label)
            {
                fontSize = Mathf.Max(11, Mathf.RoundToInt(sh * 0.02f)),
                wordWrap = true
            };
        }
    }
}



// ===== FILE: Assets/Scripts/Units/SpritePawn.cs =====
using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// A simple SNES-style sprite pawn that patrols a rectangle within the camera view.
/// Generates its own low-res texture and keeps pixels crisp via point filtering + pixel snapping.
/// </summary>
[AddComponentMenu("Units/Sprite Pawn (Test)")]
public class SpritePawn : MonoBehaviour
{
    // Registry for marquee selection
    public static readonly HashSet<SpritePawn> Instances = new HashSet<SpritePawn>();

    [Header("Sprite")]
    [SerializeField] private int spriteWidthPx = 16;
    [SerializeField] private int spriteHeightPx = 24;
    [SerializeField] private int pixelsPerUnit = 16;

    [Header("Palette")]
    [SerializeField] private Color body = new Color(0.82f, 0.80f, 0.65f, 1f);
    [SerializeField] private Color shade = new Color(0.62f, 0.60f, 0.48f, 1f);
    [SerializeField] private Color accent = new Color(0.35f, 0.42f, 0.65f, 1f);
    [SerializeField] private Color outline = new Color(0.10f, 0.10f, 0.10f, 1f);

    [Header("Selection Visual")]
    [SerializeField] private Color ringColor = new Color(1f, 0.92f, 0.25f, 1f);
    [Header("Movement")]
    [SerializeField] private float speed = 3.0f;
    [SerializeField] private float margin = 1.25f;
    [Tooltip("If true, patrol uses diagonal corners to demonstrate 8-direction movement.")]
    [SerializeField] private bool diagonalPatrol = true;
    private Vector3 logicalPos; // continuous (unsnapped) position

    // Patrol corners (world-space)
    private Vector3[] corners = new Vector3[4];
    private int cornerIndex = 0;
    private Camera cam;

    // Visuals
    private GameObject quadGO;
    private Material mat;
    private Material ringMat;
    private GameObject ringGO;
    private bool isControlled;
    private bool isSelected;

    private void Awake()
    {
        cam = Camera.main;
        if (cam == null)
        {
            // Minimal fallback camera if none exists.
            var go = new GameObject("Main Camera");
            cam = go.AddComponent<Camera>();
            go.tag = "MainCamera";
            cam.orthographic = true;
            cam.orthographicSize = 10f;
            cam.transform.position = new Vector3(0f, 10f, 0f);
            cam.transform.rotation = Quaternion.Euler(90f, 0f, 0f);
        }

        CreateVisual();
        EnsureCollider();
        CreateSelectionRing();
        BuildPatrolFromGridOrCamera();
        // Start near the first corner so movement is immediately visible (lift slightly above grid to avoid z-fighting).
        var start = corners[0]; start.y = 0.02f;
        logicalPos = start;
        transform.position = start;
    }

    private void OnEnable()
    {
        Instances.Add(this);
    }

    private void OnDisable()
    {
        Instances.Remove(this);
    }

    void CreateVisual()
    {
        // Create a tiny texture with a simple FF6-like silhouette.
        var tex = new Texture2D(spriteWidthPx, spriteHeightPx, TextureFormat.RGBA32, false);
        tex.filterMode = FilterMode.Point;
        tex.wrapMode = TextureWrapMode.Clamp;

        // Fill transparent
        var pixels = new Color32[spriteWidthPx * spriteHeightPx];
        for (int i = 0; i < pixels.Length; i++) pixels[i] = new Color32(0,0,0,0);

        // Draw a rounded capsule-ish body with outline and a bit of accent
        // Body bounds
        int x0 = 2, x1 = spriteWidthPx - 3;
        int y0 = 3, y1 = spriteHeightPx - 3;

        for (int y = y0; y <= y1; y++)
        {
            for (int x = x0; x <= x1; x++)
            {
                // Rounded mask
                float nx = Mathf.InverseLerp(x0, x1, x) * 2f - 1f;
                float ny = Mathf.InverseLerp(y0, y1, y) * 2f - 1f;
                float r = Mathf.Sqrt(nx * nx * 0.85f + ny * ny);
                if (r <= 1.0f)
                {
                    // Simple shading: darker toward bottom-right
                    float shadeAmt = Mathf.Clamp01(0.35f + 0.35f * (Mathf.InverseLerp(y0, y1, y)));
                    Color c = Color.Lerp(body, shade, shadeAmt * 0.6f);
                    pixels[y * spriteWidthPx + x] = c;
                }
            }
        }

        // Add an accent "cloak" band
        int bandY = Mathf.RoundToInt(Mathf.Lerp(y0, y1, 0.55f));
        for (int x = x0; x <= x1; x++)
        {
            for (int yy = bandY - 2; yy <= bandY + 1; yy++)
            {
                var idx = yy * spriteWidthPx + x;
                if (idx >= 0 && idx < pixels.Length && pixels[idx].a > 0f)
                    pixels[idx] = Color.Lerp(pixels[idx], accent, 0.7f);
            }
        }

        // Outline
        for (int y = y0 - 1; y <= y1 + 1; y++)
        {
            for (int x = x0 - 1; x <= x1 + 1; x++)
            {
                bool isBody = InsideBody(x, y, x0, x1, y0, y1);
                if (!isBody)
                {
                    // If any neighbor is body, draw outline
                    bool neighborBody =
                        InsideBody(x+1,y,x0,x1,y0,y1) || InsideBody(x-1,y,x0,x1,y0,y1) ||
                        InsideBody(x,y+1,x0,x1,y0,y1) || InsideBody(x,y-1,x0,x1,y0,y1);
                    if (neighborBody)
                    {
                        if (x>=0 && x<spriteWidthPx && y>=0 && y<spriteHeightPx)
                            pixels[y * spriteWidthPx + x] = outline;
                    }
                }
            }
        }

        tex.SetPixels32(pixels);
        tex.Apply(false, false);

        // Create material
        Shader shader = Shader.Find(
#if UNITY_2021_2_OR_NEWER
            "Universal Render Pipeline/Unlit"
#else
            "Unlit/Transparent"
#endif
        );
        if (shader == null)
        {
            shader = Shader.Find("Sprites/Default") ?? Shader.Find("Unlit/Texture");
        }
        mat = new Material(shader);
        if (mat.HasProperty("_BaseMap")) mat.SetTexture("_BaseMap", tex);
        if (mat.HasProperty("_MainTex")) mat.SetTexture("_MainTex", tex);
        if (mat.HasProperty("_BaseColor")) mat.SetColor("_BaseColor", Color.white);
        if (mat.HasProperty("_Color")) mat.SetColor("_Color", Color.white);

        // Try to disable backface culling so the sprite is always visible from above.
        if (mat.HasProperty("_Cull")) mat.SetInt("_Cull", 0);          // 0 = Off
        if (mat.HasProperty("_CullMode")) mat.SetInt("_CullMode", 0);  // URP variants

        // Create quad and orient it flat on the ground (XZ plane) so top-down camera sees it.
        quadGO = GameObject.CreatePrimitive(PrimitiveType.Quad);
        quadGO.name = "SpriteQuad";
        quadGO.transform.SetParent(transform, false);
        // Lay flat: rotate +90° around X so the quad's FRONT faces the camera (normal = -Y).
        // (Unity's Quad front originally faces +Z; +90° X rotates it to -Y.)
        quadGO.transform.localRotation = Quaternion.Euler(90f, 0f, 0f);

        // Nudge slightly above ground so it never z-fights with the grid.
        quadGO.transform.localPosition = new Vector3(0f, 0.02f, 0f);
        // Assign material and remove collider
        var renderer = quadGO.GetComponent<MeshRenderer>();
        renderer.sharedMaterial = mat;
        var col = quadGO.GetComponent<Collider>();
        if (col) UnityEngine.Object.Destroy(col);

        // Scale quad to match pixel size / pixels-per-unit
        float worldW = (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit);
        float worldH = (float)spriteHeightPx / Mathf.Max(1, pixelsPerUnit);
        quadGO.transform.localScale = new Vector3(worldW, worldH, 1f);
    }

    void EnsureCollider()
    {
        // Add a thin box collider to make the pawn clickable via raycast.
        var col = gameObject.GetComponent<BoxCollider>();
        if (col == null) col = gameObject.AddComponent<BoxCollider>();
        // Match collider footprint to sprite quad scale (XZ plane).
        float worldW = (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit);
        float worldH = (float)spriteHeightPx / Mathf.Max(1, pixelsPerUnit);
        col.center = new Vector3(0f, 0.05f, 0f);
        col.size = new Vector3(worldW, 0.1f, worldH);
        col.isTrigger = false;
    }

    void CreateSelectionRing()
    {
        // Donut texture (transparent center)
        const int S = 64;
        var tex = new Texture2D(S, S, TextureFormat.RGBA32, false);
        tex.filterMode = FilterMode.Point;
        tex.wrapMode = TextureWrapMode.Clamp;
        var px = new Color32[S * S];
        for (int i = 0; i < px.Length; i++) px[i] = new Color32(0, 0, 0, 0);
        float cx = (S - 1) * 0.5f, cy = (S - 1) * 0.5f;
        float rOuter = S * 0.48f;
        float rInner = S * 0.32f;
        for (int y = 0; y < S; y++)
        {
            for (int x = 0; x < S; x++)
            {
                float dx = x - cx, dy = y - cy;
                float d = Mathf.Sqrt(dx * dx + dy * dy);
                if (d <= rOuter && d >= rInner)
                {
                    px[y * S + x] = ringColor;
                }
            }
        }
        tex.SetPixels32(px); tex.Apply(false, false);

        // Material
        var shader = Shader.Find("Unlit/Transparent") ?? Shader.Find("Sprites/Default") ?? Shader.Find("Unlit/Texture");
        ringMat = new Material(shader);
        if (ringMat.HasProperty("_BaseMap")) ringMat.SetTexture("_BaseMap", tex);
        if (ringMat.HasProperty("_MainTex")) ringMat.SetTexture("_MainTex", tex);
        if (ringMat.HasProperty("_Color")) ringMat.SetColor("_Color", Color.white);
        if (ringMat.HasProperty("_BaseColor")) ringMat.SetColor("_BaseColor", Color.white);
        ringMat.renderQueue = 3000; // transparent

        // Quad
        ringGO = GameObject.CreatePrimitive(PrimitiveType.Quad);
        ringGO.name = "SelectionRing";
        ringGO.transform.SetParent(transform, false);
        // Lay flat in XZ like the sprite
        ringGO.transform.localRotation = Quaternion.Euler(90f, 0f, 0f);
        // Slightly above sprite to avoid z-fighting and be visible around it
        ringGO.transform.localPosition = new Vector3(0f, 0.025f, 0f);
        // Scale ring to be a bit wider than sprite footprint
        float worldW = (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit);
        float scale = worldW * 1.6f;
        ringGO.transform.localScale = new Vector3(scale, scale, 1f);
        var rr = ringGO.GetComponent<MeshRenderer>();
        rr.sharedMaterial = ringMat;
        var rc = ringGO.GetComponent<Collider>(); if (rc) UnityEngine.Object.Destroy(rc);
        ringGO.SetActive(false);
    }

    public void SetControlled(bool on)
    {
        isControlled = on;
        // Visual cue: brighten the ring if controlled
        if (ringGO != null && ringMat != null)
        {
            // Slightly larger & brighter while controlled
            float worldW = (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit);
            float scale = worldW * (on ? 1.9f : 1.6f);
            ringGO.transform.localScale = new Vector3(scale, scale, 1f);

            var col = ringColor;
            if (on) col = Color.Lerp(ringColor, Color.white, 0.3f);
            if (ringMat.HasProperty("_Color")) ringMat.SetColor("_Color", col);
            if (ringMat.HasProperty("_BaseColor")) ringMat.SetColor("_BaseColor", col);
        }
    }

    public void SetSelected(bool on)
    {
        isSelected = on;
        if (ringGO != null) ringGO.SetActive(on || isControlled);
    }

    bool InsideBody(int x, int y, int x0, int x1, int y0, int y1)
    {
        if (x < x0 || x > x1 || y < y0 || y > y1) return false;
        float nx = Mathf.InverseLerp(x0, x1, x) * 2f - 1f;
        float ny = Mathf.InverseLerp(y0, y1, y) * 2f - 1f;
        float r = Mathf.Sqrt(nx * nx * 0.85f + ny * ny);
        return r <= 1.0f;
    }

    void BuildPatrolFromGridOrCamera()
    {
        // Prefer the procedural grid to keep the pawn on the grass.
#if UNITY_2022_2_OR_NEWER
        var grid = UnityEngine.Object.FindAnyObjectByType<SimpleGridMap>();
#else
        var grid = UnityEngine.Object.FindObjectOfType<SimpleGridMap>();
#endif
        if (grid != null)
        {
            BuildPatrolFromGrid(grid);
        }
        else
        {
            BuildPatrolFromCamera();
        }
    }

    void BuildPatrolFromGrid(SimpleGridMap grid)
    {
        // Grid generated from (0,0) to (width*tileSize, height*tileSize) in world space.
        float minX = 0f + margin;
        float minZ = 0f + margin;
        float maxX = grid.width * grid.tileSize - margin;
        float maxZ = grid.height * grid.tileSize - margin;

        if (diagonalPatrol)
        {
            // Diagonal loop to demonstrate 8-direction movement:
            // bottom-left -> top-right -> top-left -> bottom-right -> repeat
            corners[0] = new Vector3(minX, 0f, minZ);
            corners[1] = new Vector3(maxX, 0f, maxZ);
            corners[2] = new Vector3(minX, 0f, maxZ);
            corners[3] = new Vector3(maxX, 0f, minZ);
        }
        else
        {
            // Axis-aligned rectangle
            corners[0] = new Vector3(minX, 0f, minZ);
            corners[1] = new Vector3(maxX, 0f, minZ);
            corners[2] = new Vector3(maxX, 0f, maxZ);
            corners[3] = new Vector3(minX, 0f, maxZ);
        }
        cornerIndex = 1;
    }

    void BuildPatrolFromCamera()
    {
        var (minX, maxX, minZ, maxZ) = PixelCameraHelper.OrthoWorldBounds(cam);
        minX += margin; maxX -= margin; minZ += margin; maxZ -= margin;
        // Clamp in case margin exceeds bounds
        if (minX > maxX) { float c = (minX + maxX) * 0.5f; minX = maxX = c; }
        if (minZ > maxZ) { float c = (minZ + maxZ) * 0.5f; minZ = maxZ = c; }

        corners[0] = new Vector3(minX, 0f, minZ);
        corners[1] = new Vector3(maxX, 0f, minZ);
        corners[2] = new Vector3(maxX, 0f, maxZ);
        corners[3] = new Vector3(minX, 0f, maxZ);
        cornerIndex = 1; // head toward the second corner first
    }

    private void Update()
    {
        if (corners == null || corners.Length < 4) return;

        // Continuous motion in logical space (no snap)
        Vector3 target = corners[cornerIndex]; target.y = 0.02f;
        Vector3 to = target - logicalPos; to.y = 0f;
        float dist = to.magnitude;

        // Pixel-based arrival threshold to avoid getting stuck due to snapping.
        float upp = PixelCameraHelper.WorldUnitsPerPixel(cam);
        float arriveEps = Mathf.Max(upp * 1.5f, 0.02f);

        if (dist <= arriveEps)
        {
            cornerIndex = (cornerIndex + 1) % 4;
            target = corners[cornerIndex];
            target.y = 0.02f;
            to = target - logicalPos;
            to.y = 0f;
            dist = to.magnitude;
        }

        Vector3 dir = (dist > 1e-8f) ? (to / dist) : Vector3.zero;
        // Advance logical (unsnapped) position
        logicalPos += dir * speed * Time.deltaTime;
        logicalPos.y = 0.02f;

        // Clamp if we overshoot target this frame (prevents oscillation near corners)
        Vector3 newTo = target - logicalPos; newTo.y = 0f;
        if (Vector3.Dot(newTo, to) < 0f) // passed the target
        {
            logicalPos = target;
        }

        // Render at pixel-snapped position
        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
    }
}



// ===== FILE: Assets/Scripts/World/SimpleGridMap.cs =====
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Procedurally builds a flat checkerboard grid as a single mesh with two submeshes (A/B colors).
/// Keeps dependencies minimal and works without any art assets.
/// </summary>
[AddComponentMenu("World/Simple Grid Map")]
public class SimpleGridMap : MonoBehaviour
{
    [Header("Size")]
    [Min(1)] public int width = 32;
    [Min(1)] public int height = 32;
    [Min(0.1f)] public float tileSize = 1f;

    [Header("Palette")]
    public Color colorA = new Color(0.42f, 0.48f, 0.33f); // muted grass
    public Color colorB = new Color(0.36f, 0.42f, 0.28f); // darker tile

    MeshFilter _filter;
    MeshRenderer _renderer;

    /// <summary>Rebuilds using serialized dimensions.</summary>
    public void Build()
    {
        Build(width, height, tileSize, colorA, colorB);
    }

    /// <summary>Build grid with explicit parameters.</summary>
    public void Build(int w, int h, float size, Color a, Color b)
    {
        width = Mathf.Max(1, w);
        height = Mathf.Max(1, h);
        tileSize = Mathf.Max(0.1f, size);
        colorA = a;
        colorB = b;

        EnsureComponents();
        var mesh = GenerateMesh(width, height, tileSize);
        _filter.sharedMesh = mesh;

        // Two materials for the two submeshes
        var matA = CreateMaterial();
        var matB = CreateMaterial();
        SetMaterialColor(matA, colorA);
        SetMaterialColor(matB, colorB);
        _renderer.sharedMaterials = new[] { matA, matB };
    }

    void EnsureComponents()
    {
        if (_filter == null)
            _filter = gameObject.GetComponent<MeshFilter>() ?? gameObject.AddComponent<MeshFilter>();
        if (_renderer == null)
            _renderer = gameObject.GetComponent<MeshRenderer>() ?? gameObject.AddComponent<MeshRenderer>();
    }

    Mesh GenerateMesh(int w, int h, float t)
    {
        int tiles = w * h;
        int vCount = tiles * 4;

        var verts = new Vector3[vCount];
        var uvs = new Vector2[vCount];
        var norms = new Vector3[vCount];

        // Two submeshes for checkerboard coloring
        var trisA = new List<int>(tiles * 6 / 2 + 6);
        var trisB = new List<int>(tiles * 6 / 2 + 6);

        int vi = 0;
        for (int y = 0; y < h; y++)
        {
            for (int x = 0; x < w; x++)
            {
                float x0 = x * t;
                float x1 = (x + 1) * t;
                float z0 = y * t;
                float z1 = (y + 1) * t;

                //  v2---v3
                //  |  / |
                //  v0---v1
                int v0 = vi + 0;
                int v1 = vi + 1;
                int v2 = vi + 2;
                int v3 = vi + 3;

                verts[v0] = new Vector3(x0, 0f, z0);
                verts[v1] = new Vector3(x1, 0f, z0);
                verts[v2] = new Vector3(x0, 0f, z1);
                verts[v3] = new Vector3(x1, 0f, z1);

                uvs[v0] = new Vector2(0f, 0f);
                uvs[v1] = new Vector2(1f, 0f);
                uvs[v2] = new Vector2(0f, 1f);
                uvs[v3] = new Vector2(1f, 1f);

                norms[v0] = Vector3.up;
                norms[v1] = Vector3.up;
                norms[v2] = Vector3.up;
                norms[v3] = Vector3.up;

                // Triangles (front face up)
                // v0, v1, v2 and v2, v1, v3 (clockwise when viewed from above)
                var which = ((x + y) & 1) == 0 ? trisA : trisB;
                which.Add(v0); which.Add(v1); which.Add(v2);
                which.Add(v2); which.Add(v1); which.Add(v3);

                vi += 4;
            }
        }

        var mesh = new Mesh();
#if UNITY_2017_3_OR_NEWER
        if (vCount > 65000) mesh.indexFormat = UnityEngine.Rendering.IndexFormat.UInt32;
#endif
        mesh.name = "SimpleGridMap";
        mesh.vertices = verts;
        mesh.uv = uvs;
        mesh.normals = norms;
        mesh.subMeshCount = 2;
        mesh.SetTriangles(trisA, 0, true);
        mesh.SetTriangles(trisB, 1, true);
        mesh.RecalculateBounds();
        return mesh;
    }

    static Material CreateMaterial()
    {
        Shader shader = FindFirstShader(
#if UNITY_2021_2_OR_NEWER
            "Universal Render Pipeline/Unlit",
#endif
            "Unlit/Color",
            "HDRP/Unlit",
            "Sprites/Default",
            "Standard"
        );
        var mat = new Material(shader);
        // Make it a bit less shiny if Standard is used
        if (mat.HasProperty("_Glossiness")) mat.SetFloat("_Glossiness", 0f);
        if (mat.HasProperty("_Metallic")) mat.SetFloat("_Metallic", 0f);
        return mat;
    }

    static Shader FindFirstShader(params string[] names)
    {
        foreach (var n in names)
        {
            var s = Shader.Find(n);
            if (s != null) return s;
        }
        // Fallback to any available shader
        return Shader.Find("Standard") ?? Shader.Find("Sprites/Default");
    }

    static void SetMaterialColor(Material m, Color c)
    {
        // Try common color property names across pipelines
        if (m.HasProperty("_BaseColor")) m.SetColor("_BaseColor", c);
        if (m.HasProperty("_Color")) m.SetColor("_Color", c);
        if (m.HasProperty("_TintColor")) m.SetColor("_TintColor", c);
    }
}



// ===== FILE: Assets/TutorialInfo/Scripts/Editor/ReadmeEditor.cs =====
﻿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System;
using System.IO;
using System.Reflection;

[CustomEditor(typeof(Readme))]
[InitializeOnLoad]
public class ReadmeEditor : Editor
{
    static string s_ShowedReadmeSessionStateName = "ReadmeEditor.showedReadme";
    
    static string s_ReadmeSourceDirectory = "Assets/TutorialInfo";

    const float k_Space = 16f;

    static ReadmeEditor()
    {
        EditorApplication.delayCall += SelectReadmeAutomatically;
    }

    static void RemoveTutorial()
    {
        if (EditorUtility.DisplayDialog("Remove Readme Assets",
            
            $"All contents under {s_ReadmeSourceDirectory} will be removed, are you sure you want to proceed?",
            "Proceed",
            "Cancel"))
        {
            if (Directory.Exists(s_ReadmeSourceDirectory))
            {
                FileUtil.DeleteFileOrDirectory(s_ReadmeSourceDirectory);
                FileUtil.DeleteFileOrDirectory(s_ReadmeSourceDirectory + ".meta");
            }
            else
            {
                Debug.Log($"Could not find the Readme folder at {s_ReadmeSourceDirectory}");
            }

            var readmeAsset = SelectReadme();
            if (readmeAsset != null)
            {
                var path = AssetDatabase.GetAssetPath(readmeAsset);
                FileUtil.DeleteFileOrDirectory(path + ".meta");
                FileUtil.DeleteFileOrDirectory(path);
            }

            AssetDatabase.Refresh();
        }
    }

    static void SelectReadmeAutomatically()
    {
        if (!SessionState.GetBool(s_ShowedReadmeSessionStateName, false))
        {
            var readme = SelectReadme();
            SessionState.SetBool(s_ShowedReadmeSessionStateName, true);

            if (readme && !readme.loadedLayout)
            {
                LoadLayout();
                readme.loadedLayout = true;
            }
        }
    }

    static void LoadLayout()
    {
        var assembly = typeof(EditorApplication).Assembly;
        var windowLayoutType = assembly.GetType("UnityEditor.WindowLayout", true);
        var method = windowLayoutType.GetMethod("LoadWindowLayout", BindingFlags.Public | BindingFlags.Static);
        method.Invoke(null, new object[] { Path.Combine(Application.dataPath, "TutorialInfo/Layout.wlt"), false });
    }

    static Readme SelectReadme()
    {
        var ids = AssetDatabase.FindAssets("Readme t:Readme");
        if (ids.Length == 1)
        {
            var readmeObject = AssetDatabase.LoadMainAssetAtPath(AssetDatabase.GUIDToAssetPath(ids[0]));

            Selection.objects = new UnityEngine.Object[] { readmeObject };

            return (Readme)readmeObject;
        }
        else
        {
            Debug.Log("Couldn't find a readme");
            return null;
        }
    }

    protected override void OnHeaderGUI()
    {
        var readme = (Readme)target;
        Init();

        var iconWidth = Mathf.Min(EditorGUIUtility.currentViewWidth / 3f - 20f, 128f);

        GUILayout.BeginHorizontal("In BigTitle");
        {
            if (readme.icon != null)
            {
                GUILayout.Space(k_Space);
                GUILayout.Label(readme.icon, GUILayout.Width(iconWidth), GUILayout.Height(iconWidth));
            }
            GUILayout.Space(k_Space);
            GUILayout.BeginVertical();
            {

                GUILayout.FlexibleSpace();
                GUILayout.Label(readme.title, TitleStyle);
                GUILayout.FlexibleSpace();
            }
            GUILayout.EndVertical();
            GUILayout.FlexibleSpace();
        }
        GUILayout.EndHorizontal();
    }

    public override void OnInspectorGUI()
    {
        var readme = (Readme)target;
        Init();

        foreach (var section in readme.sections)
        {
            if (!string.IsNullOrEmpty(section.heading))
            {
                GUILayout.Label(section.heading, HeadingStyle);
            }

            if (!string.IsNullOrEmpty(section.text))
            {
                GUILayout.Label(section.text, BodyStyle);
            }

            if (!string.IsNullOrEmpty(section.linkText))
            {
                if (LinkLabel(new GUIContent(section.linkText)))
                {
                    Application.OpenURL(section.url);
                }
            }

            GUILayout.Space(k_Space);
        }

        if (GUILayout.Button("Remove Readme Assets", ButtonStyle))
        {
            RemoveTutorial();
        }
    }

    bool m_Initialized;

    GUIStyle LinkStyle
    {
        get { return m_LinkStyle; }
    }

    [SerializeField]
    GUIStyle m_LinkStyle;

    GUIStyle TitleStyle
    {
        get { return m_TitleStyle; }
    }

    [SerializeField]
    GUIStyle m_TitleStyle;

    GUIStyle HeadingStyle
    {
        get { return m_HeadingStyle; }
    }

    [SerializeField]
    GUIStyle m_HeadingStyle;

    GUIStyle BodyStyle
    {
        get { return m_BodyStyle; }
    }

    [SerializeField]
    GUIStyle m_BodyStyle;

    GUIStyle ButtonStyle
    {
        get { return m_ButtonStyle; }
    }

    [SerializeField]
    GUIStyle m_ButtonStyle;

    void Init()
    {
        if (m_Initialized)
            return;
        m_BodyStyle = new GUIStyle(EditorStyles.label);
        m_BodyStyle.wordWrap = true;
        m_BodyStyle.fontSize = 14;
        m_BodyStyle.richText = true;

        m_TitleStyle = new GUIStyle(m_BodyStyle);
        m_TitleStyle.fontSize = 26;

        m_HeadingStyle = new GUIStyle(m_BodyStyle);
        m_HeadingStyle.fontStyle = FontStyle.Bold;
        m_HeadingStyle.fontSize = 18;

        m_LinkStyle = new GUIStyle(m_BodyStyle);
        m_LinkStyle.wordWrap = false;

        // Match selection color which works nicely for both light and dark skins
        m_LinkStyle.normal.textColor = new Color(0x00 / 255f, 0x78 / 255f, 0xDA / 255f, 1f);
        m_LinkStyle.stretchWidth = false;

        m_ButtonStyle = new GUIStyle(EditorStyles.miniButton);
        m_ButtonStyle.fontStyle = FontStyle.Bold;

        m_Initialized = true;
    }

    bool LinkLabel(GUIContent label, params GUILayoutOption[] options)
    {
        var position = GUILayoutUtility.GetRect(label, LinkStyle, options);

        Handles.BeginGUI();
        Handles.color = LinkStyle.normal.textColor;
        Handles.DrawLine(new Vector3(position.xMin, position.yMax), new Vector3(position.xMax, position.yMax));
        Handles.color = Color.white;
        Handles.EndGUI();

        EditorGUIUtility.AddCursorRect(position, MouseCursor.Link);

        return GUI.Button(position, label, LinkStyle);
    }
}


// ===== FILE: Assets/TutorialInfo/Scripts/Readme.cs =====
﻿using System;
using UnityEngine;

public class Readme : ScriptableObject
{
    public Texture2D icon;
    public string title;
    public Section[] sections;
    public bool loadedLayout;

    [Serializable]
    public class Section
    {
        public string heading, text, linkText, url;
    }
}


