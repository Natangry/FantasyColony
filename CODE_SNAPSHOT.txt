// ===== FILE: Assets/Scripts/Boot/CameraBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures the main camera follows the currently controlled pawn and supports free WASD panning.
/// </summary>
public static class CameraBootstrap
{
    private static bool added;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureCameraFollower()
    {
        if (added) return;
        var cam = Camera.main;
        if (cam == null)
        {
            // Minimal fallback camera; WorldBootstrap may reconfigure later.
            var go = new GameObject("Main Camera");
            cam = go.AddComponent<Camera>();
            go.tag = "MainCamera";
            cam.orthographic = true;
            cam.orthographicSize = 10f;
            cam.transform.position = new Vector3(0f, 10f, 0f);
            cam.transform.rotation = Quaternion.Euler(90f, 0f, 0f);
        }

        if (cam.GetComponent<FollowControlledPawn>() == null)
            cam.gameObject.AddComponent<FollowControlledPawn>();

        // Add free camera controls for when no pawn is controlled.
        if (cam.GetComponent<FreeCameraController>() == null)
            cam.gameObject.AddComponent<FreeCameraController>();

        added = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/InteractionBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures a PawnInteractionManager exists at runtime to coordinate pawn-to-pawn interactions.
/// </summary>
public static class InteractionBootstrap
{
    private static bool spawned;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureInteractionManager()
    {
        if (spawned) return;
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<PawnInteractionManager>();
#else
        var existing = Object.FindObjectOfType<PawnInteractionManager>();
#endif
        if (existing != null) { spawned = true; return; }

        var go = new GameObject("PawnInteractionManager (Auto)");
        Object.DontDestroyOnLoad(go);
        go.AddComponent<PawnInteractionManager>();
        spawned = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/IntroBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures the temporary IntroScreen (Start/Quit) exists when the game boots,
/// independent of scene setup or build order.
/// </summary>
public static class IntroBootstrap
{
    private static bool spawnedOnce;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureIntro()
    {
#if NO_INTRO
        return;
#endif
        if (spawnedOnce)
            return;

        // If an IntroScreen already exists in the scene (FindAnyObjectByType/FindObjectOfType), do nothing.
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<IntroScreen>();
#else
        var existing = Object.FindObjectOfType<IntroScreen>();
#endif
        if (existing != null)
        {
            spawnedOnce = true;
            return;
        }

        // Otherwise, create one.
        var go = new GameObject("IntroScreen (Auto)");
        // Keep it alive across scene loads; the IntroScreen script can hide/clear itself on Start.
        Object.DontDestroyOnLoad(go);
        go.AddComponent<IntroScreen>();

        spawnedOnce = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/PauseBootstrap.cs =====
using UnityEngine;

public static class PauseBootstrap
{
    private static bool spawned;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsurePauseController()
    {
#if NO_INTRO
        // Even if NO_INTRO is defined, we still want pause in gameplay.
#endif
        if (spawned) return;
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<PauseController>();
#else
        var existing = Object.FindObjectOfType<PauseController>();
#endif
        GameObject go;
        if (existing != null)
        {
            go = existing.gameObject;
        }
        else
        {
            go = new GameObject("PauseController (Auto)");
            Object.DontDestroyOnLoad(go);
            go.AddComponent<PauseController>();
        }

        if (go.GetComponent<GameClock>() == null) go.AddComponent<GameClock>();
        if (go.GetComponent<GameCalendar>() == null) go.AddComponent<GameCalendar>();
        if (go.GetComponent<ClockHUD>() == null) go.AddComponent<ClockHUD>(); // draws under speed (top-right)
        spawned = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/PawnBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Helper to spawn a single SNES-style sprite pawn into the world.
/// </summary>
public static class PawnBootstrap
{
    public static GameObject SpawnSpritePawn()
    {
        // World root
        var root = GameObject.Find("World");
        if (root == null)
        {
            root = new GameObject("World");
        }

        // Avoid duplicates if already spawned.
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<SpritePawn>();
#else
        var existing = Object.FindObjectOfType<SpritePawn>();
#endif
        if (existing != null)
        {
            return existing.gameObject;
        }

        var pawnGO = new GameObject("TestPawn");
        pawnGO.transform.SetParent(root.transform, false);
        pawnGO.AddComponent<SpritePawn>();
        return pawnGO;
    }

    /// <summary>
    /// Spawns a second pawn. Safe to call multiple times; only creates if not already present.
    /// </summary>
    public static GameObject SpawnSecondPawn()
    {
        var root = GameObject.Find("World");
        if (root == null)
        {
            root = new GameObject("World");
        }
        var existingGO = GameObject.Find("TestPawn_2");
        if (existingGO != null) return existingGO;

        var pawn2 = new GameObject("TestPawn_2");
        pawn2.transform.SetParent(root.transform, false);
        pawn2.AddComponent<SpritePawn>(); // same visuals/behavior; will idle-wander by default
        return pawn2;
    }
}



// ===== FILE: Assets/Scripts/Boot/SelectionBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures a SelectionController exists at runtime in any scene.
/// (Updated for marquee selection support)
/// </summary>
public static class SelectionBootstrap
{
    private static bool spawned;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureSelectionController()
    {
        if (spawned) return;
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<SelectionController>();
#else
        var existing = Object.FindObjectOfType<SelectionController>();
#endif
        if (existing != null) { spawned = true; return; }

        var go = new GameObject("SelectionController (Auto)");
        Object.DontDestroyOnLoad(go);
        go.AddComponent<SelectionController>();
        // HUD that draws the bottom-left info panel and right-side gizmos
        go.AddComponent<SelectionHUD>();
        spawned = true;
    }
}



// ===== FILE: Assets/Scripts/Boot/WorldBootstrap.cs =====
using UnityEngine;

/// <summary>
/// One-time helper to generate a small default grid world and frame the camera.
/// </summary>
public static class WorldBootstrap
{
    public static void GenerateDefaultGrid(int w = 128, int h = 128, float tile = 1f)
    {
        // Create/find root
        var root = GameObject.Find("World");
        if (root == null)
        {
            root = new GameObject("World");
        }

        // Ensure Buildings container exists so placed stations have a parent
        var buildings = root.transform.Find("Buildings");
        if (buildings == null)
        {
            var goBuild = new GameObject("Buildings");
            goBuild.transform.SetParent(root.transform, false);
            goBuild.transform.localPosition = Vector3.zero;
        }

        // Create/find grid
        var grid = root.GetComponentInChildren<SimpleGridMap>();
        if (grid == null)
        {
            var gridGO = new GameObject("Grid");
            gridGO.transform.SetParent(root.transform, false);
            grid = gridGO.AddComponent<SimpleGridMap>();
        }

        grid.Build(w, h, tile, grid.colorA, grid.colorB);

        EnsureDirectionalLight();
        FrameCameraToGrid(grid);
    }

    static void EnsureDirectionalLight()
    {
        Light dir = null;
#if UNITY_2022_2_OR_NEWER
        var lights = Object.FindObjectsByType<Light>(FindObjectsSortMode.None);
        foreach (var l in lights) { if (l != null && l.type == LightType.Directional) { dir = l; break; } }
#else
        var lights = Object.FindObjectsOfType<Light>();
        foreach (var l in lights) { if (l != null && l.type == LightType.Directional) { dir = l; break; } }
#endif
        if (dir == null)
        {
            var go = new GameObject("Directional Light");
            dir = go.AddComponent<Light>();
            dir.type = LightType.Directional;
            dir.intensity = 1.0f;
            go.transform.rotation = Quaternion.Euler(50f, -30f, 0f);
        }
    }

    static void FrameCameraToGrid(SimpleGridMap grid)
    {
        var cam = Camera.main;
        if (cam == null)
        {
            var camGO = new GameObject("Main Camera");
            cam = camGO.AddComponent<Camera>();
            // Make sure it's tagged correctly so Camera.main works later.
            camGO.tag = "MainCamera";
        }

        // Orthographic top-down
        cam.orthographic = true;
        cam.nearClipPlane = 0.1f;
        cam.farClipPlane = 100f;
        cam.transform.rotation = Quaternion.Euler(90f, 0f, 0f);

        // Compute world center
        float wWorld = grid.width * grid.tileSize;
        float hWorld = grid.height * grid.tileSize;
        var center = new Vector3(
            (grid.width * grid.tileSize) * 0.5f - (grid.tileSize * 0.5f),
            0f,
            (grid.height * grid.tileSize) * 0.5f - (grid.tileSize * 0.5f)
        );

        // Position camera above center
        cam.transform.position = new Vector3(center.x, 10f, center.z);

        // Fit orthographic size to show most of the grid with a small margin
        float aspect = (Screen.height > 0) ? (Screen.width / (float)Screen.height) : (16f / 9f);
        float halfHeight = hWorld * 0.5f;
        float halfWidth = wWorld * 0.5f;
        float sizeToFit = Mathf.Max(halfHeight, halfWidth / Mathf.Max(0.1f, aspect));
        // Keep a consistent default start zoom across all map sizes.
        // Do not auto-fit; use the camera's existing orthographicSize configured in the scene.
    }
}



// ===== FILE: Assets/Scripts/Build/BuildBootstrap.cs =====
using UnityEngine;
using FantasyColony.Defs;

public static class BuildBootstrap
{
    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)] private static void Auto() => Ensure();
    public static void Ensure()
    {
        var go = GameObject.Find("BuildSystems (Auto)");
        if (go == null)
        {
            go = new GameObject("BuildSystems (Auto)");
        }

        // Ensure single placement tool
        var tools = go.GetComponents<BuildPlacementTool>();
        for (int i = 1; i < tools.Length; i++) Object.Destroy(tools[i]);
        if (tools.Length == 0) go.AddComponent<BuildPlacementTool>();

        if (go.GetComponent<BuildModeController>() == null) go.AddComponent<BuildModeController>();
        if (go.GetComponent<BuildPaletteHUD>() == null) go.AddComponent<BuildPaletteHUD>();
        if (go.GetComponent<JobService>() == null) go.AddComponent<JobService>();
        if (go.GetComponent<BuildToggleHUD>() == null) go.AddComponent<BuildToggleHUD>();
        if (go.GetComponent<BuildHotkeyListener>() == null) go.AddComponent<BuildHotkeyListener>();

        DefDatabase.LoadAll();
        VisualRegistry.Build(Application.isEditor);
        SpriteVisualFactory2D.Build();
    }
}


// ===== FILE: Assets/Scripts/Build/BuildHotkeyListener.cs =====
using UnityEngine;

/// <summary>
/// Global listener that guarantees the B hotkey toggles Build Mode even if
/// the BuildModeController hasn't been instantiated yet.
/// </summary>
public class BuildHotkeyListener : MonoBehaviour
{
    private void Toggle()
    {
        if (IntroScreen.IsVisible) return; // ignore while at the intro menu

        BuildBootstrap.Ensure();
        var bm = BuildModeController.Instance;
        if (bm == null)
        {
            var go = GameObject.Find("BuildSystems (Auto)");
            if (go == null) go = new GameObject("BuildSystems (Auto)");
            bm = go.GetComponent<BuildModeController>();
            if (bm == null) bm = go.AddComponent<BuildModeController>();
        }
        bm.ToggleBuildMode();
    }

    private void Update()
    {
        if (Input.GetKeyDown(KeyCode.B))
        {
            Toggle();
        }
    }

    // Backstop for projects configured with the new Input System where GetKeyDown might be ignored
    private void OnGUI()
    {
        var e = Event.current;
        if (e != null && e.type == EventType.KeyDown && e.keyCode == KeyCode.B)
        {
            Toggle();
            e.Use();
        }
    }
}



// ===== FILE: Assets/Scripts/Build/BuildModeController.cs =====
using UnityEngine;

public enum BuildTool
{
    None = 0,
    PlaceConstructionBoard = 1,
}

public class BuildModeController : MonoBehaviour
{
    public static BuildModeController Instance { get; private set; }

    [SerializeField] private bool isActive;
    [SerializeField] private BuildTool currentTool = BuildTool.None;

    public bool IsActive => isActive;
    public BuildTool CurrentTool => currentTool;

    private void Awake()
    {
        if (Instance != null && Instance != this) { Destroy(gameObject); return; }
        Instance = this;
    }

    private void Update()
    {
        if (Input.GetKeyDown(KeyCode.B))
        {
            ToggleBuildMode();
        }

        // ESC cancels tool or exits build mode
        if (isActive && Input.GetKeyDown(KeyCode.Escape))
        {
            if (currentTool != BuildTool.None)
                SetTool(BuildTool.None);
            else
                SetActive(false);
        }
    }

    public void ToggleBuildMode() => SetActive(!isActive);

    public void SetActive(bool active)
    {
        isActive = active;
        if (!isActive) SetTool(BuildTool.None);
    }

    public void SetTool(BuildTool tool)
    {
        currentTool = tool;
        var toolComp = GetComponent<BuildPlacementTool>();
        if (toolComp == null) toolComp = gameObject.AddComponent<BuildPlacementTool>();
        toolComp.SetTool(tool);
    }

    public static bool UniqueBuildingExists<T>() where T : Building
    {
        // "Any" is acceptable and faster in 2023+; fallback for older Unity.
#if UNITY_2023_1_OR_NEWER
        return Object.FindAnyObjectByType<T>() != null;
#else
        return Object.FindObjectOfType<T>() != null;
#endif
    }
}


// ===== FILE: Assets/Scripts/Build/BuildPaletteHUD.cs =====
using UnityEngine;

/// <summary>
/// Simple build palette shown only while Build Mode is active.
/// </summary>
public class BuildPaletteHUD : MonoBehaviour
{
    [SerializeField] private Vector2 offset = new Vector2(12f, 120f);
    [SerializeField] private float widthPct = 0.28f;
    [SerializeField] private float heightPct = 0.65f;
    [SerializeField] private float fontPct = 0.03f; // scale with resolution
    [SerializeField] private float buttonHPct = 0.05f;

    private GUIStyle _box;
    private GUIStyle _button;
    private GUIStyle _label;
    private Vector2 _scroll;
    private GUIStyle _itemLabel;
    private GUIStyle _hint;

    private void Ensure()
    {
        if (_box == null)
        {
            _box = new GUIStyle(GUI.skin.box);
        }
        if (_button == null)
        {
            _button = new GUIStyle(GUI.skin.button)
            {
                alignment = TextAnchor.MiddleCenter,
                fontStyle = FontStyle.Bold
            };
        }
        if (_label == null)
        {
            _label = new GUIStyle(GUI.skin.label) { alignment = TextAnchor.MiddleLeft, fontStyle = FontStyle.Bold };
            _label.normal.textColor = Color.white;
        }
        if (_itemLabel == null)
        {
            _itemLabel = new GUIStyle(GUI.skin.label) { alignment = TextAnchor.MiddleLeft };
            _itemLabel.normal.textColor = Color.white;
        }
        if (_hint == null)
        {
            _hint = new GUIStyle(GUI.skin.label) { alignment = TextAnchor.MiddleLeft, fontStyle = FontStyle.Italic };
            _hint.normal.textColor = new Color(1f, 1f, 1f, 0.85f);
        }
    }

    private void OnGUI()
    {
        var bm = BuildModeController.Instance;
        if (IntroScreen.IsVisible) return; // never show on intro
        if (bm == null || !bm.IsActive) return;

        Ensure();

        int fontSize = Mathf.RoundToInt(Mathf.Max(14f, Screen.height * fontPct));
        _button.fontSize = fontSize;
        _label.fontSize = fontSize;
        _itemLabel.fontSize = Mathf.RoundToInt(fontSize * 0.9f);
        _hint.fontSize = Mathf.RoundToInt(fontSize * 0.85f);
        _hint.wordWrap = true;

        float w = Mathf.Max(260f, Screen.width * widthPct);
        float h = Mathf.Max(260f, Screen.height * heightPct);
        Rect r = new Rect(offset.x, offset.y, w, h);
        GUILayout.BeginArea(r, "Build Palette", _box);

        GUILayout.Label("Stations", _label);
        GUILayout.Space(6f);
        _scroll = GUILayout.BeginScrollView(_scroll);

        // Construction Board entry
        bool exists = BuildModeController.UniqueBuildingExists<ConstructionBoard>();
        using (new GUILayout.HorizontalScope())
        {
            GUILayout.Label("Construction Board (Free)", _itemLabel, GUILayout.ExpandWidth(true));
            GUI.enabled = !exists;
            float btnH = Mathf.Max(32f, Screen.height * buttonHPct);
            float btnW = Mathf.Max(120f, _button.CalcSize(new GUIContent(exists ? "Placed" : "Place")).x + 24f);
            btnW = Mathf.Max(btnW, fontSize * 6f);
            if (GUILayout.Button(exists ? "Placed" : "Place", _button, GUILayout.Width(btnW), GUILayout.Height(btnH)))
            {
                bm.SetTool(BuildTool.PlaceConstructionBoard);
            }
            GUI.enabled = true;
        }

        if (bm.CurrentTool == BuildTool.PlaceConstructionBoard)
        {
            GUILayout.Space(6f);
            GUILayout.Label("Tip: Move the mouse to position the ghost. Left-click to place, Right-click to cancel.", _hint);
        }

        GUILayout.EndScrollView();

        GUILayout.FlexibleSpace();
        GUILayout.Space(8f);
        if (GUILayout.Button("Exit Build Mode (B)", _button, GUILayout.Height(Mathf.Max(36f, Screen.height * (buttonHPct * 0.9f)))))
        {
            bm.SetActive(false);
        }

        GUILayout.EndArea();
    }
}

internal struct GUIStateScope : System.IDisposable
{
    private readonly bool prev;
    public GUIStateScope(bool enabled) { prev = GUI.enabled; GUI.enabled = enabled; }
    public void Dispose() { GUI.enabled = prev; }
}


// ===== FILE: Assets/Scripts/Build/BuildPlacementTool.cs =====
using System;
using System.Reflection;
using UnityEngine;
using FantasyColony.Defs;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem; // New Input System support
#endif

/// <summary>
/// Handles in-world placement of buildings while a placement tool is active.
/// This version targets a top-down world on the XZ plane (y = up).
/// </summary>
public class BuildPlacementTool : MonoBehaviour
{
    private BuildTool _tool = BuildTool.None;
    private GameObject _ghost;
    private MeshRenderer _ghostMr;
    private GameObject _marker;
    private bool _canPlace;
    private Vector3 _snapWorldPos;
    private Vector2Int _snapGridPos;
    private Vector2Int _footSize = Vector2Int.one; // current tool footprint in tiles
    private Vector3 _anchor;
    private float _groundConst; // y for XZ, z for XY
    private GridPlane _plane = GridPlane.XY;

    // Grid snapshot via reflection to avoid tight coupling
    private float _tile = 1f; private int _w = 128; private int _h = 128;
    private Vector3 _gridMinWorld; // bottom-left world corner of tile (0,0)
    private bool _haveBounds;
    private int _gridLayer = 0; // render layer to use for ghost/marker/visuals
    private string _activeBuildingDefId = "core.Building.ConstructionBoard";
    private VisualDef _ghostVDef; // cached visual for the active building

    private Camera _cam;
    private static Sprite _whiteSprite;

    private void SyncToolFromController()
    {
        var bm = BuildModeController.Instance;
        if (bm == null) return;
        if (_tool != bm.CurrentTool)
        {
            _tool = bm.CurrentTool;
        }
        // Always refresh footprint (avoid stale 1x1)
        _footSize = GetFootprint();
    }

    public void SetTool(BuildTool tool)
    {
        _tool = tool;
        _footSize = GetFootprint();
        EnsureGhost();
        EnsureMarker();
        ResolveActiveVisual();
    }

    // --- Input helpers: support both legacy Input and the new Input System ---
    private Vector2 GetMousePosition()
    {
#if ENABLE_INPUT_SYSTEM
        if (Mouse.current != null)
        {
            return Mouse.current.position.ReadValue();
        }
#endif
        return Input.mousePosition;
    }

    private bool LeftClickDown()
    {
#if ENABLE_INPUT_SYSTEM
        if (Mouse.current != null && Mouse.current.leftButton.wasPressedThisFrame) return true;
#endif
        return Input.GetMouseButtonDown(0);
    }

    private bool RightClickDown()
    {
#if ENABLE_INPUT_SYSTEM
        if (Mouse.current != null && Mouse.current.rightButton.wasPressedThisFrame) return true;
#endif
        return Input.GetMouseButtonDown(1);
    }

    private bool CancelPressed()
    {
#if ENABLE_INPUT_SYSTEM
        if (Keyboard.current != null && Keyboard.current.escapeKey.wasPressedThisFrame) return true;
#endif
        return Input.GetKeyDown(KeyCode.Escape);
    }

    private void Update()
    {
        // Drive placement every frame
        SyncToolFromController();
        ReadGridInfo(); // keep bounds/plane fresh

        if (_tool == BuildTool.None)
        {
            DestroyGhost();
            DestroyMarker();
            return;
        }

        // Update ghost & validity continuously
        UpdateGhost();

        // Handle input
        if (LeftClickDown())
        {
            TryPlace();
        }
        else if (RightClickDown() || CancelPressed())
        {
            CancelPlacement();
        }
    }

    private void ReadGridInfo()
    {
        var grid = FindObjectOfTypeByName("SimpleGridMap");
        _tile = 1f; _w = 128; _h = 128;
        _haveBounds = false;
        if (grid != null)
        {
            TryGetField(grid, "tileSize", ref _tile);
            TryGetField(grid, "width", ref _w);
            TryGetField(grid, "height", ref _h);

            // Try to find a Renderer to get true world bounds and deduce the plane
            var rend = (grid as Component).GetComponentInChildren<Renderer>();
            if (rend != null)
            {
                var b = rend.bounds;
                // Decide plane by which axis is thinnest
                if (b.size.z < b.size.y && b.size.z < b.size.x)
                {
                    // XY world (thin Z)
                    _plane = GridPlane.XY;
                    GridSpace.Plane = _plane;
                    _groundConst = b.center.z;
                    _gridMinWorld = new Vector3(b.min.x, b.min.y, _groundConst);
                    _gridLayer = rend.gameObject.layer;
                    _haveBounds = true;
                }
                else
                {
                    // XZ world (thin Y)
                    _plane = GridPlane.XZ;
                    GridSpace.Plane = _plane;
                    _groundConst = b.center.y;
                    _gridMinWorld = new Vector3(b.min.x, _groundConst, b.min.z);
                    _gridLayer = rend.gameObject.layer;
                    _haveBounds = true;
                }
            }
            else
            {
                // Fallback: assume XY with z=0
                _plane = GridPlane.XY;
                GridSpace.Plane = _plane;
                _groundConst = 0f;
                _gridLayer = 0; // Default
            }
        }
        else
        {
            _plane = GridPlane.XY;
            GridSpace.Plane = _plane;
            _groundConst = 0f;
            _gridLayer = 0;
        }
    }

    private void UpdateGhost()
    {
        var cam = GetCamera();
        if (cam == null) return; // can't place without a camera

        if (!TryGetMouseOnGround(cam, out var world)) return;
        // show marker even before we know if placement is valid
        if (_marker == null) EnsureMarker();
        _anchor = _haveBounds ? _gridMinWorld : GuessCenteredAnchor();
        _footSize = GetFootprint();
        if (_tool == BuildTool.PlaceConstructionBoard) _footSize = new Vector2Int(3, 1); // belt & suspenders
        if (_ghostVDef == null) ResolveActiveVisual();

        // Snap to grid anchored at bottom-left on the active plane
        int gx, gy;
        if (_plane == GridPlane.XZ)
        {
            gx = Mathf.RoundToInt((world.x - _anchor.x) / _tile);
            gy = Mathf.RoundToInt((world.z - _anchor.z) / _tile);
        }
        else
        {
            gx = Mathf.RoundToInt((world.x - _anchor.x) / _tile);
            gy = Mathf.RoundToInt((world.y - _anchor.y) / _tile);
        }
        gx = Mathf.Clamp(gx, -_w, _w * 2);
        gy = Mathf.Clamp(gy, -_h, _h * 2);
        // bottom-left of footprint
        _snapGridPos = new Vector2Int(gx, gy);
        float cx = _anchor.x + ((gx + _footSize.x * 0.5f) * _tile);
        if (_plane == GridPlane.XZ)
        {
            float cz = _anchor.z + ((gy + _footSize.y * 0.5f) * _tile);
            _snapWorldPos = new Vector3(cx, _groundConst + 0.02f, cz);
        }
        else
        {
            float cy = _anchor.y + ((gy + _footSize.y * 0.5f) * _tile);
            _snapWorldPos = new Vector3(cx, cy, _groundConst + 0.0f);
        }

        _canPlace = IsInsideGrid(_snapGridPos, _footSize) && IsPlacementAllowedHere();

        EnsureGhost();

        // Color + transforms
        SetGhostColor(_canPlace ? new Color(0.2f, 0.9f, 0.2f, 0.35f) : new Color(0.9f, 0.2f, 0.2f, 0.35f));
        _ghost.transform.position = _snapWorldPos;
        _ghost.transform.localScale = new Vector3(_footSize.x * _tile, _footSize.y * _tile, 1f);
        _ghost.transform.rotation = _plane == GridPlane.XZ ? Quaternion.Euler(-90f, 0f, 0f) : Quaternion.identity;

        // Raw hit marker (tiny) at mouse world
        if (_marker != null)
        {
            _marker.transform.position = new Vector3(world.x, world.y, -0.02f);
            _marker.transform.localScale = Vector3.one * Mathf.Max(0.1f,_tile*0.2f);
            _marker.transform.rotation = _plane == GridPlane.XZ ? Quaternion.Euler(-90f, 0f, 0f) : Quaternion.identity;
        }
    }

    private bool IsInsideGrid(Vector2Int p, Vector2Int size)
    {
        if (!_haveBounds) // be permissive if we don't know exact bounds
            return p.x >= -_w && p.y >= -_h && p.x + size.x <= _w * 2 && p.y + size.y <= _h * 2;
        return p.x >= 0 && p.y >= 0 && p.x + size.x <= _w && p.y + size.y <= _h;
    }

    private bool IsPlacementAllowedHere()
    {
        if (_tool == BuildTool.PlaceConstructionBoard && BuildModeController.UniqueBuildingExists<ConstructionBoard>())
            return false; // unique per map

        // Check for any existing Building overlapping this footprint
        Building[] all;
#if UNITY_2023_1_OR_NEWER
        all = UnityEngine.Object.FindObjectsByType<Building>(FindObjectsSortMode.None);
#else
        all = FindObjectsOfType<Building>();
#endif
        foreach (var b in all)
        {
            if (RectOverlaps(b.GridPos, b.size, _snapGridPos, _footSize)) return false;
        }
        return true;
    }

    private static bool RectOverlaps(Vector2Int aPos, Vector2Int aSize, Vector2Int bPos, Vector2Int bSize)
    {
        return aPos.x < bPos.x + bSize.x && aPos.x + aSize.x > bPos.x &&
               aPos.y < bPos.y + bSize.y && aPos.y + aSize.y > bPos.y;
    }

    private void TryPlace()
    {
        // Ensure we're using the latest tool info
        SyncToolFromController();
        if (_tool == BuildTool.PlaceConstructionBoard) _footSize = new Vector2Int(3, 1);

        if (!_canPlace) return;

        Transform parent = EnsureBuildingsParent();

        switch (_tool)
        {
            case BuildTool.PlaceConstructionBoard:
            {
                var go = new GameObject("Construction Board");
                go.transform.SetParent(parent, worldPositionStays: true);
                // Align to bottom-left tile of the footprint
                float wx = _anchor.x + (_snapGridPos.x * _tile);
                if (_plane == GridPlane.XZ)
                {
                    float wz = _anchor.z + (_snapGridPos.y * _tile);
                    go.transform.position = new Vector3(wx, _groundConst, wz);
                }
                else
                {
                    float wy = _anchor.y + (_snapGridPos.y * _tile);
                    go.transform.position = new Vector3(wx, wy, _groundConst);
                }

                var board = go.AddComponent<ConstructionBoard>();
                board.displayName = "Construction Board";
                board.uniquePerMap = true;
                board.size = new Vector2Int(3, 1);
                board.OnPlaced(_snapGridPos, _tile);

                // Attach visual via defs
                var vdef = _ghostVDef ?? new VisualDef{ id = "core.Visual.Board_Default", plane = "XY" };
                SpriteVisualFactory2D.SpawnPlaced(vdef.id, board.size, _tile, go.transform);
                break;
            }
        }

        // After successful placement, clear tool
        SetTool(BuildTool.None);
    }

    private void EnsureGhost()
    {
        if (_ghost != null) return;
        var vdef = _ghostVDef ?? new VisualDef{ id = "core.Visual.Board_Default", plane = "XY" };
        _ghost = SpriteVisualFactory2D.SpawnGhost(vdef.id, _footSize, _tile, this.transform);
        var sr = _ghost.GetComponent<SpriteRenderer>();
        if (sr != null) sr.sortingOrder += 2; // ensure on top of ground
        _ghostMr = null;
    }

    private void EnsureMarker()
    {
        if (_marker != null) return;
        var vdef = _ghostVDef ?? new VisualDef{ id = "core.Visual.Board_Default", plane = "XY" };
        _marker = SpriteVisualFactory2D.SpawnGhost(vdef.id, Vector2Int.one, _tile*0.2f, this.transform);
        var sr = _marker.GetComponent<SpriteRenderer>();
        if (sr != null) sr.color = new Color(1f,1f,0.2f,0.85f);
    }

    private Transform EnsureBuildingsParent()
    {
        var world = GameObject.Find("World");
        if (world == null)
        {
            world = new GameObject("World");
        }
        var trans = world.transform.Find("Buildings");
        if (trans == null)
        {
            var go = new GameObject("Buildings");
            trans = go.transform;
            trans.SetParent(world.transform, worldPositionStays: false);
            trans.localPosition = Vector3.zero;
        }
        return trans;
    }

    private static Component FindObjectOfTypeByName(string typeName)
    {
        foreach (var asm in AppDomain.CurrentDomain.GetAssemblies())
        {
            var t = asm.GetType(typeName);
            if (t == null) continue;
#if UNITY_2023_1_OR_NEWER
            var comp = UnityEngine.Object.FindAnyObjectByType(t) as Component;
#else
            var comp = UnityEngine.Object.FindObjectOfType(t) as Component;
#endif
            if (comp != null) return comp;
        }
        return null;
    }

    private static void TryGetField<T>(Component c, string field, ref T value)
    {
        if (c == null) return;
        var f = c.GetType().GetField(field, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
        if (f != null)
        {
            object v = f.GetValue(c);
            if (v is T tv) value = tv;
            else
            {
                try { value = (T)System.Convert.ChangeType(v, typeof(T)); } catch { }
            }
        }
    }

    private Camera GetCamera()
    {
        if (_cam != null) return _cam;
        _cam = Camera.main;
        if (_cam == null)
        {
            if (Camera.allCamerasCount > 0)
            {
                var arr = Camera.allCameras;
                if (arr != null && arr.Length > 0) _cam = arr[0];
            }
        }
        return _cam;
    }

    private Vector3 GuessCenteredAnchor()
    {
        if (_plane == GridPlane.XZ)
            return new Vector3(-_w * _tile * 0.5f, _groundConst, -_h * _tile * 0.5f);
        else
            return new Vector3(-_w * _tile * 0.5f, -_h * _tile * 0.5f, _groundConst);
    }

    private Vector2Int GetFootprint()
    {
        switch (_tool)
        {
            case BuildTool.PlaceConstructionBoard: return new Vector2Int(3, 1);
            default: return Vector2Int.one;
        }
    }

    // Optional tiny debug overlay to help diagnose placement in the wild
    private void OnGUI()
    {
        SyncToolFromController();
        if (_tool == BuildTool.None) return;
        var style = new UnityEngine.GUIStyle(UnityEngine.GUI.skin.box);
        style.alignment = TextAnchor.UpperLeft;
        style.fontSize = 14;
        string plane = _plane.ToString();
        string reason = _canPlace ? "" : InvalidReason();
        string worldStr = _plane == GridPlane.XZ ? $"{_snapWorldPos.x:F2},{_snapWorldPos.y:F2},{_snapWorldPos.z:F2}" : $"{_snapWorldPos.x:F2},{_snapWorldPos.y:F2},{_snapWorldPos.z:F2}";
        string anchorStr = _plane == GridPlane.XZ ? $"{_anchor.x:F2},{_groundConst:F2},{_anchor.z:F2}" : $"{_anchor.x:F2},{_anchor.y:F2},{_groundConst:F2}";
        Vector2 mpLegacy = Input.mousePosition;
        Vector2 mpNIS = Vector2.zero;
#if ENABLE_INPUT_SYSTEM
        if (UnityEngine.InputSystem.Mouse.current != null)
        {
            mpNIS = UnityEngine.InputSystem.Mouse.current.position.ReadValue();
        }
#endif
        string text = $"Plane: {plane}\nTool: {_tool}\nDef: {_activeBuildingDefId} -> GhostVisual: {(_ghostVDef!=null ? _ghostVDef.id : "(default)")}\nGrid: {_snapGridPos.x},{_snapGridPos.y}\nWorld: {worldStr}\nMouse Legacy: {mpLegacy.x:F0},{mpLegacy.y:F0}  NIS: {mpNIS.x:F0},{mpNIS.y:F0}\nAnchor: {anchorStr}\nHaveBounds: {_haveBounds}  Tile: {_tile:F2}\nFoot: {_footSize.x}x{_footSize.y}\nValid: {_canPlace} {reason}";
        UnityEngine.GUI.Label(new UnityEngine.Rect(8, 8, 680, 210), text, style);
    }

    private bool CameraHasLayer(int layer)
    {
        var cam = GetCamera(); if (cam == null) return true;
        return (cam.cullingMask & (1 << layer)) != 0;
    }

    private bool TryGetMouseOnGround(Camera cam, out Vector3 world)
    {
        // 1) Try raycast to plane (works in both perspective and ortho)
        Vector2 mp = GetMousePosition();
        Ray ray = cam.ScreenPointToRay(new Vector3(mp.x, mp.y, 0f));
        Plane ground = _plane == GridPlane.XZ
            ? new Plane(Vector3.up, new Vector3(0f, _groundConst, 0f))
            : new Plane(Vector3.forward, new Vector3(0f, 0f, _groundConst));
        if (ground.Raycast(ray, out float enter))
        {
            world = ray.GetPoint(enter);
            return true;
        }

        // 2) Fallback via depth from ground reference (covers edge camera setups)
        Vector3 groundRef = _plane == GridPlane.XZ ? new Vector3(0f, _groundConst, 0f) : new Vector3(0f, 0f, _groundConst);
        float depth = cam.WorldToScreenPoint(groundRef).z;
        world = cam.ScreenToWorldPoint(new Vector3(mp.x, mp.y, depth));
        if (!float.IsNaN(world.x)) return true;

        // 3) Final fallback: project using camera basis onto plane
        Vector3 origin = cam.transform.position;
        Vector3 dir = (cam.transform.forward.sqrMagnitude < 0.0001f) ? Vector3.forward : cam.transform.forward;
        Ray ray2 = new Ray(origin, dir);
        if (ground.Raycast(ray2, out float enter2)) { world = ray2.GetPoint(enter2); return true; }
        return true;
    }

    private void ResolveActiveVisual()
    {
        // Ensure defs are loaded once
        if (DefDatabase.Visuals.Count == 0) DefDatabase.LoadAll();

        // For now, only Construction Board is placed by this tool
        // This maps to core.Building.ConstructionBoard → core.Visual.Board_Default
        BuildingDef bdef = null;
        DefDatabase.Buildings.TryGetValue("core.Building.ConstructionBoard", out bdef);
        if (bdef == null)
        {
            // synthesize a default
            _ghostVDef = new VisualDef();
            return;
        }
        VisualDef vdef = null;
        if (!string.IsNullOrEmpty(bdef.visual_ref)) DefDatabase.Visuals.TryGetValue(bdef.visual_ref, out vdef);
        _ghostVDef = vdef ?? new VisualDef();
    }

    private void SetGhostColor(Color c)
    {
        if (_ghostMr != null)
        {
            // Ensure we're not editing a shared material instance in play mode
            if (Application.isPlaying)
            {
                if (_ghostMr.material != null) _ghostMr.material.color = c;
            }
            else
            {
                if (_ghostMr.sharedMaterial != null) _ghostMr.sharedMaterial.color = c;
            }
        }
    }

    private void DestroyMarker()
    {
        if (_marker != null)
        {
            Destroy(_marker);
            _marker = null;
        }
    }

    private string InvalidReason()
    {
        if (!IsInsideGrid(_snapGridPos, _footSize)) return "(out of bounds)";
        if (_tool == BuildTool.PlaceConstructionBoard && BuildModeController.UniqueBuildingExists<ConstructionBoard>())
            return "(unique-per-map already placed)";
        var all = UnityEngine.Object.FindObjectsByType<Building>(FindObjectsSortMode.None);
        foreach (var b in all)
            if (RectOverlaps(b.GridPos, b.size, _snapGridPos, _footSize)) return $"(overlap with {b.displayName})";
        return "";
    }

    private void CancelPlacement()
    {
        var bm = BuildModeController.Instance;
        if (bm != null)
        {
            bm.SetTool(BuildTool.None);
        }
        else
        {
            SetTool(BuildTool.None);
        }
        DestroyGhost();
    }

    private void DestroyGhost()
    {
        if (_ghost != null)
        {
            UnityEngine.Object.Destroy(_ghost);
            _ghost = null;
            _ghostMr = null;
        }
    }
}


// ===== FILE: Assets/Scripts/Build/BuildToggleHUD.cs =====
using UnityEngine;

/// <summary>
/// Small top-right button to toggle Build Mode. Works alongside the B hotkey.
/// </summary>
public class BuildToggleHUD : MonoBehaviour
{
    [SerializeField] private Vector2 offset = new Vector2(12f, 12f);
    [SerializeField] private float fontPct = 0.028f;     // slightly smaller than speed label
    [SerializeField] private float topExtraPct = 0.12f;  // below speed/clock text by a proportion of screen height
    [SerializeField] private float minTopExtra = 64f;

    private GUIStyle _btn;
    private GUIStyle _btnActive;

    private void Ensure()
    {
        if (_btn == null)
        {
            _btn = new GUIStyle(GUI.skin.button) { alignment = TextAnchor.MiddleCenter, fontStyle = FontStyle.Bold };
        }
        if (_btnActive == null)
        {
            _btnActive = new GUIStyle(_btn);
            _btnActive.normal.textColor = Color.white;
            _btnActive.normal.background = MakeTex(new Color(0.32f, 0.52f, 0.92f, 1f));
            _btnActive.hover.background = _btnActive.normal.background;
            _btnActive.active.background = _btnActive.normal.background;
        }
    }

    private void OnGUI()
    {
        if (IntroScreen.IsVisible) return; // hide on intro screen
        Ensure();

        var bm = BuildModeController.Instance;
        bool active = bm != null && bm.IsActive;

        int fontSize = Mathf.RoundToInt(Mathf.Max(12f, Screen.height * fontPct));
        _btn.fontSize = fontSize;
        _btnActive.fontSize = fontSize;

        string label = active ? "🔨 Exit Build (B)" : "🔨 Build (B)";

        float w = Mathf.Max(160f, fontSize * 10f);
        float topExtra = Mathf.Max(minTopExtra, Screen.height * topExtraPct);
        Rect r = new Rect(Screen.width - w - offset.x, offset.y + topExtra, w, fontSize * 1.8f);

        if (GUI.Button(r, label, active ? _btnActive : _btn))
        {
            // Ensure systems exist
            BuildBootstrap.Ensure();
            bm = BuildModeController.Instance;
            if (bm == null)
            {
                var go = GameObject.Find("BuildSystems (Auto)");
                if (go == null) go = new GameObject("BuildSystems (Auto)");
                bm = go.GetComponent<BuildModeController>();
                if (bm == null) bm = go.AddComponent<BuildModeController>();
            }
            bm.ToggleBuildMode();
        }
    }

    private static Texture2D MakeTex(Color c)
    {
        var t = new Texture2D(1, 1, TextureFormat.RGBA32, false);
        t.SetPixel(0, 0, c);
        t.Apply();
        return t;
    }
}



// ===== FILE: Assets/Scripts/Build/GridSpace.cs =====
public enum GridPlane
{
    XY,
    XZ
}

/// <summary>
/// Global grid-space hint so placement/visuals/colliders can agree on the plane.
/// </summary>
public static class GridSpace
{
    public static GridPlane Plane = GridPlane.XY; // default to classic 2D
}




// ===== FILE: Assets/Scripts/Camera/FollowControlledPawn.cs =====
using UnityEngine;

/// <summary>
/// When a pawn is assumed controlled, center the camera on it and smoothly follow.
/// Stops following when control is released.
/// </summary>
[AddComponentMenu("Camera/Follow Controlled Pawn")]
public class FollowControlledPawn : MonoBehaviour
{
    [Header("Follow")]
    [SerializeField] private float smoothTime = 0.15f;
    [SerializeField] private bool snapOnAcquire = true;
    [SerializeField] private bool pixelSnap = false; // disable by default to avoid double-quantization jitter
    [Tooltip("Optional XZ world offset from the pawn center.")]
    [SerializeField] private Vector2 offset = Vector2.zero;
    [Header("Stability")]
    [SerializeField] private bool useDeadZone = true;
    [SerializeField] private float deadZonePixels = 0.75f;

    private Camera _cam;
    private Transform _target;
    private Vector3 _vel; // SmoothDamp velocity

    private void Awake()
    {
        _cam = GetComponent<Camera>();
        if (_cam == null) _cam = Camera.main;
    }

    private void OnEnable()
    {
        ControlManager.OnControlledChanged += OnControlledChanged;
        // If a pawn is already controlled at startup, target it immediately.
        if (ControlManager.Controlled != null)
        {
            _target = ControlManager.Controlled.transform;
            if (snapOnAcquire) SnapToTarget();
        }
    }

    private void OnDisable()
    {
        ControlManager.OnControlledChanged -= OnControlledChanged;
    }

    private void OnControlledChanged(SpritePawn pawn)
    {
        _target = pawn ? pawn.transform : null;
        if (_target != null && snapOnAcquire)
        {
            SnapToTarget();
        }
    }

    private void LateUpdate()
    {
        if (_target == null || _cam == null) return;

        // Desired position keeps current camera Y & rotation; moves X/Z toward target.
        Vector3 desired = new Vector3(
            _target.position.x + offset.x,
            _cam.transform.position.y,
            _target.position.z + offset.y
        );

        Vector3 current = _cam.transform.position;

        // Optional dead-zone measured in on-screen pixels to prevent micro hunting.
        if (useDeadZone)
        {
            float dx = desired.x - current.x;
            float dz = desired.z - current.z;
            float dist = Mathf.Sqrt(dx * dx + dz * dz);
            float upp = Mathf.Max(1e-6f, PixelCameraHelper.WorldUnitsPerPixel(_cam));
            float threshold = upp * Mathf.Max(0f, deadZonePixels);
            if (dist <= threshold)
            {
                var snapPos = pixelSnap ? SnapPosToPixelGrid(desired, _cam) : desired;
                _cam.transform.position = snapPos;
                _vel = Vector3.zero;
                return;
            }
        }

        Vector3 pos = Vector3.SmoothDamp(current, desired, ref _vel, Mathf.Max(0.0001f, smoothTime));

        if (pixelSnap)
            pos = SnapPosToPixelGrid(pos, _cam);

        _cam.transform.position = pos;
    }

    private void SnapToTarget()
    {
        if (_target == null || _cam == null) return;
        var pos = new Vector3(
            _target.position.x + offset.x,
            _cam.transform.position.y,
            _target.position.z + offset.y
        );
        if (pixelSnap)
            pos = SnapPosToPixelGrid(pos, _cam);
        _cam.transform.position = pos;
        _vel = Vector3.zero;
    }

    private static Vector3 SnapPosToPixelGrid(Vector3 worldPos, Camera cam)
    {
        float upp = Mathf.Max(1e-6f, PixelCameraHelper.WorldUnitsPerPixel(cam));
        worldPos.x = Mathf.Round(worldPos.x / upp) * upp;
        worldPos.z = Mathf.Round(worldPos.z / upp) * upp;
        return worldPos;
    }
}


// ===== FILE: Assets/Scripts/Camera/FreeCameraController.cs =====
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
#endif
// ReSharper disable Unity.InefficientPropertyAccess
// ReSharper disable Unity.PerformanceCriticalCodeInvocation

/// <summary>
/// Free camera: mouse-wheel zoom (always) + WASD/Arrow panning when no pawn is controlled.
/// Uses unscaled time so you can pan while paused. Top-down, XZ only.
/// </summary>
[AddComponentMenu("Camera/Free Camera Controller")]
public class FreeCameraController : MonoBehaviour
{
    [Header("Movement")]
    [SerializeField] private float moveSpeed = 10f;
    [SerializeField] private float boostMultiplier = 2f;
    [SerializeField] private bool clampToGrid = true;
    [SerializeField] private float clampMargin = 1f;
    [Header("Visibility Rule")]
    [SerializeField, Tooltip("Keep at least this many on-screen pixels of the grid visible on each axis. Set to 1 for 'some part of grid must remain visible'.")] private float minVisiblePixels = 1f;
    
    [Header("Zoom")]
    [SerializeField] private float minOrtho = 3f;
    [SerializeField] private float maxOrtho = 200f;
    [SerializeField] private float zoomSpeed = 8f;          // how fast orthographicSize changes per wheel notch
    [SerializeField] private bool smoothZoom = true;
    [SerializeField] private float zoomSmoothTime = 0.08f;  // unscaled seconds

    private Camera _cam;
    private SimpleGridMap _grid;
    private float _targetOrtho;
    private float _zoomVel;
    private float _skipClampUntil; // unscaled time

#if ENABLE_INPUT_SYSTEM
    private InputAction _move;
    private InputAction _boost;
    private InputAction _scroll;
#endif

    private void Awake()
    {
        _cam = GetComponent<Camera>();
        if (_cam == null) _cam = Camera.main;
        if (_cam != null)
            _targetOrtho = Mathf.Max(0.01f, _cam.orthographicSize);
    }

    private void TryFindGrid()
    {
        if (_grid != null) return;
#if UNITY_2022_2_OR_NEWER
        _grid = UnityEngine.Object.FindAnyObjectByType<SimpleGridMap>();
#else
        _grid = UnityEngine.Object.FindObjectOfType<SimpleGridMap>();
#endif
    }

    private void OnEnable()
    {
        ControlManager.OnControlledChanged += OnControlledChanged;
        if (_cam != null)
            _targetOrtho = Mathf.Max(0.01f, _cam.orthographicSize);

#if ENABLE_INPUT_SYSTEM
        if (_move == null)
        {
            // 2D composite: WASD + Arrows + gamepad stick
            _move = new InputAction("CamMove", type: InputActionType.Value, binding: "2DVector");
            _move.AddCompositeBinding("2DVector")
                .With("Up", "<Keyboard>/w").With("Up", "<Keyboard>/upArrow")
                .With("Down", "<Keyboard>/s").With("Down", "<Keyboard>/downArrow")
                .With("Left", "<Keyboard>/a").With("Left", "<Keyboard>/leftArrow")
                .With("Right", "<Keyboard>/d").With("Right", "<Keyboard>/rightArrow");
            _move.AddBinding("<Gamepad>/leftStick");
        }
        if (_boost == null) _boost = new InputAction("CamBoost", binding: "<Keyboard>/shift");
        if (_scroll == null) _scroll = new InputAction("CamScroll", binding: "<Mouse>/scroll"); // Vector2 (x,y)
        _move.Enable(); _boost.Enable(); _scroll.Enable();
#endif
    }

    private void OnDisable()
    {
        ControlManager.OnControlledChanged -= OnControlledChanged;
#if ENABLE_INPUT_SYSTEM
        _move?.Disable();
        _boost?.Disable();
        _scroll?.Disable();
#endif
    }

    private void Update()
    {
        if (_cam == null) return;

        // --- Zoom (always available, even while controlling a pawn) ---
        float scrollDelta = ReadScrollDelta(); // >0 means wheel up

        // --- Zoom (center-based) ---
        if (Mathf.Abs(scrollDelta) > 0.0001f)
        {
            // Wheel up (positive) -> zoom in -> smaller ortho size
            _targetOrtho = Mathf.Clamp(_targetOrtho - scrollDelta * zoomSpeed, minOrtho, maxOrtho);
        }
        if (smoothZoom)
        {
            _cam.orthographicSize = Mathf.SmoothDamp(_cam.orthographicSize, _targetOrtho, ref _zoomVel, Mathf.Max(0.0001f, zoomSmoothTime), Mathf.Infinity, Time.unscaledDeltaTime);
        }
        else
        {
            _cam.orthographicSize = _targetOrtho;
        }

        // If a pawn is controlled, skip free panning (follow script will move camera). Zoom above already applied.
        if (ControlManager.Controlled != null) return;

        // --- Read move input (free cam only) ---
        Vector2 input = ReadMoveInput();
        if (input.sqrMagnitude > 1f) input.Normalize();
        bool boost = ReadBoost();

        // --- Pan (WASD/Arrows) ---
        float speed = moveSpeed * (boost ? boostMultiplier : 1f);
        Vector3 delta = new Vector3(input.x, 0f, input.y) * speed * Time.unscaledDeltaTime;
        Vector3 pos = _cam.transform.position + delta;

        if (clampToGrid)
        {
            TryFindGrid();
            if (_grid != null && Time.unscaledTime >= _skipClampUntil)
            {
                EnsureGridVisibility(ref pos, _cam, _grid, clampMargin, Mathf.Max(0f, minVisiblePixels));
            }
        }

        _cam.transform.position = pos;
    }

    private void OnControlledChanged(SpritePawn pawn)
    {
        // When control is released (pawn == null), give a short grace window so clamp doesn't snap us.
        if (pawn == null)
            _skipClampUntil = Time.unscaledTime + 0.25f;
    }

    /// <summary>
    /// Ensures that at least 'minVisiblePixels' of the grid remains visible on each axis.
    /// This allows near-infinite panning as long as a sliver of grid is still in view.
    /// </summary>
    private static void EnsureGridVisibility(ref Vector3 camPos, Camera cam, SimpleGridMap grid, float margin, float minVisiblePixels)
    {
        float wWorld = grid.width * grid.tileSize;
        float hWorld = grid.height * grid.tileSize;

        // Subtract half view so camera doesn't show outside the grid.
        float halfH = cam.orthographicSize;
        float aspect = (Screen.height > 0) ? (Screen.width / (float)Screen.height) : (16f / 9f);
        float halfW = halfH * aspect;

        // Grid rect (expanded by margin so we don't put the edge exactly on the viewport border)
        float gMinX = 0f + margin;
        float gMaxX = wWorld - margin;
        float gMinZ = 0f + margin;
        float gMaxZ = hWorld - margin;

        // Camera rect from its center position
        float cMinX = camPos.x - halfW;
        float cMaxX = camPos.x + halfW;
        float cMinZ = camPos.z - halfH;
        float cMaxZ = camPos.z + halfH;

        // Required overlap in world units based on pixels (cap to grid size to avoid impossible requirements)
        float upp = Mathf.Max(1e-6f, PixelCameraHelper.WorldUnitsPerPixel(cam));
        float reqOverlapX = Mathf.Min(minVisiblePixels * upp, Mathf.Max(0f, gMaxX - gMinX));
        float reqOverlapZ = Mathf.Min(minVisiblePixels * upp, Mathf.Max(0f, gMaxZ - gMinZ));

        // --- X axis ---
        {
            float overlapX = Mathf.Min(cMaxX, gMaxX) - Mathf.Max(cMinX, gMinX);
            if (overlapX < reqOverlapX)
            {
                // Compute minimal shift to achieve the required overlap.
                float gridCenterX = 0.5f * (gMinX + gMaxX);
                if (cMaxX <= gMinX) // camera fully left of grid
                {
                    float desiredCamMax = gMinX + reqOverlapX;
                    camPos.x = desiredCamMax - halfW;
                }
                else if (cMinX >= gMaxX) // camera fully right of grid
                {
                    float desiredCamMin = gMaxX - reqOverlapX;
                    camPos.x = desiredCamMin + halfW;
                }
                else // partial overlap: nudge toward grid center
                {
                    float dir = (camPos.x < gridCenterX) ? +1f : -1f;
                    camPos.x += dir * (reqOverlapX - Mathf.Max(0f, overlapX));
                }
            }
        }
        // --- Z axis ---
        {
            float overlapZ = Mathf.Min(cMaxZ, gMaxZ) - Mathf.Max(cMinZ, gMinZ);
            if (overlapZ < reqOverlapZ)
            {
                float gridCenterZ = 0.5f * (gMinZ + gMaxZ);
                if (cMaxZ <= gMinZ) camPos.z = (gMinZ + reqOverlapZ) - halfH;                // fully below grid
                else if (cMinZ >= gMaxZ) camPos.z = (gMaxZ - reqOverlapZ) + halfH;           // fully above grid
                else camPos.z += ((camPos.z < gridCenterZ) ? +1f : -1f) * (reqOverlapZ - Mathf.Max(0f, overlapZ));
            }
        }
    }

    private Vector2 ReadMoveInput()
    {
#if ENABLE_INPUT_SYSTEM
        return _move != null ? _move.ReadValue<Vector2>() : Vector2.zero;
#else
        float x = 0f, y = 0f;
        if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow)) x -= 1f;
        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow)) x += 1f;
        if (Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.DownArrow)) y -= 1f;
        if (Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.UpArrow)) y += 1f;
        return new Vector2(x, y);
#endif
    }

    private bool ReadBoost()
    {
#if ENABLE_INPUT_SYSTEM
        return _boost != null && _boost.IsPressed();
#else
        return Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift);
#endif
    }

    private float ReadScrollDelta()
    {
#if ENABLE_INPUT_SYSTEM
        // New Input System: mouse scroll is in "lines" per frame (y positive = scroll up)
        if (_scroll == null) return 0f;
        Vector2 v = _scroll.ReadValue<Vector2>();
        return v.y;
#else
        // Legacy Input: positive y = scroll up
        return Input.mouseScrollDelta.y;
#endif
    }
}



// ===== FILE: Assets/Scripts/Camera/PixelCameraHelper.cs =====
using UnityEngine;

/// <summary>
/// Utilities for pixel-perfect math with an orthographic camera.
/// </summary>
public static class PixelCameraHelper
{
    /// <summary>
    /// World units per on-screen pixel for the given camera.
    /// </summary>
    public static float WorldUnitsPerPixel(Camera cam)
    {
        if (cam == null) cam = Camera.main;
        if (cam == null) return 1f / 100f; // safe fallback
        // For an ortho camera, vertical world size is 2 * orthographicSize.
        // Divide by screen height (pixels) to get units-per-pixel.
        float h = Screen.height > 0 ? Screen.height : 1080f;
        return (2f * cam.orthographicSize) / h;
    }

    /// <summary>
    /// Snap a world position to the camera's pixel grid (X/Z for top-down).
    /// </summary>
    public static Vector3 SnapToPixelGrid(Vector3 worldPos, Camera cam)
    {
        float upp = Mathf.Max(1e-5f, WorldUnitsPerPixel(cam));
        worldPos.x = Mathf.Round(worldPos.x / upp) * upp;
        worldPos.z = Mathf.Round(worldPos.z / upp) * upp;
        return worldPos;
    }

    /// <summary>
    /// Returns the world-space rectangle (minX,maxX,minZ,maxZ) visible by the camera.
    /// </summary>
    public static (float minX, float maxX, float minZ, float maxZ) OrthoWorldBounds(Camera cam)
    {
        float halfH = cam.orthographicSize;
        float halfW = halfH * ((Screen.height > 0) ? (Screen.width / (float)Screen.height) : (16f/9f));
        return (cam.transform.position.x - halfW, cam.transform.position.x + halfW, cam.transform.position.z - halfH, cam.transform.position.z + halfH);
    }
}



// ===== FILE: Assets/Scripts/Defs/Defs.cs =====
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using UnityEngine;

namespace FantasyColony.Defs
{
    [XmlRoot("Defs")] public class BuildingDefSet { [XmlElement("Building")] public List<BuildingDef> Items = new(); }
    [XmlRoot("Defs")] public class VisualDefSet   { [XmlElement("Visual")]   public List<VisualDef>   Items = new(); }

    [Serializable]
    public class BuildingDef
    {
        [XmlAttribute("id")] public string id;
        [XmlElement("display_name")] public string display_name;
        [XmlElement("size_x")] public int size_x = 1;
        [XmlElement("size_y")] public int size_y = 1;
        [XmlElement("unique")] public bool unique;
        [XmlElement("visual_ref")] public string visual_ref;
        [XmlArray("job_slots"), XmlArrayItem("slot")] public List<JobSlot> job_slots = new();
        [XmlArray("cost"), XmlArrayItem("entry")] public List<CostEntry> cost = new();

        [Serializable] public class JobSlot { [XmlAttribute("job")] public string job; [XmlAttribute("count")] public int count = 1; }
        [Serializable] public class CostEntry { [XmlAttribute("res")] public string resource; [XmlAttribute("amt")] public int amount; }

        public Vector2Int Size => new Vector2Int(Mathf.Max(1,size_x), Mathf.Max(1,size_y));
    }

    [Serializable]
    public class VisualDef
    {
        [XmlAttribute("id")] public string id;
        [XmlElement("plane")] public string plane = "XZ"; // "XY" or "XZ"
        [XmlElement("render_layer")] public string render_layer = "Default"; // name or index
        [XmlElement("color_rgba")] public string color_rgba = "#F3D95AFF"; // 8-digit RGBA hex
        [XmlElement("shader_hint")] public string shader_hint = "URP/Unlit"; // URP/Unlit | Unlit/Color | StandardTransparent
        [XmlElement("z_lift")] public float z_lift = 0.05f;

        public Color Color => ColorUtility.TryParseHtmlString(color_rgba, out var c) ? c : new Color(0.95f,0.85f,0.35f,1f);
        public GridPlane Plane => string.Equals(plane, "XY", StringComparison.OrdinalIgnoreCase) ? GridPlane.XY : GridPlane.XZ;
    }
}

namespace FantasyColony.Defs
{
    public static class DefDatabase
    {
        public static readonly Dictionary<string, BuildingDef> Buildings = new();
        public static readonly Dictionary<string, VisualDef> Visuals = new();

        public static void LoadAll()
        {
            Buildings.Clear();
            Visuals.Clear();
            XmlDefLoader.LoadSet("Buildings", System.IO.Path.Combine(Application.streamingAssetsPath, "Defs/Buildings"), (BuildingDefSet set) =>
            {
                foreach (var b in set.Items) if (!string.IsNullOrEmpty(b.id)) Buildings[b.id] = b;
            });
            XmlDefLoader.LoadSet("Visuals", System.IO.Path.Combine(Application.streamingAssetsPath, "Defs/Visuals"), (VisualDefSet set) =>
            {
                foreach (var v in set.Items) if (!string.IsNullOrEmpty(v.id)) Visuals[v.id] = v;
            });
            Debug.Log($"[Defs] Loaded Buildings={Buildings.Count}, Visuals={Visuals.Count} from {Application.streamingAssetsPath}");
        }
    }
}

namespace FantasyColony.Defs
{
    public static class XmlDefLoader
    {
        public static void LoadSet<T>(string kind, string folderAbs, Action<T> onLoaded)
        {
            try
            {
                var path = folderAbs;
                if (!System.IO.Directory.Exists(path))
                {
                    Debug.LogWarning($"[Defs] {kind} folder missing: {path}");
                    return;
                }
                var files = System.IO.Directory.GetFiles(path, "*.xml", System.IO.SearchOption.AllDirectories);
                foreach (var file in files)
                {
                    var doc = System.IO.File.ReadAllText(file);
                    var ser = new XmlSerializer(typeof(T));
                    using var sr = new System.IO.StringReader(doc);
                    var obj = (T)ser.Deserialize(sr);
                    onLoaded?.Invoke(obj);
                }
                Debug.Log($"[Defs] {kind} loaded: {files.Length} files");
            }
            catch (Exception e)
            {
                Debug.LogError($"[Defs] Failed to load {kind}: {e.Message}\n{e}");
            }
        }
    }
}


// ===== FILE: Assets/Scripts/Jobs/JobService.cs =====
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Central registry for job providers (buildings) and pawn job assignments.
/// </summary>
public class JobService : MonoBehaviour
{
    private class JobEntry
    {
        public int slots;
        public readonly List<PawnJob> assigned = new List<PawnJob>();
    }

    // Building -> JobType -> JobEntry
    private readonly Dictionary<Building, Dictionary<JobType, JobEntry>> _providers = new();

    // All known pawns
    private readonly List<PawnJob> _pawns = new();

    public void RegisterPawn(PawnJob pj)
    {
        if (!_pawns.Contains(pj)) _pawns.Add(pj);
    }

    public void UnregisterPawn(PawnJob pj)
    {
        _pawns.Remove(pj);
        foreach (var map in _providers.Values)
        {
            foreach (var e in map.Values)
            {
                e.assigned.Remove(pj);
            }
        }
    }

    public void SetSlots(Building b, JobType type, int slots)
    {
        if (b == null) return;
        if (!_providers.TryGetValue(b, out var map))
        {
            map = new Dictionary<JobType, JobEntry>();
            _providers[b] = map;
        }
        if (!map.TryGetValue(type, out var entry))
        {
            entry = new JobEntry();
            map[type] = entry;
        }
        entry.slots = Mathf.Max(0, slots);

        Rebalance(b, type, entry);
    }

    public List<PawnJob> AssignedFor(Building b, JobType type)
    {
        if (b == null) return new List<PawnJob>();
        if (_providers.TryGetValue(b, out var map) && map.TryGetValue(type, out var e))
        {
            return e.assigned;
        }
        return new List<PawnJob>();
    }

    private void Rebalance(Building b, JobType type, JobEntry e)
    {
        // Remove overfill
        while (e.assigned.Count > e.slots)
        {
            var pj = e.assigned[e.assigned.Count - 1];
            e.assigned.RemoveAt(e.assigned.Count - 1);
            if (pj != null && pj.AssignedBy == b) pj.SetJob(JobType.None, null);
        }

        // Fill underfill
        if (e.assigned.Count < e.slots)
        {
            foreach (var pj in _pawns)
            {
                if (pj == null) continue;
                if (!pj.IsIdle) continue;
                e.assigned.Add(pj);
                pj.SetJob(type, b);
                if (e.assigned.Count >= e.slots) break;
            }
        }
    }
}


// ===== FILE: Assets/Scripts/Jobs/JobType.cs =====
public enum JobType
{
    None = 0,
    Builder = 1,
}

public static class JobTypeExt
{
    public static string Name(this JobType t) => t.ToString();
}


// ===== FILE: Assets/Scripts/Pawns/PawnJob.cs =====
using UnityEngine;

/// <summary>
/// Minimal job holder for pawns; registers with JobService.
/// </summary>
public class PawnJob : MonoBehaviour
{
    [SerializeField] private JobType current = JobType.None;
    [SerializeField] private Building assignedBy;

    public bool IsIdle => current == JobType.None;
    public JobType Current => current;
    public Building AssignedBy => assignedBy;

    private void OnEnable()
    {
        JobService js;
#if UNITY_2023_1_OR_NEWER
        js = UnityEngine.Object.FindFirstObjectByType<JobService>();
#else
        js = FindObjectOfType<JobService>();
#endif
        if (js != null) js.RegisterPawn(this);
    }

    private void OnDisable()
    {
        JobService js;
#if UNITY_2023_1_OR_NEWER
        js = UnityEngine.Object.FindFirstObjectByType<JobService>();
#else
        js = FindObjectOfType<JobService>();
#endif
        if (js != null) js.UnregisterPawn(this);
    }

    public void SetJob(JobType t, Building by)
    {
        current = t;
        assignedBy = by;
        name = gameObject.name; // keep name stable; could add suffix if desired
    }
}


// ===== FILE: Assets/Scripts/Rendering/SpriteVisualFactory2D.cs =====
using System.Collections.Generic;
using FantasyColony.Defs;
using UnityEngine;

public static class SpriteVisualFactory2D
{
    private static readonly Dictionary<string, GameObject> _ghostPrefabs = new();
    private static readonly Dictionary<string, GameObject> _placedPrefabs = new();
    private static Sprite _white;
    private static string _sortingLayer;
    private static int _orderGround;

    public static void Build()
    {
        _ghostPrefabs.Clear();
        _placedPrefabs.Clear();
        EnsureWhiteSprite();
        DetectSortingLayer();

        foreach (var kv in DefDatabase.Visuals)
        {
            var v = kv.Value;
            _ghostPrefabs[v.id] = MakeSpritePrefab(v, translucent:true);
            _placedPrefabs[v.id] = MakeSpritePrefab(v, translucent:false);
        }
        if (_ghostPrefabs.Count == 0)
        {
            // synthesize a default visual so we see something
            var v = new VisualDef { id = "core.Visual.Board_Default", color_rgba = "#F3D95AFF", plane = "XY" };
            _ghostPrefabs[v.id] = MakeSpritePrefab(v, translucent:true);
            _placedPrefabs[v.id] = MakeSpritePrefab(v, translucent:false);
        }
        Debug.Log($"[SpriteVisualFactory2D] Ready. SortingLayer='{_sortingLayer}', GroundOrder={_orderGround}");
    }

    public static GameObject SpawnGhost(string visualId, Vector2Int foot, float tile, Transform parent)
    {
        if (!_ghostPrefabs.TryGetValue(visualId, out var pf)) return null;
        var inst = Object.Instantiate(pf, parent);
        SizeAndPlace(inst.transform, foot, tile, true);
        return inst;
    }

    public static GameObject SpawnPlaced(string visualId, Vector2Int foot, float tile, Transform parent)
    {
        if (!_placedPrefabs.TryGetValue(visualId, out var pf)) return null;
        var inst = Object.Instantiate(pf, parent);
        SizeAndPlace(inst.transform, foot, tile, false);
        return inst;
    }

    private static GameObject MakeSpritePrefab(VisualDef vdef, bool translucent)
    {
        var go = new GameObject(vdef.id + (translucent?".Ghost":".Placed"));
        var sr = go.AddComponent<SpriteRenderer>();
        sr.sprite = _white;
        sr.sortingLayerName = _sortingLayer;
        sr.sortingOrder = _orderGround + (translucent?5:3);
        var c = vdef.Color; if (translucent) c.a *= 0.4f; sr.color = c;
        go.transform.localPosition = Vector3.zero;
        go.transform.localRotation = Quaternion.identity; // XY plane
        return go;
    }

    private static void SizeAndPlace(Transform t, Vector2Int foot, float tile, bool ghost)
    {
        // Scale sprite in XY to desired world size: default white is 1 unit per side already
        t.localScale = new Vector3(Mathf.Max(0.1f, foot.x * tile), Mathf.Max(0.1f, foot.y * tile), 1f);
        // offset half size from parent (which is bottom-left)
        t.localPosition = new Vector3((foot.x * tile) * 0.5f, (foot.y * tile) * 0.5f, ghost ? -0.01f : 0f);
    }

    private static void EnsureWhiteSprite()
    {
        if (_white != null) return;
        var tex = new Texture2D(1,1, TextureFormat.RGBA32, false);
        tex.SetPixel(0,0,Color.white); tex.Apply();
        _white = Sprite.Create(tex, new Rect(0,0,1,1), new Vector2(0.5f,0.5f), 1f);
    }

    private static void DetectSortingLayer()
    {
        // Try to inherit the ground/pawn sorting layer; fallback to Default
        _sortingLayer = "Default";
        _orderGround = 0;
        var anySR = Object.FindAnyObjectByType<SpriteRenderer>();
        if (anySR != null)
        {
            _sortingLayer = anySR.sortingLayerName;
            _orderGround = anySR.sortingOrder;
        }
    }
}


// ===== FILE: Assets/Scripts/Rendering/VisualFactory.cs =====
using FantasyColony.Defs;
using UnityEngine;

public static class VisualFactory
{
    public static GameObject CreateGhost(VisualDef vdef, Vector2Int foot, float tile, Transform parent, int preferredLayer, GridPlane plane, Camera cam)
    {
        var go = GameObject.CreatePrimitive(PrimitiveType.Quad);
        go.name = "Build Ghost";
        go.transform.SetParent(parent, false);
        var mr = go.GetComponent<MeshRenderer>();
        mr.sharedMaterial = MakeMaterial(vdef, true);
        mr.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;
        mr.receiveShadows = false;
        var col = go.GetComponent<Collider>(); if (col != null) Object.Destroy(col);
        go.layer = PickVisibleLayer(preferredLayer, cam);
        Orient(go.transform, vdef, foot, tile, true);
        return go;
    }

    public static GameObject CreatePlaced(VisualDef vdef, Vector2Int foot, float tile, Transform parent, int preferredLayer, GridPlane plane, Camera cam)
    {
        var go = GameObject.CreatePrimitive(PrimitiveType.Quad);
        go.name = "BoardVisual";
        go.transform.SetParent(parent, false);
        var mr = go.GetComponent<MeshRenderer>();
        mr.sharedMaterial = MakeMaterial(vdef, false);
        mr.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;
        mr.receiveShadows = false;
        var col = go.GetComponent<Collider>(); if (col != null) Object.Destroy(col);
        go.layer = PickVisibleLayer(preferredLayer, cam);
        Orient(go.transform, vdef, foot, tile, false);
        return go;
    }

    private static Material MakeMaterial(VisualDef vdef, bool translucent)
    {
        Shader s = null;
        if (vdef.shader_hint.Contains("URP")) s = Shader.Find("Universal Render Pipeline/Unlit");
        if (s == null && vdef.shader_hint.Contains("Unlit")) s = Shader.Find("Unlit/Color");
        if (s == null) s = Shader.Find("Standard");
        var m = new Material(s);
        if (s.name.Contains("Standard"))
        {
            // standard transparent setup
            m.SetFloat("_Mode", translucent ? 3 : 0);
            m.SetInt("_SrcBlend", (int)UnityEngine.Rendering.BlendMode.SrcAlpha);
            m.SetInt("_DstBlend", (int)UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);
            m.SetInt("_ZWrite", translucent ? 0 : 1);
            if (translucent) { m.EnableKeyword("_ALPHABLEND_ON"); m.renderQueue = 3001; } else { m.DisableKeyword("_ALPHABLEND_ON"); m.renderQueue = 2450; }
        }
        else
        {
            m.renderQueue = translucent ? 3001 : 2450;
        }
        var c = vdef.Color; if (translucent) c.a *= 0.4f; m.color = c;
        return m;
    }

    private static void Orient(Transform t, VisualDef vdef, Vector2Int foot, float tile, bool ghost)
    {
        if (vdef.Plane == GridPlane.XZ)
        {
            t.localRotation = Quaternion.Euler(-90f, 0f, 0f);
            var lift = vdef.z_lift <= 0f ? (ghost ? 0.08f : 0.05f) : vdef.z_lift;
            t.localPosition = new Vector3((foot.x * tile) * 0.5f, lift, (foot.y * tile) * 0.5f);
            t.localScale = new Vector3(foot.x * tile, foot.y * tile, 1f);
        }
        else
        {
            t.localRotation = Quaternion.identity;
            var lift = vdef.z_lift <= 0f ? (ghost ? 0.02f : 0.0f) : vdef.z_lift;
            t.localPosition = new Vector3((foot.x * tile) * 0.5f, (foot.y * tile) * 0.5f, lift);
            t.localScale = new Vector3(foot.x * tile, foot.y * tile, 1f);
        }
    }

    private static int PickVisibleLayer(int preferred, Camera cam)
    {
        if (cam == null) return preferred;
        int mask = cam.cullingMask;
        if ((mask & (1 << preferred)) != 0) return preferred;
        for (int i = 0; i < 32; i++) if ((mask & (1 << i)) != 0) return i;
        return 0;
    }
}


// ===== FILE: Assets/Scripts/Rendering/VisualRegistry.cs =====
using System.Collections.Generic;
using FantasyColony.Defs;
using UnityEngine;

public static class VisualRegistry
{
    private static readonly Dictionary<string, GameObject> _ghostPrefabs = new();
    private static readonly Dictionary<string, GameObject> _placedPrefabs = new();
    private static int _visibleLayer = 0;

    public static void Build(bool inEditor)
    {
        _ghostPrefabs.Clear();
        _placedPrefabs.Clear();
        var cam = Camera.main ?? Object.FindAnyObjectByType<Camera>();
        _visibleLayer = PickVisibleLayer(0, cam);

        foreach (var kv in DefDatabase.Visuals)
        {
            var v = kv.Value;
            var ghost = MakeQuadPrefab(v, translucent: true, cam);
            var placed = MakeQuadPrefab(v, translucent: false, cam);
            _ghostPrefabs[v.id] = ghost;
            _placedPrefabs[v.id] = placed;
        }
        Debug.Log($"[VisualRegistry] Built prefabs: Ghost={_ghostPrefabs.Count}, Placed={_placedPrefabs.Count}, Layer={_visibleLayer}");
    }

    public static GameObject SpawnGhost(string visualId, Vector2Int foot, float tile, Transform parent)
    {
        if (!_ghostPrefabs.TryGetValue(visualId, out var pf)) return null;
        var inst = Object.Instantiate(pf, parent);
        Orient(inst.transform, DefDatabase.Visuals[visualId], foot, tile, true);
        return inst;
    }

    public static GameObject SpawnPlaced(string visualId, Vector2Int foot, float tile, Transform parent)
    {
        if (!_placedPrefabs.TryGetValue(visualId, out var pf)) return null;
        var inst = Object.Instantiate(pf, parent);
        Orient(inst.transform, DefDatabase.Visuals[visualId], foot, tile, false);
        return inst;
    }

    private static GameObject MakeQuadPrefab(VisualDef vdef, bool translucent, Camera cam)
    {
        var root = new GameObject(vdef.id + (translucent ? ".Ghost" : ".Placed"));
        var quad = GameObject.CreatePrimitive(PrimitiveType.Quad);
        quad.transform.SetParent(root.transform, false);
        var mr = quad.GetComponent<MeshRenderer>();
        mr.sharedMaterial = MakeMaterial(vdef, translucent);
        mr.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;
        mr.receiveShadows = false;
        var col = quad.GetComponent<Collider>(); if (col != null) Object.DestroyImmediate(col);
        root.layer = quad.layer = PickVisibleLayer(LayerFromNameOrIndex(vdef.render_layer), cam);
        return root;
    }

    private static Material MakeMaterial(VisualDef vdef, bool translucent)
    {
        Shader s = null;
        if (vdef.shader_hint.Contains("URP")) s = Shader.Find("Universal Render Pipeline/Unlit");
        if (s == null && vdef.shader_hint.Contains("Unlit")) s = Shader.Find("Unlit/Color");
        if (s == null) s = Shader.Find("Standard");
        var m = new Material(s);
        if (s.name.Contains("Standard"))
        {
            m.SetFloat("_Mode", translucent ? 3 : 0);
            m.SetInt("_SrcBlend", (int)UnityEngine.Rendering.BlendMode.SrcAlpha);
            m.SetInt("_DstBlend", (int)UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);
            m.SetInt("_ZWrite", translucent ? 0 : 1);
            if (translucent) { m.EnableKeyword("_ALPHABLEND_ON"); m.renderQueue = 3001; } else { m.DisableKeyword("_ALPHABLEND_ON"); m.renderQueue = 2450; }
        }
        else
        {
            m.renderQueue = translucent ? 3001 : 2450;
        }
        var c = vdef.Color; if (translucent) c.a *= 0.4f; m.color = c;
        return m;
    }

    private static void Orient(Transform t, VisualDef vdef, Vector2Int foot, float tile, bool ghost)
    {
        if (vdef.Plane == GridPlane.XZ)
        {
            t.localRotation = Quaternion.Euler(-90f, 0f, 0f);
            var lift = vdef.z_lift <= 0f ? (ghost ? 0.08f : 0.05f) : vdef.z_lift;
            t.localPosition = new Vector3((foot.x * tile) * 0.5f, lift, (foot.y * tile) * 0.5f);
            t.localScale = new Vector3(foot.x * tile, foot.y * tile, 1f);
        }
        else
        {
            t.localRotation = Quaternion.identity;
            var lift = vdef.z_lift <= 0f ? (ghost ? 0.02f : 0.0f) : vdef.z_lift;
            t.localPosition = new Vector3((foot.x * tile) * 0.5f, (foot.y * tile) * 0.5f, lift);
            t.localScale = new Vector3(foot.x * tile, foot.y * tile, 1f);
        }
    }

    private static int LayerFromNameOrIndex(string layer)
    {
        if (int.TryParse(layer, out var idx)) return idx;
        int n = LayerMask.NameToLayer(layer);
        if (n >= 0) return n;
        return 0;
    }

    private static int PickVisibleLayer(int preferred, Camera cam)
    {
        if (cam == null) return preferred;
        int mask = cam.cullingMask;
        if ((mask & (1 << preferred)) != 0) return preferred;
        for (int i = 0; i < 32; i++) if ((mask & (1 << i)) != 0) return i;
        return 0;
    }
}


// ===== FILE: Assets/Scripts/Systems/ControlManager.cs =====
using System;
using UnityEngine;

// ReSharper disable Unity.InefficientPropertyAccess
/// <summary>
/// Global "assume control" ownership. Exactly one pawn can be controlled at a time.
/// </summary>
[AddComponentMenu("Systems/Control Manager")]
public class ControlManager : MonoBehaviour
{
    public static SpritePawn Controlled { get; private set; }
    public static event Action<SpritePawn> OnControlledChanged;

    public static void AssumeControl(SpritePawn pawn)
    {
        if (pawn == null) return;
        if (Controlled == pawn)
        {
            // Already controlled; no change but still raise event for listeners if needed.
            try { OnControlledChanged?.Invoke(Controlled); } catch { }
            return;
        }
        // Release previous
        if (Controlled != null) Controlled.SetControlled(false);
        Controlled = pawn;
        Controlled.SetControlled(true);
        SelectionController.SelectOnly(Controlled); // pin selection to the controlled pawn
        try { OnControlledChanged?.Invoke(Controlled); } catch { }
    }

    public static void ReleaseControl()
    {
        if (Controlled == null) return;
        Controlled.SetControlled(false);
        Controlled = null;
        try { OnControlledChanged?.Invoke(null); } catch { }
    }
}



// ===== FILE: Assets/Scripts/Systems/GameCalendar.cs =====
using System;
using System.Collections.Generic;
using UnityEngine;

[Serializable]
public class SeasonDef
{
    public string name = "Season";
    [Min(1)] public int days = 12;
    public Color color = Color.white; // reserved for future UI lighting/themes
}

/// <summary>
/// Lightweight calendar layered on top of GameClock. Supports custom seasons/lengths.
/// Default year = 4 seasons × 12 days = 48 days.
/// </summary>
public class GameCalendar : MonoBehaviour
{
    [Header("Calendar Structure")]
    [SerializeField] private List<SeasonDef> seasons = new List<SeasonDef>
    {
        new SeasonDef { name = "Spring", days = 12, color = new Color(0.6f, 0.9f, 0.6f) },
        new SeasonDef { name = "Summer", days = 12, color = new Color(0.9f, 0.85f, 0.5f) },
        new SeasonDef { name = "Autumn", days = 12, color = new Color(0.95f, 0.7f, 0.4f) },
        new SeasonDef { name = "Winter", days = 12, color = new Color(0.8f, 0.9f, 1f) }
    };

    [Header("State (read-only)")]
    [SerializeField] private int year = 1;       // starts at 1
    [SerializeField] private int dayOfYear = 1;  // 1..DaysPerYear

    public event Action<int> OnYearChanged;
    public event Action<int> OnSeasonChanged; // passes SeasonIndex

    public int Year => year;
    public int DayOfYear => dayOfYear;
    public int SeasonCount => Mathf.Max(1, seasons.Count);
    public int DaysPerYear { get; private set; }

    public int SeasonIndex
    {
        get
        {
            var (idx, _) = ResolveSeasonAndDay(dayOfYear);
            return idx;
        }
    }

    public string CurrentSeasonName => seasons.Count == 0 ? "Season" : seasons[SeasonIndex].name;

    public int DayOfSeason
    {
        get
        {
            var (_, dayInSeason) = ResolveSeasonAndDay(dayOfYear);
            return dayInSeason;
        }
    }

    private GameClock _clock;

    private void Awake()
    {
        RecomputeDaysPerYear();
        dayOfYear = Mathf.Clamp(dayOfYear, 1, DaysPerYear);
    }

    private void OnEnable()
    {
        _clock = GameClockAPI.Find();
        if (_clock != null) _clock.OnDayChanged += HandleDayAdvanced;
    }

    private void OnDisable()
    {
        if (_clock != null) _clock.OnDayChanged -= HandleDayAdvanced;
        _clock = null;
    }

    private void HandleDayAdvanced(int newClockDay)
    {
        AdvanceOneDay();
    }

    public void ResetCalendar(int newYear, int newDayOfYear)
    {
        RecomputeDaysPerYear();
        int prevSeason = SeasonIndex;
        year = Mathf.Max(1, newYear);
        dayOfYear = Mathf.Clamp(newDayOfYear, 1, DaysPerYear);
        int nowSeason = SeasonIndex;
        if (nowSeason != prevSeason) SafeInvokeSeasonChanged(nowSeason);
    }

    public void AdvanceOneDay()
    {
        int prevSeason = SeasonIndex;
        dayOfYear++;
        if (dayOfYear > DaysPerYear)
        {
            dayOfYear = 1;
            year++;
            SafeInvokeYearChanged(year);
        }
        int nowSeason = SeasonIndex;
        if (nowSeason != prevSeason) SafeInvokeSeasonChanged(nowSeason);
    }

    private void RecomputeDaysPerYear()
    {
        if (seasons == null || seasons.Count == 0)
        {
            seasons = new List<SeasonDef> { new SeasonDef { name = "All-Year", days = 48 } };
        }
        int total = 0;
        foreach (var s in seasons) total += Mathf.Max(1, s.days);
        DaysPerYear = Mathf.Max(1, total);
    }

    private (int seasonIndex, int dayInSeason) ResolveSeasonAndDay(int dayOfYear1)
    {
        int d = Mathf.Clamp(dayOfYear1, 1, DaysPerYear);
        int acc = 0;
        for (int i = 0; i < seasons.Count; i++)
        {
            int len = Mathf.Max(1, seasons[i].days);
            if (d <= acc + len)
            {
                int dayInSeason = d - acc; // 1-based
                return (i, dayInSeason);
            }
            acc += len;
        }
        // Fallback
        return (0, d);
    }

    private void SafeInvokeYearChanged(int y)
    {
        try { OnYearChanged?.Invoke(y); } catch { }
    }

    private void SafeInvokeSeasonChanged(int season)
    {
        try { OnSeasonChanged?.Invoke(season); } catch { }
    }
}

public static class GameCalendarAPI
{
    public static GameCalendar Find()
    {
#if UNITY_2023_1_OR_NEWER
        // Prefer the modern API to avoid CS0618 warnings.
        return UnityEngine.Object.FindFirstObjectByType<GameCalendar>();
#else
        // Fallback for older Unity versions.
        return UnityEngine.Object.FindObjectOfType<GameCalendar>();
#endif
    }
}



// ===== FILE: Assets/Scripts/Systems/GameClock.cs =====
using System;
using UnityEngine;

/// <summary>
/// Central 24-hour game clock that advances with Time.deltaTime (respects pause & speed).
/// Exposes Day, Hour, Minute, and useful helpers for schedules/lighting.
/// </summary>
public class GameClock : MonoBehaviour
{
    [Header("Tuning")]
    [Tooltip("Real-time seconds for one full in-game day at 1× speed.")]
    [SerializeField] private float secondsPerGameDay = 600f; // 10 real minutes per game day by default

    [Tooltip("Starting in-game time (24h clock).")]
    [Range(0, 23)] [SerializeField] private int startHour = 8;
    [Range(0, 59)] [SerializeField] private int startMinute = 0;

    [Header("State (read-only)")]
    [SerializeField] private int currentDay = 1;
    [SerializeField] private float timeOfDaySeconds; // 0..secondsPerGameDay

    public event Action<int> OnDayChanged;

    public int Day => currentDay;
    public float NormalizedDay => secondsPerGameDay <= 0f ? 0f : Mathf.Clamp01(timeOfDaySeconds / secondsPerGameDay);

    public int Hour24
    {
        get
        {
            float hourLen = HourLengthSeconds;
            return Mathf.FloorToInt(timeOfDaySeconds / hourLen) % 24;
        }
    }

    public int Minute
    {
        get
        {
            float minuteLen = MinuteLengthSeconds;
            return Mathf.FloorToInt(timeOfDaySeconds / minuteLen) % 60;
        }
    }

    public int Second
    {
        get
        {
            float secondLen = SecondLengthSeconds;
            return Mathf.FloorToInt(timeOfDaySeconds / secondLen) % 60;
        }
    }

    public string TimeHHMM => $"{Hour24:00}:{Minute:00}";

    private float HourLengthSeconds => secondsPerGameDay / 24f;
    private float MinuteLengthSeconds => secondsPerGameDay / (24f * 60f);
    private float SecondLengthSeconds => secondsPerGameDay / (24f * 60f * 60f);

    private void Awake()
    {
        if (secondsPerGameDay <= 0f) secondsPerGameDay = 600f;
        InitializeToStartTime();
    }

    private void Update()
    {
        // deltaTime respects pause & timeScale; perfect for the clock.
        timeOfDaySeconds += Time.deltaTime;

        if (timeOfDaySeconds >= secondsPerGameDay)
        {
            timeOfDaySeconds -= secondsPerGameDay;
            currentDay = Mathf.Max(1, currentDay + 1);
            try { OnDayChanged?.Invoke(currentDay); } catch { /* ignore listener errors */ }
        }
    }

    /// <summary>Resets the clock to a specific day/hour/minute (seconds = 0).</summary>
    public void ResetClock(int day, int hour, int minute)
    {
        currentDay = Mathf.Max(1, day);
        SetTimeOfDay(hour, minute, 0);
    }

    private void InitializeToStartTime()
    {
        currentDay = Mathf.Max(1, currentDay);
        SetTimeOfDay(startHour, startMinute, 0);
    }

    private void SetTimeOfDay(int hour, int minute, int second)
    {
        hour = Mathf.Clamp(hour, 0, 23);
        minute = Mathf.Clamp(minute, 0, 59);
        second = Mathf.Clamp(second, 0, 59);

        // Map HH:MM:SS to our simulated-day seconds.
        float realSecondsInDay = (hour * 3600f) + (minute * 60f) + second;
        float t = realSecondsInDay / 86400f; // 0..1
        timeOfDaySeconds = Mathf.Repeat(t * secondsPerGameDay, secondsPerGameDay);
    }
}

// Convenience static accessor if desired elsewhere.
public static class GameClockAPI
{
    public static GameClock Find()
    {
#if UNITY_2023_1_OR_NEWER
        // Prefer the modern API to avoid CS0618 warnings.
        return UnityEngine.Object.FindFirstObjectByType<GameClock>();
#else
        // Fallback for older Unity versions.
        return UnityEngine.Object.FindObjectOfType<GameClock>();
#endif
    }
}


// ===== FILE: Assets/Scripts/Systems/PauseController.cs =====
using System;
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.LowLevel;
#endif

/// <summary>
/// Global pause toggle (Space). Pauses via Time.timeScale and shows a tiny overlay while paused.
/// </summary>
[AddComponentMenu("Systems/Pause Controller")]
public class PauseController : MonoBehaviour
{
    public static bool IsPaused { get; private set; }
    public static float CurrentSpeed { get; private set; } = 1f; // 1x by default
    public static event Action<bool> OnPauseChanged;

    [Header("Overlay")]
    [SerializeField] private Vector2 indicatorPadding = new Vector2(12f, 8f);
    [SerializeField] private float indicatorScale = 0.022f; // % of screen height for font sizing

#if ENABLE_INPUT_SYSTEM
    private InputAction _pauseAction;
    private InputAction _speed1Action;
    private InputAction _speed2Action;
    private InputAction _speed3Action;
#endif

    private void Update()
    {
#if ENABLE_INPUT_SYSTEM
        // With the new Input System active, we use an InputAction (enabled in OnEnable).
#else
        if (Input.GetKeyDown(KeyCode.Space))
        {
            TogglePause();
        }
        if (Input.GetKeyDown(KeyCode.Alpha1)) SetSpeed(1f);
        if (Input.GetKeyDown(KeyCode.Alpha2)) SetSpeed(2f);
        if (Input.GetKeyDown(KeyCode.Alpha3)) SetSpeed(3f);
#endif
    }

    public static void SetPaused(bool pause)
    {
        if (IsPaused == pause) return;
        IsPaused = pause;
        ApplyTimeScale();
#if UNITY_EDITOR
        Debug.Log($"Paused: {IsPaused}");
#endif
        try { OnPauseChanged?.Invoke(IsPaused); } catch { /* no-op */ }
    }

    public static void SetSpeed(float s)
    {
        CurrentSpeed = Mathf.Clamp(s, 0.25f, 3f);
        if (!IsPaused) ApplyTimeScale();
    }

    private static void ApplyTimeScale()
    {
        Time.timeScale = IsPaused ? 0f : CurrentSpeed;
    }

    private void TogglePause()
    {
        SetPaused(!IsPaused);
    }

#if ENABLE_INPUT_SYSTEM
    private void OnEnable()
    {
        if (_pauseAction == null)
        {
            // Bind keyboard Space; also allow gamepad Start as a convenience.
            _pauseAction = new InputAction("Pause", binding: "<Keyboard>/space");
            _pauseAction.AddBinding("<Gamepad>/start");
            _pauseAction.performed += OnPausePerformed;
        }
        if (_speed1Action == null)
        {
            _speed1Action = new InputAction("Speed1", binding: "<Keyboard>/1");
            _speed1Action.performed += ctx => SetSpeed(1f);
        }
        if (_speed2Action == null)
        {
            _speed2Action = new InputAction("Speed2", binding: "<Keyboard>/2");
            _speed2Action.performed += ctx => SetSpeed(2f);
        }
        if (_speed3Action == null)
        {
            _speed3Action = new InputAction("Speed3", binding: "<Keyboard>/3");
            _speed3Action.performed += ctx => SetSpeed(3f);
        }
        _pauseAction.Enable();
        _speed1Action.Enable();
        _speed2Action.Enable();
        _speed3Action.Enable();
    }

    private void OnDisable()
    {
        if (_pauseAction != null)
            _pauseAction.Disable();
        if (_speed1Action != null)
            _speed1Action.Disable();
        if (_speed2Action != null)
            _speed2Action.Disable();
        if (_speed3Action != null)
            _speed3Action.Disable();
    }

    private void OnPausePerformed(InputAction.CallbackContext ctx)
    {
        TogglePause();
    }
#endif

    private void OnGUI()
    {
        // Top-right speed (and paused) indicator
        var sw = Screen.width;
        var sh = Screen.height;

        var label = new GUIStyle(GUI.skin.label)
        {
            alignment = TextAnchor.UpperRight,
            wordWrap = false,
            fontSize = Mathf.Max(12, Mathf.RoundToInt(sh * indicatorScale))
        };

        string text = IsPaused ? $"Paused — Speed: {CurrentSpeed:0.##}×" : $"Speed: {CurrentSpeed:0.##}×";
        Vector2 size = label.CalcSize(new GUIContent(text));
        float x = sw - size.x - indicatorPadding.x;
        float y = indicatorPadding.y;
        GUI.Label(new Rect(x, y, size.x, size.y), text, label);
    }
}


// ===== FILE: Assets/Scripts/Systems/PawnInteractionManager.cs =====
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Detects pawn/pawn overlaps and starts short "chat" interactions:
/// they walk side-by-side for a few seconds, then the follower returns to
/// its collision point along the shortest route.
/// If one pawn is controlled, the non-controlled pawn is always the follower.
/// </summary>
[AddComponentMenu("Systems/Pawn Interaction Manager")]
public class PawnInteractionManager : MonoBehaviour
{
    [SerializeField] private float minChatSeconds = 2.5f;
    [SerializeField] private float maxChatSeconds = 4.0f;
    [SerializeField] private float extraRadiusPadding = 0.12f; // widen trigger to improve reliability
    [SerializeField] private float pairRetestCooldown = 2.0f;  // seconds after an interaction ends before same pair can retrigger

    // Remember last time two specific pawns interacted to avoid immediate retriggers.
    private readonly Dictionary<(int,int), float> pairCooldownUntil = new Dictionary<(int,int), float>();

    private void Update()
    {
        // If any pawn is being controlled, still allow interactions with others (but controlled pawn will always be leader).
        if (SpritePawn.Instances.Count < 2) return;

        var now = Time.unscaledTime;
        // Copy to list to avoid potential enumeration issues if Instances changes mid-frame.
        var list = ListCache;
        list.Clear();
        foreach (var p in SpritePawn.Instances) if (p != null) list.Add(p);

        int n = list.Count;
        for (int i = 0; i < n; i++)
        {
            var a = list[i];
            if (a == null || !a.IsInteractable) continue;

            for (int j = i + 1; j < n; j++)
            {
                var b = list[j];
                if (b == null || !b.IsInteractable) continue;

                // Pair cooldown gate
                var key = GetKey(a, b);
                if (pairCooldownUntil.TryGetValue(key, out float until) && now < until) continue;

                // Distance check (XZ)
                Vector3 pa = a.transform.position;
                Vector3 pb = b.transform.position;
                float dx = pa.x - pb.x;
                float dz = pa.z - pb.z;
                float dist2 = dx * dx + dz * dz;
                float rad = (a.CollisionRadius + b.CollisionRadius) * 1.05f + extraRadiusPadding;
                if (dist2 > rad * rad) continue;

                // Sprinting cancels/ignores interactions (dash through)
                if (a.IsSprinting || b.IsSprinting)
                    continue;

                // Decide leader/follower
                SpritePawn leader, follower;
                if (a.IsControlled && !b.IsControlled) { leader = a; follower = b; }
                else if (b.IsControlled && !a.IsControlled) { leader = b; follower = a; }
                else
                {
                    // 50/50 random when both are AI
                    if (Random.value < 0.5f) { leader = a; follower = b; } else { leader = b; follower = a; }
                }

                // Start chat interaction
                float seconds = Random.Range(minChatSeconds, maxChatSeconds);
                // Use midpoint as collision point so both agree on the same spot visually.
                Vector3 collisionPoint = (pa + pb) * 0.5f;
                leader.BeginChatLeader(follower, seconds, collisionPoint);
                follower.BeginChatFollower(leader, seconds, collisionPoint);

                // Per-pair cooldown
                pairCooldownUntil[key] = now + pairRetestCooldown;
            }
        }
    }

    private static (int,int) GetKey(SpritePawn a, SpritePawn b)
    {
        int ia = a.GetInstanceID();
        int ib = b.GetInstanceID();
        return ia < ib ? (ia, ib) : (ib, ia);
    }

    // Simple reusable list to avoid allocs
    private static readonly List<SpritePawn> ListCache = new List<SpritePawn>(16);
}


// ===== FILE: Assets/Scripts/Systems/SelectionController.cs =====
using System;
using System.Collections.Generic;
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
#endif

/// <summary>
/// Central selection controller.
/// - Single click selects a pawn (click empty clears).
/// - Drag-select (marquee) to select one or many pawns.
/// </summary>
[AddComponentMenu("Systems/Selection Controller")]
public class SelectionController : MonoBehaviour
{
    public static SpritePawn Selected { get; private set; }
    public static event Action<SpritePawn> OnSelectionChanged;
    private static SelectionController _instance;

    private static readonly List<SpritePawn> _selectedGroup = new List<SpritePawn>();
    public static IReadOnlyList<SpritePawn> SelectedGroup => _selectedGroup;

    private Camera _cam;

    // Drag/marquee state (screen-space, origin bottom-left)
    private bool _dragging;
    private Vector2 _dragStart;
    private Vector2 _dragNow;
    private const float _dragThreshold = 6f; // pixels

    // If a press began over HUD, ignore the whole press/drag/release sequence.
    private bool _pressOverHUD;

    // GUI helpers
    private static Texture2D _texWhite;

    private void Awake()
    {
        _cam = Camera.main;
        if (_cam == null)
        {
            // Fallback to any camera in scene
#if UNITY_2022_2_OR_NEWER
            var any = UnityEngine.Object.FindAnyObjectByType<Camera>();
#else
            var any = UnityEngine.Object.FindObjectOfType<Camera>();
#endif
            _cam = any;
        }
    }
    private void OnEnable() { _instance = this; }
    private void OnDisable() { if (_instance == this) _instance = null; }

    private void Update()
    {
        // Handle mouse input for both legacy and new input systems.
#if ENABLE_INPUT_SYSTEM
        var mouse = Mouse.current;
        if (mouse != null)
        {
            Vector2 pos = mouse.position.ReadValue();
            // If we are controlling a pawn, block selection input unless it's over HUD (so gizmos remain usable).
            if (ControlManager.Controlled != null && !IsOverHUD(pos))
            {
                // Still allow HUD clicks to go through (handled in SelectionHUD)
                _pressOverHUD = true;
                return;
            }
            if (IsOverHUD(pos)) { if (mouse.leftButton.wasPressedThisFrame) _pressOverHUD = true; return; }
            if (mouse.leftButton.wasPressedThisFrame) OnMouseDown(pos);
            if (mouse.leftButton.isPressed) OnMouseDrag(pos);
            if (mouse.leftButton.wasReleasedThisFrame) OnMouseUp(pos);
            return;
        }
#endif

        // Legacy Input fallback
        Vector2 mpos = Input.mousePosition;
        if (ControlManager.Controlled != null && !IsOverHUD(mpos))
        {
            if (Input.GetMouseButtonDown(0)) _pressOverHUD = true;
            // Ignore all selection while controlled (unless HUD)
            return;
        }

        if (IsOverHUD(mpos))
        {
            if (Input.GetMouseButtonDown(0)) _pressOverHUD = true;
            return;
        }
        if (Input.GetMouseButtonDown(0)) OnMouseDown(mpos);
        if (Input.GetMouseButton(0)) OnMouseDrag(mpos);
        if (Input.GetMouseButtonUp(0)) OnMouseUp(mpos);
    }

    public static void SetSelected(SpritePawn pawn)
    {
        if (Selected == pawn)
        {
            // Keep group as-is; still raise event for listeners.
            try { OnSelectionChanged?.Invoke(Selected); } catch { }
            return;
        }
        Selected = pawn; // primary selection
        try { OnSelectionChanged?.Invoke(Selected); } catch { /* no-op */ }
    }

    /// <summary>
    /// Clears the group and selects only the provided pawn. Used when assuming control.
    /// </summary>
    public static void SelectOnly(SpritePawn pawn)
    {
        if (_instance == null)
        {
            SetSelected(pawn);
            return;
        }
        // Turn off previous rings
        for (int i = 0; i < _selectedGroup.Count; i++)
        {
            var p = _selectedGroup[i];
            if (p != null) p.SetSelected(false);
        }
        _selectedGroup.Clear();
        if (pawn != null)
        {
            _selectedGroup.Add(pawn);
            pawn.SetSelected(true);
        }
        SetSelected(pawn);
    }
    private void ApplyGroupSelection(List<SpritePawn> newGroup)
    {
        // Turn off previous rings
        for (int i = 0; i < _selectedGroup.Count; i++)
        {
            var p = _selectedGroup[i];
            if (p != null) p.SetSelected(false);
        }

        _selectedGroup.Clear();
        if (newGroup != null && newGroup.Count > 0)
        {
            _selectedGroup.AddRange(newGroup);
            // Turn on rings for new group
            for (int i = 0; i < _selectedGroup.Count; i++)
            {
                var p = _selectedGroup[i];
                if (p != null) p.SetSelected(true);
            }
            // Primary = first
            SetSelected(_selectedGroup[0]);
        }
        else
        {
            SetSelected(null);
        }
    }

    private void SingleClickSelect(Vector2 screenPosBL)
    {
        if (_cam == null) return;
        var ray = _cam.ScreenPointToRay(screenPosBL);
        if (Physics.Raycast(ray, out var hit, 1000f, ~0, QueryTriggerInteraction.Ignore))
        {
            var pawn = hit.collider != null ? hit.collider.GetComponentInParent<SpritePawn>() : null;
            var list = new List<SpritePawn>();
            if (pawn != null) list.Add(pawn);
            ApplyGroupSelection(list);
        }
        else
        {
            ApplyGroupSelection(null);
        }
    }

    private void OnMouseDown(Vector2 screenPosBL)
    {
        if (_pressOverHUD) return;
        _dragStart = screenPosBL;
        _dragNow = screenPosBL;
        _dragging = false;
    }

    private void OnMouseDrag(Vector2 screenPosBL)
    {
        if (_pressOverHUD) return;
        _dragNow = screenPosBL;
        if (!_dragging && Vector2.Distance(_dragStart, _dragNow) > _dragThreshold)
        {
            _dragging = true;
        }
    }

    private void OnMouseUp(Vector2 screenPosBL)
    {
        if (_pressOverHUD) { _pressOverHUD = false; return; }
        _dragNow = screenPosBL;
        if (!_dragging)
        {
            // Treat as a click
            SingleClickSelect(screenPosBL);
        }
        else
        {
            // Marquee select
            var rect = GetScreenRectBL(_dragStart, _dragNow);
            var candidates = new List<SpritePawn>();
            if (_cam != null)
            {
                foreach (var pawn in SpritePawn.Instances)
                {
                    if (pawn == null) continue;
                    var wp = pawn.transform.position;
                    var sp = _cam.WorldToScreenPoint(wp);
                    if (sp.z < 0f) continue; // behind camera
                    var p = new Vector2(sp.x, sp.y); // bottom-left origin
                    if (rect.Contains(p))
                    {
                        candidates.Add(pawn);
                    }
                }
            }
            ApplyGroupSelection(candidates);
        }
        _dragging = false;
    }

    private static Rect GetScreenRectBL(Vector2 aBL, Vector2 bBL)
    {
        float xMin = Mathf.Min(aBL.x, bBL.x);
        float xMax = Mathf.Max(aBL.x, bBL.x);
        float yMin = Mathf.Min(aBL.y, bBL.y);
        float yMax = Mathf.Max(aBL.y, bBL.y);
        return Rect.MinMaxRect(xMin, yMin, xMax, yMax);
    }

    private bool IsOverHUD(Vector2 screenPosBL)
    {
        var p = SelectionHUD.LastPanelRectBL;
        var g = SelectionHUD.LastGizmoRectBL;
        bool overPanel = p.width > 0f && p.height > 0f && p.Contains(screenPosBL);
        bool overGizmo = g.width > 0f && g.height > 0f && g.Contains(screenPosBL);
        return overPanel || overGizmo;
    }

    private void OnGUI()
    {
        if (!_dragging) return;

        var sw = Screen.width;
        var sh = Screen.height;

        // Convert bottom-left rect to GUI-space (top-left origin)
        var rBL = GetScreenRectBL(_dragStart, _dragNow);
        var rGUI = new Rect(rBL.xMin, sh - rBL.yMax, rBL.width, rBL.height);

        if (_texWhite == null)
        {
            _texWhite = new Texture2D(1, 1, TextureFormat.RGBA32, false);
            _texWhite.SetPixel(0, 0, Color.white);
            _texWhite.Apply(false, false);
        }

        // Fill
        var fillCol = new Color(0.2f, 0.6f, 1f, 0.15f);
        var borderCol = new Color(0.2f, 0.6f, 1f, 0.9f);
        GUI.color = fillCol;
        GUI.DrawTexture(rGUI, _texWhite);
        // Border
        GUI.color = borderCol;
        GUI.DrawTexture(new Rect(rGUI.xMin, rGUI.yMin, rGUI.width, 2f), _texWhite);
        GUI.DrawTexture(new Rect(rGUI.xMin, rGUI.yMax - 2f, rGUI.width, 2f), _texWhite);
        GUI.DrawTexture(new Rect(rGUI.xMin, rGUI.yMin, 2f, rGUI.height), _texWhite);
        GUI.DrawTexture(new Rect(rGUI.xMax - 2f, rGUI.yMin, 2f, rGUI.height), _texWhite);
        GUI.color = Color.white;
    }
}


// ===== FILE: Assets/Scripts/UI/ClockHUD.cs =====
using UnityEngine;

/// <summary>
/// Minimal IMGUI overlay showing Year/Season/Day and 24h time (HH:MM).
/// Rendered under the speed indicator at the top-right, slightly smaller.
/// </summary>
public class ClockHUD : MonoBehaviour
{
    [Header("Layout")]
    [SerializeField] private Vector2 topRightOffset = new Vector2(12f, 12f);
    [SerializeField] private float fontPct = 0.032f; // slightly smaller than speed text
    [SerializeField] private float extraTopOffsetPct = 0.040f; // approximate height of speed label + padding

    private GUIStyle _label;
    private GUIStyle _shadow;
    private void Ensure()
    {
        if (_label == null)
        {
            _label = new GUIStyle(GUI.skin.label)
            {
                alignment = TextAnchor.UpperRight,
                fontStyle = FontStyle.Bold
            };
            _label.normal.textColor = Color.white;
        }
        if (_shadow == null)
        {
            _shadow = new GUIStyle(_label);
            _shadow.normal.textColor = new Color(0f, 0f, 0f, 0.6f);
        }
    }

    private void OnGUI()
    {
        var clock = GameClockAPI.Find();
        if (clock == null) return; // nothing to show

        var cal = GameCalendarAPI.Find();

        Ensure();

        int fontSize = Mathf.RoundToInt(Mathf.Max(14f, Screen.height * fontPct));
        _label.fontSize = fontSize;
        _shadow.fontSize = fontSize;

        // Compose text: prefer calendar if available
        string prefix;
        if (cal != null)
        {
            prefix = $"Y{cal.Year} · {cal.CurrentSeasonName} {cal.DayOfSeason:00}";
        }
        else
        {
            prefix = $"Day {clock.Day:0}";
        }
        string text = $"{prefix} — {clock.TimeHHMM}";

        // Layout: top-right, below speed label. We approximate the speed label height via extraTopOffsetPct.
        float y = topRightOffset.y + Mathf.Max(24f, Screen.height * extraTopOffsetPct);
        Rect r = new Rect(0f + topRightOffset.x, y, Screen.width - (topRightOffset.x * 2f), Screen.height);

        // Shadow + main text
        Rect rShadow = new Rect(r.x + 1, r.y + 1, r.width, r.height);
        GUI.Label(rShadow, text, _shadow);
        GUI.Label(r, text, _label);
    }
}


// ===== FILE: Assets/Scripts/UI/IntroScreen.cs =====
using UnityEngine;

public class IntroScreen : MonoBehaviour
{
    // Public flag so other HUDs (e.g., Build) can hide during the intro menu
    public static bool IsVisible { get; private set; }
    [Header("Layout")]
    [SerializeField] private float titlePct = 0.18f;            // % of screen height for the title font size
    [SerializeField] private float buttonPct = 0.06f;           // % of screen height for button height
    [SerializeField] private float minButtonHeight = 64f;       // hard floor so buttons are never tiny
    [SerializeField] private Color backgroundColor = new Color(0.08f, 0.09f, 0.11f, 1f); // opaque

    [Header("Content")]
    [SerializeField] private string gameTitle = "Fantasy Colony";

    [Header("Map Settings")]
    [Tooltip("Select the starting map size.")]
    [SerializeField] private string[] mapSizeLabels = { "32×32", "64×64", "128×128", "256×256" };
    private static readonly int[] mapSizes = { 32, 64, 128, 256 };
    [SerializeField] private int selectedMapIndex = 2; // Default to 128×128

    private bool showMenu = true;
    private GUIStyle titleStyle;
    private GUIStyle buttonStyle;
    private GUIStyle sizeStyle;
    private GUIStyle sizeSelectedStyle;
    private GUIStyle confirmStyle;
    private GUIStyle bgStyle;
    private Texture2D bgTex;
    private Texture2D sizeTex;
    private Texture2D sizeSelTex;

    private void OnEnable() { IsVisible = true; }
    private void OnDisable() { IsVisible = false; }
    private void EnsureStyles()
    {
        if (bgTex == null)
        {
            bgTex = new Texture2D(1, 1, TextureFormat.RGBA32, false);
            bgTex.SetPixel(0, 0, backgroundColor);
            bgTex.Apply();
        }
        if (sizeTex == null)
        {
            sizeTex = new Texture2D(1, 1, TextureFormat.RGBA32, false);
            sizeTex.SetPixel(0, 0, new Color(0.22f, 0.24f, 0.28f, 1f));
            sizeTex.Apply();
        }
        if (sizeSelTex == null)
        {
            sizeSelTex = new Texture2D(1, 1, TextureFormat.RGBA32, false);
            sizeSelTex.SetPixel(0, 0, new Color(0.32f, 0.52f, 0.92f, 1f));
            sizeSelTex.Apply();
        }
        if (bgStyle == null)
        {
            bgStyle = new GUIStyle(GUI.skin.box)
            {
                normal = { background = bgTex },
                border = new RectOffset(0, 0, 0, 0),
                margin = new RectOffset(0, 0, 0, 0),
                padding = new RectOffset(0, 0, 0, 0)
            };
        }
        if (titleStyle == null)
        {
            titleStyle = new GUIStyle(GUI.skin.label)
            {
                alignment = TextAnchor.MiddleCenter,
                fontStyle = FontStyle.Bold,
                wordWrap = true
            };
            titleStyle.normal.textColor = Color.white;
        }
        if (buttonStyle == null)
        {
            buttonStyle = new GUIStyle(GUI.skin.button)
            {
                alignment = TextAnchor.MiddleCenter
            };
        }
        if (sizeStyle == null)
        {
            sizeStyle = new GUIStyle(buttonStyle);
            sizeStyle.normal.background = sizeTex;
            sizeStyle.hover.background = sizeTex;
            sizeStyle.active.background = sizeTex;
            sizeStyle.fontStyle = FontStyle.Normal;
            sizeStyle.normal.textColor = new Color(0.9f, 0.9f, 0.9f, 1f);
        }
        if (sizeSelectedStyle == null)
        {
            sizeSelectedStyle = new GUIStyle(buttonStyle);
            sizeSelectedStyle.normal.background = sizeSelTex;
            sizeSelectedStyle.hover.background = sizeSelTex;
            sizeSelectedStyle.active.background = sizeSelTex;
            sizeSelectedStyle.fontStyle = FontStyle.Bold;
            sizeSelectedStyle.normal.textColor = Color.white;
        }
        if (confirmStyle == null)
        {
            confirmStyle = new GUIStyle(GUI.skin.label) { alignment = TextAnchor.MiddleCenter, fontStyle = FontStyle.Bold };
            confirmStyle.normal.textColor = Color.white;
        }
    }

    private void OnGUI()
    {
        // Keep public flag synced so other HUDs can hide while intro is up
        IsVisible = showMenu;
        if (!showMenu) return;

        EnsureStyles();

        // Full-screen opaque background
        Rect full = new Rect(0, 0, Screen.width, Screen.height);
        GUI.Box(full, GUIContent.none, bgStyle);

        // Dynamic sizes based on screen height
        float titleSize = Mathf.Max(32f, Screen.height * titlePct);
        float btnH = Mathf.Max(minButtonHeight, Screen.height * buttonPct);

        titleStyle.fontSize = Mathf.RoundToInt(titleSize);
        buttonStyle.fontSize = Mathf.RoundToInt(btnH * 0.38f);
        sizeStyle.fontSize = buttonStyle.fontSize;
        sizeSelectedStyle.fontSize = buttonStyle.fontSize;
        confirmStyle.fontSize = Mathf.RoundToInt(btnH * 0.45f);

        GUILayout.BeginArea(full);
        GUILayout.BeginVertical();
        GUILayout.FlexibleSpace();

        // Title
        GUILayout.Label(gameTitle, titleStyle);
        GUILayout.Space(btnH * 0.6f);

        // Map size grid (2×2) with large, tappable buttons
        float gridPadding = Mathf.Max(8f, btnH * 0.25f);
        for (int row = 0; row < 2; row++)
        {
            GUILayout.BeginHorizontal();
            GUILayout.Space(gridPadding);
            for (int col = 0; col < 2; col++)
            {
                int i = row * 2 + col;
                if (i >= mapSizeLabels.Length) break;

                bool isActive = selectedMapIndex == i;
                string label = isActive ? mapSizeLabels[i] + "   \u2713" : mapSizeLabels[i];
                GUIStyle st = isActive ? sizeSelectedStyle : sizeStyle;
                if (GUILayout.Button(label, st, GUILayout.Height(btnH), GUILayout.ExpandWidth(true)))
                {
                    selectedMapIndex = i;
                }

                GUILayout.Space(gridPadding);
            }
            GUILayout.EndHorizontal();
            GUILayout.Space(gridPadding * 0.6f);
        }

        GUILayout.Space(btnH * 0.2f);
        GUILayout.Label($"Map Size: {mapSizeLabels[selectedMapIndex]}", confirmStyle);

        GUILayout.Space(btnH * 0.4f);

        // Start button (extra tall)
        if (GUILayout.Button("Start", buttonStyle, GUILayout.Height(btnH * 1.2f)))
        {
            OnStartGame();
        }
        GUILayout.Space(gridPadding * 0.5f);

        // Quit button
        if (GUILayout.Button("Quit", buttonStyle, GUILayout.Height(btnH)))
        {
#if UNITY_EDITOR
            UnityEditor.EditorApplication.isPlaying = false;
#else
            Application.Quit();
#endif
        }

        GUILayout.FlexibleSpace();
        GUILayout.EndVertical();
        GUILayout.EndArea();
    }

    // Called when Start is pressed: clear/hide the intro overlay.
private void OnStartGame()
{
        // Generate the selected grid map and frame the camera before hiding the menu.
        int idx = Mathf.Clamp(selectedMapIndex, 0, mapSizes.Length - 1);
        int size = mapSizes[idx];
        WorldBootstrap.GenerateDefaultGrid(size, size, 1f);

        // Spawn test pawns
        PawnBootstrap.SpawnSpritePawn();
        PawnBootstrap.SpawnSecondPawn();

        // Reset the game clock to Day 1 at the configured start time.
        var clock = GameClockAPI.Find();
        if (clock != null) clock.ResetClock(1, 8, 0);

        // Reset the calendar to Year 1, Day 1.
        var cal = GameCalendarAPI.Find();
        if (cal != null) cal.ResetCalendar(1, 1);

        showMenu = false;
        IsVisible = false;
    }
}



// ===== FILE: Assets/Scripts/UI/SelectionHUD.cs =====
using UnityEngine;

/// <summary>
/// Bottom-left info panel (blank for now) and a right-side gizmo strip.
/// Appears only when a pawn is selected. First gizmo: Assume Control / Release.
/// </summary>
[AddComponentMenu("UI/Selection HUD")]
public class SelectionHUD : MonoBehaviour
{
    [Header("Layout")]
    [SerializeField] private Vector2 panelMinMaxW = new Vector2(260f, 420f);
    [SerializeField] private Vector2 panelMinMaxH = new Vector2(130f, 220f);
    [SerializeField] private float panelWidthPct = 0.28f; // of screen width
    [SerializeField] private float panelHeightPct = 0.22f; // of screen height
    [SerializeField] private float margin = 12f;
    [SerializeField] private float gizmoSpacing = 8f;
    [SerializeField] private float buttonHeightPct = 0.055f; // of screen height

    private GUIStyle _panelStyle;
    private GUIStyle _headerStyle;
    private GUIStyle _buttonStyle;
    private GUIStyle _labelStyle;

    // Expose last-drawn HUD rects in SCREEN (bottom-left origin) space so SelectionController can ignore clicks over HUD.
    public static Rect LastPanelRectBL { get; private set; }
    public static Rect LastGizmoRectBL { get; private set; }

    private void OnGUI()
    {
        var selected = SelectionController.Selected;
        if (selected == null)
        {
            LastPanelRectBL = Rect.zero;
            LastGizmoRectBL = Rect.zero;
            return;
        }

        float sw = Screen.width;
        float sh = Screen.height;

        // Sizing
        float panelW = Mathf.Clamp(sw * panelWidthPct, panelMinMaxW.x, panelMinMaxW.y);
        float panelH = Mathf.Clamp(sh * panelHeightPct, panelMinMaxH.x, panelMinMaxH.y);
        float btnH = Mathf.Max(28f, sh * buttonHeightPct);

        // Panel rect (bottom-left anchor)
        var panelRectGUI = new Rect(margin, sh - panelH - margin, panelW, panelH);

        // Gizmo strip to the right of the panel
        var gizmoRectGUI = new Rect(panelRectGUI.xMax + gizmoSpacing, panelRectGUI.y, Mathf.Max(160f, sw * 0.15f), panelRectGUI.height);

        EnsureStyles(sh);

        // Update BL-space rects for input guarding
        LastPanelRectBL = new Rect(panelRectGUI.xMin, sh - (panelRectGUI.yMin + panelRectGUI.height), panelRectGUI.width, panelRectGUI.height);
        LastGizmoRectBL = new Rect(gizmoRectGUI.xMin, sh - (gizmoRectGUI.yMin + gizmoRectGUI.height), gizmoRectGUI.width, gizmoRectGUI.height);

        // Draw panel (blank content for now; just a header for visual structure)
        GUILayout.BeginArea(panelRectGUI, GUIContent.none, _panelStyle);
        {
            GUILayout.Label("Unit Info", _headerStyle);
            GUILayout.Space(btnH * 0.2f);
            // Blank content placeholder
            GUILayout.Label("(Coming soon)", _labelStyle);
            GUILayout.FlexibleSpace();
        }
        GUILayout.EndArea();

        // Gizmos
        GUILayout.BeginArea(gizmoRectGUI);
        {
            // Assume/Release Control
            bool isControlled = (ControlManager.Controlled == selected);
            string btn = isControlled ? "Release Control" : "Assume Control";
            if (GUILayout.Button(btn, _buttonStyle, GUILayout.Height(btnH)))
            {
                if (isControlled) ControlManager.ReleaseControl();
                else ControlManager.AssumeControl(selected);
            }
            // Keep selection pinned to controlled pawn even if HUD was clicked first
            if (ControlManager.Controlled != null && SelectionController.Selected != ControlManager.Controlled)
            {
                SelectionController.SelectOnly(ControlManager.Controlled);
            }

            GUILayout.Space(btnH * 0.25f);
            GUILayout.Label("Tip: WASD/Arrows to move when controlled.\nSpace = Pause. 1/2/3 = Speed.", _labelStyle);
        }
        GUILayout.EndArea();
    }

    void EnsureStyles(float sh)
    {
        if (_panelStyle == null)
        {
            _panelStyle = new GUIStyle(GUI.skin.box)
            {
                padding = new RectOffset(12, 12, 10, 10)
            };
        }
        if (_headerStyle == null)
        {
            _headerStyle = new GUIStyle(GUI.skin.label)
            {
                alignment = TextAnchor.MiddleLeft,
                fontSize = Mathf.Max(14, Mathf.RoundToInt(sh * 0.028f)),
                fontStyle = FontStyle.Bold
            };
        }
        if (_buttonStyle == null)
        {
            _buttonStyle = new GUIStyle(GUI.skin.button)
            {
                fontSize = Mathf.Max(12, Mathf.RoundToInt(sh * 0.024f))
            };
        }
        if (_labelStyle == null)
        {
            _labelStyle = new GUIStyle(GUI.skin.label)
            {
                fontSize = Mathf.Max(11, Mathf.RoundToInt(sh * 0.02f)),
                wordWrap = true
            };
        }
    }
}



// ===== FILE: Assets/Scripts/Units/SpritePawn.cs =====
using System.Collections.Generic;
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
#endif

/// <summary>
/// SNES-style pawn that idly wanders around. Generates its own sprite and
/// supports simple chat interactions with other pawns.
/// </summary>
[AddComponentMenu("Units/Sprite Pawn (Test)")]
public class SpritePawn : MonoBehaviour
{
    // Registry used by selection and interaction systems
    public static readonly HashSet<SpritePawn> Instances = new HashSet<SpritePawn>();

    [Header("Sprite")]
    [SerializeField] private int spriteWidthPx = 16;
    [SerializeField] private int spriteHeightPx = 24;
    [SerializeField] private int pixelsPerUnit = 16;

    [Header("Palette")]
    [SerializeField] private Color body = new Color(0.82f, 0.80f, 0.65f, 1f);
    [SerializeField] private Color shade = new Color(0.62f, 0.60f, 0.48f, 1f);
    [SerializeField] private Color accent = new Color(0.35f, 0.42f, 0.65f, 1f);
    [SerializeField] private Color outline = new Color(0.10f, 0.10f, 0.10f, 1f);

    [Header("Selection Visual")]
    [SerializeField] private Color ringColor = new Color(1f, 0.92f, 0.25f, 1f);

    [Header("Movement")]
    [SerializeField] private float speed = 3f;
    [SerializeField] private float margin = 1.25f;

    [Header("Detection & Timing")]
    [SerializeField] private float collisionRadius = -1f; // <=0 => auto from sprite width
    [SerializeField] private float interactionCooldown = 2f;
    [SerializeField] private Vector2 chatDurationRange = new Vector2(2.5f, 4f);

    [Header("Chat Formation")]
    [SerializeField] private float chatLateral = 0.8f;           // side-by-side offset
    [SerializeField] private float chatApproachSmoothing = 8f;   // follower slot smoothing

    [Header("Idle Wander")]
    [SerializeField] private float wanderArriveRadius = 0.12f;
    [SerializeField] private float wanderPickMargin = 1f;
    [SerializeField] private float wanderMinWait = 0.4f;
    [SerializeField] private float wanderMaxWait = 1.2f;
    [SerializeField] private float wanderRepickSeconds = 6f;

    [Header("Manual Control")]
    [SerializeField] private float manualAccel = 20f;
    [SerializeField] private float manualDecel = 30f;
    private Vector2 manualInput;
    private Vector3 manualVel;

    // Public status used by manager
    public bool IsControlled => isControlled;
    // Allow controlled pawns to participate in interactions (as leaders); manager enforces follower rule.
    public bool IsInteractable => interactionState == InteractionState.None && Time.unscaledTime >= cooldownUntilUnscaled;
    public float CollisionRadius => (collisionRadius > 0f ? collisionRadius : Mathf.Max(0.2f, (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit) * 0.6f));
    [Header("Sprint")]
    [SerializeField] private float sprintMultiplier = 1.6f;
    private bool isSprinting;
    public bool IsSprinting => isSprinting && isControlled;

    // Internal state
    private Camera cam;
    private GameObject quadGO; private Material mat;
    private GameObject ringGO; private Material ringMat;
    private bool isControlled, isSelected;
    private Vector3 logicalPos;
    private Vector3 lastWorldPos, lastVelocity;

    // Wander
    private Vector3 wanderTarget;
    private bool hasWanderTarget;
    private float nextWanderPickUnscaled;
    private float wanderTargetSetUnscaled;
    private SimpleGridMap gridCache;

    // Interaction
    private enum InteractionState { None, ChatLeader, ChatFollower, ReturnToPoint }
    private InteractionState interactionState = InteractionState.None;
    private SpritePawn chatPartner;
    private float chatUntilUnscaled;
    private int chatSide = 1; // +1 right, -1 left relative to leader forward
    private float cooldownUntilUnscaled;
    private Vector3 returnPoint;

#if ENABLE_INPUT_SYSTEM
    private InputAction _moveAction;
#endif

    private void Awake()
    {
        cam = Camera.main;
        if (cam == null)
        {
#if UNITY_2022_2_OR_NEWER
            cam = UnityEngine.Object.FindAnyObjectByType<Camera>();
#else
            cam = UnityEngine.Object.FindObjectOfType<Camera>();
#endif
        }

        CreateVisual();
        EnsureCollider();
        CreateSelectionRing();

        logicalPos = transform.position;
        if (gridCache == null)
        {
#if UNITY_2022_2_OR_NEWER
            gridCache = UnityEngine.Object.FindAnyObjectByType<SimpleGridMap>();
#else
            gridCache = UnityEngine.Object.FindObjectOfType<SimpleGridMap>();
#endif
        }
        if (gridCache != null)
        {
            float w = gridCache.width * gridCache.tileSize;
            float h = gridCache.height * gridCache.tileSize;
            logicalPos = new Vector3(w * 0.5f, 0.02f, h * 0.5f);
        }
        else if (cam != null)
        {
            var b = PixelCameraHelper.OrthoWorldBounds(cam);
            logicalPos = new Vector3((b.minX + b.maxX) * 0.5f, 0.02f, (b.minZ + b.maxZ) * 0.5f);
        }
        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
        PickNewWanderTarget(true);
        FinalizeTransform();
    }

    private void OnEnable()
    {
        Instances.Add(this);
#if ENABLE_INPUT_SYSTEM
        if (_moveAction == null)
        {
            _moveAction = new InputAction("PawnMove", type: InputActionType.Value, binding: "2DVector");
            _moveAction.AddCompositeBinding("2DVector")
                .With("Up", "<Keyboard>/w").With("Up", "<Keyboard>/upArrow")
                .With("Down", "<Keyboard>/s").With("Down", "<Keyboard>/downArrow")
                .With("Left", "<Keyboard>/a").With("Left", "<Keyboard>/leftArrow")
                .With("Right", "<Keyboard>/d").With("Right", "<Keyboard>/rightArrow");
            _moveAction.AddBinding("<Gamepad>/leftStick");
        }
        _moveAction.Enable();
#endif
    }

    private void OnDisable()
    {
        Instances.Remove(this);
#if ENABLE_INPUT_SYSTEM
        _moveAction?.Disable();
#endif
    }

    private void Update()
    {
        if (isControlled && interactionState != InteractionState.None)
            EndInteraction();

        if (interactionState == InteractionState.ChatFollower && chatPartner != null)
        {
            UpdateChatFollower();
            FinalizeTransform();
            return;
        }
        if (interactionState == InteractionState.ReturnToPoint)
        {
            UpdateReturnToPoint();
            FinalizeTransform();
            return;
        }

        // Manual control overrides wandering
        if (isControlled)
        {
            UpdateManualControl();
            FinalizeTransform();
            return;
        }

        // Default idle wandering movement
        UpdateIdleWander();

        // Leader state: allow normal movement while timer runs
        if (interactionState == InteractionState.ChatLeader && Time.unscaledTime >= chatUntilUnscaled)
        {
            EndInteraction();
        }

        FinalizeTransform();
    }

    // ---------------- Manual control ----------------
    private void UpdateManualControl()
    {
        // Toggle sprint with Shift (works on both input systems)
#if ENABLE_INPUT_SYSTEM
        if (Keyboard.current != null &&
            (Keyboard.current.leftShiftKey.wasPressedThisFrame || Keyboard.current.rightShiftKey.wasPressedThisFrame))
        {
            isSprinting = !isSprinting;
        }
#else
        if (Input.GetKeyDown(KeyCode.LeftShift) || Input.GetKeyDown(KeyCode.RightShift)) isSprinting = !isSprinting;
#endif

        Vector2 input = ReadMoveInput();
        if (input.sqrMagnitude > 1f) input.Normalize();

        // target velocity in world XZ plane at "speed"
        float mult = isSprinting ? sprintMultiplier : 1f;
        Vector3 targetVel = new Vector3(input.x, 0f, input.y) * speed * mult;

        // accelerate/decelerate toward target
        Vector3 delta = targetVel - manualVel;
        float accel = (targetVel.sqrMagnitude > manualVel.sqrMagnitude) ? manualAccel : manualDecel;
        Vector3 change = Vector3.ClampMagnitude(delta, accel * Time.deltaTime);
        manualVel += change;

        // move
        logicalPos += manualVel * Time.deltaTime;

        // clamp to grid if available
        if (gridCache == null)
        {
#if UNITY_2022_2_OR_NEWER
            gridCache = UnityEngine.Object.FindAnyObjectByType<SimpleGridMap>();
#else
            gridCache = UnityEngine.Object.FindObjectOfType<SimpleGridMap>();
#endif
        }
        if (gridCache != null)
        {
            float minX = margin, minZ = margin;
            float maxX = gridCache.width * gridCache.tileSize - margin;
            float maxZ = gridCache.height * gridCache.tileSize - margin;
            logicalPos.x = Mathf.Clamp(logicalPos.x, minX, maxX);
            logicalPos.z = Mathf.Clamp(logicalPos.z, minZ, maxZ);
        }

        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
    }

    // --------------------------------------------------
    // Idle wandering
    // --------------------------------------------------
    private void UpdateIdleWander()
    {
        if (!hasWanderTarget || Time.unscaledTime >= nextWanderPickUnscaled ||
            (Time.unscaledTime - wanderTargetSetUnscaled) > wanderRepickSeconds ||
            Vector3.SqrMagnitude(new Vector3(wanderTarget.x - logicalPos.x, 0f, wanderTarget.z - logicalPos.z)) <= wanderArriveRadius * wanderArriveRadius)
        {
            PickNewWanderTarget(false);
        }

        Vector3 to = new Vector3(wanderTarget.x - logicalPos.x, 0f, wanderTarget.z - logicalPos.z);
        float dist = to.magnitude;
        if (dist > 1e-4f)
        {
            Vector3 dir = to / dist;
            float step = Mathf.Min(speed * Time.deltaTime, dist);
            logicalPos += dir * step;
        }
        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
    }

    private void PickNewWanderTarget(bool first)
    {
        if (gridCache == null)
        {
#if UNITY_2022_2_OR_NEWER
            gridCache = UnityEngine.Object.FindAnyObjectByType<SimpleGridMap>();
#else
            gridCache = UnityEngine.Object.FindObjectOfType<SimpleGridMap>();
#endif
        }

        float minX, maxX, minZ, maxZ;
        if (gridCache != null)
        {
            minX = margin + wanderPickMargin;
            minZ = margin + wanderPickMargin;
            maxX = gridCache.width * gridCache.tileSize - (margin + wanderPickMargin);
            maxZ = gridCache.height * gridCache.tileSize - (margin + wanderPickMargin);
        }
        else if (cam != null)
        {
            var b = PixelCameraHelper.OrthoWorldBounds(cam);
            minX = b.minX + (margin + wanderPickMargin);
            maxX = b.maxX - (margin + wanderPickMargin);
            minZ = b.minZ + (margin + wanderPickMargin);
            maxZ = b.maxZ - (margin + wanderPickMargin);
        }
        else
        {
            minX = -5f; maxX = 5f; minZ = -5f; maxZ = 5f;
        }

        if (minX > maxX) { float c = (minX + maxX) * 0.5f; minX = maxX = c; }
        if (minZ > maxZ) { float c = (minZ + maxZ) * 0.5f; minZ = maxZ = c; }

        float x = Random.Range(minX, maxX);
        float z = Random.Range(minZ, maxZ);
        wanderTarget = new Vector3(x, 0.02f, z);
        hasWanderTarget = true;
        wanderTargetSetUnscaled = Time.unscaledTime;
        float wait = first ? 0f : Random.Range(wanderMinWait, wanderMaxWait);
        nextWanderPickUnscaled = Time.unscaledTime + wait;
    }

    // --------------------------------------------------
    // Interaction API & behaviour
    // --------------------------------------------------
    public void BeginChatLeader(SpritePawn follower, float seconds, Vector3 collisionPoint)
    {
        interactionState = InteractionState.ChatLeader;
        chatPartner = follower;
        chatUntilUnscaled = Time.unscaledTime + Mathf.Clamp(seconds, chatDurationRange.x, chatDurationRange.y);
    }

    public void BeginChatFollower(SpritePawn leader, float seconds, Vector3 collisionPoint)
    {
        if (isControlled) return; // cannot be follower if controlled
        interactionState = InteractionState.ChatFollower;
        chatPartner = leader;
        chatUntilUnscaled = Time.unscaledTime + Mathf.Clamp(seconds, chatDurationRange.x, chatDurationRange.y);
        chatSide = Random.value < 0.5f ? -1 : +1;
        returnPoint = collisionPoint;
    }

    private void EndInteraction()
    {
        interactionState = InteractionState.None;
        chatPartner = null;
        cooldownUntilUnscaled = Time.unscaledTime + interactionCooldown;
    }

    private void UpdateChatFollower()
    {
        if (chatPartner == null)
        {
            EndInteraction();
            return;
        }

        Vector3 lp = chatPartner.transform.position;
        Vector3 fwd = chatPartner.lastVelocity.sqrMagnitude > 1e-6f
            ? chatPartner.lastVelocity.normalized
            : new Vector3(1f, 0f, 0f);
        Vector3 right = Vector3.Cross(Vector3.up, fwd).normalized;
        Vector3 slot = lp + right * (chatSide * chatLateral);

        Vector3 to = new Vector3(slot.x - logicalPos.x, 0f, slot.z - logicalPos.z);
        float dist = to.magnitude;
        if (dist > 1e-4f)
        {
            Vector3 dir = to / dist;
            float approach = Mathf.Min(speed, dist * chatApproachSmoothing) * Time.deltaTime;
            logicalPos += dir * approach;
        }
        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);

        if (Time.unscaledTime >= chatUntilUnscaled)
        {
            interactionState = InteractionState.ReturnToPoint;
            chatPartner = null;
        }
    }

    private void UpdateReturnToPoint()
    {
        Vector3 to = new Vector3(returnPoint.x - logicalPos.x, 0f, returnPoint.z - logicalPos.z);
        float dist = to.magnitude;
        float upp = cam != null ? PixelCameraHelper.WorldUnitsPerPixel(cam) : 0.01f;
        float arriveEps = Mathf.Max(upp, 0.05f);
        if (dist <= arriveEps)
        {
            logicalPos = new Vector3(returnPoint.x, 0.02f, returnPoint.z);
            transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
            interactionState = InteractionState.None;
            cooldownUntilUnscaled = Time.unscaledTime + interactionCooldown;
            hasWanderTarget = false;
            PickNewWanderTarget(false);
            return;
        }
        if (dist > 1e-4f)
        {
            Vector3 dir = to / dist;
            float step = Mathf.Min(speed * Time.deltaTime, dist);
            logicalPos += dir * step;
        }
        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
    }

    // --------------------------------------------------
    // Visual helpers
    // --------------------------------------------------
    private void FinalizeTransform()
    {
        Vector3 wp = transform.position;
        lastVelocity = (Time.deltaTime > 1e-6f) ? (wp - lastWorldPos) / Time.deltaTime : lastVelocity;
        lastVelocity.y = 0f;
        lastWorldPos = wp;
    }

    private Vector2 ReadMoveInput()
    {
#if ENABLE_INPUT_SYSTEM
        if (_moveAction != null) return _moveAction.ReadValue<Vector2>();
        return Vector2.zero;
#else
        float x = 0f, y = 0f;
        if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow)) x -= 1f;
        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow)) x += 1f;
        if (Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.DownArrow)) y -= 1f;
        if (Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.UpArrow)) y += 1f;
        return new Vector2(x, y);
#endif
    }

    private void CreateVisual()
    {
        int W = Mathf.Max(8, spriteWidthPx);
        int H = Mathf.Max(8, spriteHeightPx);
        var tex = new Texture2D(W, H, TextureFormat.RGBA32, false);
        tex.filterMode = FilterMode.Point;
        tex.wrapMode = TextureWrapMode.Clamp;

        var px = new Color32[W * H];
        Color32 cBody = body; Color32 cShade = shade; Color32 cOut = outline; Color32 cAcc = accent;
        for (int y = 0; y < H; y++)
        {
            for (int x = 0; x < W; x++)
            {
                bool border = (x == 0 || y == 0 || x == W - 1 || y == H - 1);
                Color32 c = border ? cOut : (y > H * 0.65f ? cShade : cBody);
                if (!border && y == (int)(H * 0.45f) && x > W * 0.2f && x < W * 0.8f) c = cAcc;
                px[y * W + x] = c;
            }
        }
        tex.SetPixels32(px); tex.Apply(false, false);

        var shader = Shader.Find("Unlit/Transparent") ?? Shader.Find("Sprites/Default") ?? Shader.Find("Unlit/Texture");
        mat = new Material(shader);
        if (mat.HasProperty("_BaseMap")) mat.SetTexture("_BaseMap", tex);
        if (mat.HasProperty("_MainTex")) mat.SetTexture("_MainTex", tex);
        if (mat.HasProperty("_Color")) mat.SetColor("_Color", Color.white);
        if (mat.HasProperty("_BaseColor")) mat.SetColor("_BaseColor", Color.white);

        quadGO = GameObject.CreatePrimitive(PrimitiveType.Quad);
        quadGO.name = "SpriteQuad";
        quadGO.transform.SetParent(transform, false);
        quadGO.transform.localRotation = Quaternion.Euler(90f, 0f, 0f);
        float worldW = (float)W / Mathf.Max(1, pixelsPerUnit);
        float worldH = (float)H / Mathf.Max(1, pixelsPerUnit);
        quadGO.transform.localScale = new Vector3(worldW, worldH, 1f);
        var r = quadGO.GetComponent<MeshRenderer>(); r.sharedMaterial = mat;
        var ccol = quadGO.GetComponent<Collider>(); if (ccol) Destroy(ccol);
    }

    private void EnsureCollider()
    {
        var col = gameObject.GetComponent<BoxCollider>();
        if (col == null) col = gameObject.AddComponent<BoxCollider>();
        float worldW = (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit);
        float worldH = (float)spriteHeightPx / Mathf.Max(1, pixelsPerUnit);
        col.center = new Vector3(0f, 0.05f, 0f);
        col.size = new Vector3(worldW, 0.1f, worldH);
        col.isTrigger = false;
    }

    private void CreateSelectionRing()
    {
        const int S = 64;
        var tex = new Texture2D(S, S, TextureFormat.RGBA32, false);
        tex.filterMode = FilterMode.Point;
        tex.wrapMode = TextureWrapMode.Clamp;
        var px = new Color32[S * S];
        for (int i = 0; i < px.Length; i++) px[i] = new Color32(0, 0, 0, 0);
        float cx = (S - 1) * 0.5f, cy = (S - 1) * 0.5f;
        float rOuter = S * 0.48f;
        float rInner = S * 0.32f;
        for (int y = 0; y < S; y++)
            for (int x = 0; x < S; x++)
            {
                float dx = x - cx, dy = y - cy;
                float d = Mathf.Sqrt(dx * dx + dy * dy);
                if (d <= rOuter && d >= rInner) px[y * S + x] = ringColor;
            }
        tex.SetPixels32(px); tex.Apply(false, false);

        var shader = Shader.Find("Unlit/Transparent") ?? Shader.Find("Sprites/Default") ?? Shader.Find("Unlit/Texture");
        ringMat = new Material(shader);
        if (ringMat.HasProperty("_BaseMap")) ringMat.SetTexture("_BaseMap", tex);
        if (ringMat.HasProperty("_MainTex")) ringMat.SetTexture("_MainTex", tex);
        if (ringMat.HasProperty("_Color")) ringMat.SetColor("_Color", Color.white);
        if (ringMat.HasProperty("_BaseColor")) ringMat.SetColor("_BaseColor", Color.white);
        ringMat.renderQueue = 3000;

        ringGO = GameObject.CreatePrimitive(PrimitiveType.Quad);
        ringGO.name = "SelectionRing";
        ringGO.transform.SetParent(transform, false);
        ringGO.transform.localRotation = Quaternion.Euler(90f, 0f, 0f);
        ringGO.transform.localPosition = new Vector3(0f, 0.025f, 0f);
        float worldW = (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit);
        float scale = worldW * 1.6f;
        ringGO.transform.localScale = new Vector3(scale, scale, 1f);
        var rr = ringGO.GetComponent<MeshRenderer>(); rr.sharedMaterial = ringMat;
        var rc = ringGO.GetComponent<Collider>(); if (rc) Destroy(rc);
        ringGO.SetActive(false);
    }

    // --------------------------------------------------
    // Selection / control visuals
    // --------------------------------------------------
    public void SetControlled(bool on)
    {
        isControlled = on;
        // If we release control, clear sprint state so next time starts normal
        if (!on) { isSprinting = false; manualVel = Vector3.zero; }
        // Visual cue: brighten ring when controlled
        if (ringGO != null && ringMat != null)
        {
            float worldW = (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit);
            float scale = worldW * (on ? 1.9f : 1.6f);
            ringGO.transform.localScale = new Vector3(scale, scale, 1f);

            var col = ringColor;
            if (on) col = Color.Lerp(ringColor, Color.white, 0.3f);
            if (ringMat.HasProperty("_Color")) ringMat.SetColor("_Color", col);
            if (ringMat.HasProperty("_BaseColor")) ringMat.SetColor("_BaseColor", col);
        }
        if (on && interactionState != InteractionState.None)
            EndInteraction();
        // If we just started sprinting pre-control, ensure interactions won't linger
        if (isControlled && isSprinting && interactionState != InteractionState.None)
            EndInteraction();
        if (ringGO != null) ringGO.SetActive(on || isSelected);
    }

    public void SetSelected(bool on)
    {
        isSelected = on;
        if (ringGO != null) ringGO.SetActive(on || isControlled);
    }
}


// ===== FILE: Assets/Scripts/World/Building.cs =====
using UnityEngine;

/// <summary>
/// Base component for placeable buildings.
/// </summary>
public class Building : MonoBehaviour
{
    public string id = "building";
    public string displayName = "Building";
    public bool uniquePerMap = false;
    public Vector2Int size = Vector2Int.one; // tiles wide (X) / deep (Z)

    [Header("Runtime")]
    [SerializeField] protected Vector2Int gridPos; // bottom-left tile of footprint
    [SerializeField] protected float tileSize = 1f;

    public Vector2Int GridPos => gridPos;

    public virtual void OnPlaced(Vector2Int grid, float tile)
    {
        gridPos = grid;
        tileSize = tile;

        // Add/adjust a 3D collider that sits on the XZ plane
        var col3 = GetComponent<BoxCollider>();
        if (col3 == null) col3 = gameObject.AddComponent<BoxCollider>();
        float w = size.x * tileSize;
        float d = size.y * tileSize;
        col3.size = new Vector3(w, 0.1f, d);
        col3.center = new Vector3(w * 0.5f, 0.05f, d * 0.5f);
    }

    public virtual void OnRemoved() { }

    public bool Occupies(Vector2Int tile)
    {
        return tile.x >= gridPos.x && tile.x < gridPos.x + size.x && tile.y >= gridPos.y && tile.y < gridPos.y + size.y;
    }
}


// ===== FILE: Assets/Scripts/World/Buildings/ConstructionBoard.cs =====
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// One-per-map station that offers the Builder job via slots.
/// Footprint: 3x1 tiles (horizontal), anchored at bottom-left.
/// </summary>
public class ConstructionBoard : Building
{
    [SerializeField, Min(0)] private int builderSlots = 1;
    private bool _showInspector;

    private void Start()
    {
        id = "construction_board";
        displayName = string.IsNullOrEmpty(displayName) ? "Construction Board" : displayName;
        uniquePerMap = true;
        size = new Vector2Int(3, 1);
    }

    private void OnMouseUpAsButton()
    {
        _showInspector = !_showInspector;
    }

    public override void OnPlaced(Vector2Int grid, float tile)
    {
        base.OnPlaced(grid, tile);
        JobService js;
#if UNITY_2023_1_OR_NEWER
        js = UnityEngine.Object.FindFirstObjectByType<JobService>();
#else
        js = FindObjectOfType<JobService>();
#endif
        if (js != null)
        {
            js.SetSlots(this, JobType.Builder, builderSlots);
        }

        // Set this object to the grid layer so camera can see it
        gameObject.layer = DetectGridLayer();

        // Visual stub: quad rotated onto XZ so it's visible from top-down
        var mr = GetComponentInChildren<MeshRenderer>();
        if (mr == null)
        {
            var quad = GameObject.CreatePrimitive(PrimitiveType.Quad);
            quad.name = "BoardVisual";
            quad.transform.SetParent(transform, false);
            mr = quad.GetComponent<MeshRenderer>();
            quad.transform.localRotation = Quaternion.Euler(-90f, 0f, 0f);
            quad.layer = gameObject.layer;
            var col = quad.GetComponent<Collider>(); if (col != null) Object.Destroy(col);
        }
        if (mr != null)
        {
            if (mr.sharedMaterial == null) mr.sharedMaterial = new Material(Shader.Find("Unlit/Color"));
            mr.sharedMaterial.color = new Color(0.95f, 0.85f, 0.35f, 1f);
            // Scale to 3x1 footprint (X=width, Z=depth)
            var t = mr.transform;
            t.localRotation = Quaternion.Euler(-90f, 0f, 0f);
            t.localScale = new Vector3(size.x * tileSize, size.y * tileSize, 1f);
            t.localPosition = new Vector3((size.x * tileSize) * 0.5f, 0.01f, (size.y * tileSize) * 0.5f);
        }
    }

    private int DetectGridLayer()
    {
        // Try to find the grid's renderer & inherit its layer
        var grid = FindAnyGridRenderer();
        if (grid != null) return grid.gameObject.layer;
        return 0; // Default
    }

    private static Renderer FindAnyGridRenderer()
    {
        var grid = Object.FindAnyObjectByType<Component>();
        // Try a few common names first
        var go = GameObject.Find("Grid");
        if (go != null)
        {
            var r = go.GetComponentInChildren<Renderer>();
            if (r != null) return r;
        }
        // Fallback: find any renderer tagged as ground or in root
        foreach (var r in Object.FindObjectsByType<Renderer>(FindObjectsSortMode.None))
        {
            if (r.gameObject.name.ToLower().Contains("grid") || r.gameObject.name.ToLower().Contains("ground")) return r;
        }
        return null;
    }

    private void OnGUI()
    {
        if (!_showInspector) return;

        JobService js;
#if UNITY_2023_1_OR_NEWER
        js = UnityEngine.Object.FindFirstObjectByType<JobService>();
#else
        js = FindObjectOfType<JobService>();
#endif
        if (js == null) return;

        Rect r = new Rect(20f, Screen.height * 0.6f, Mathf.Max(260f, Screen.width * 0.22f), Screen.height * 0.35f);
        GUILayout.BeginArea(r, displayName, GUI.skin.window);

        GUILayout.Label("Builder job", GUI.skin.label);
        GUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(32f)))
        {
            builderSlots = Mathf.Max(0, builderSlots - 1);
            js.SetSlots(this, JobType.Builder, builderSlots);
        }
        GUILayout.Label($"Slots: {builderSlots}", GUILayout.Width(120f));
        if (GUILayout.Button("+", GUILayout.Width(32f)))
        {
            builderSlots = Mathf.Min(99, builderSlots + 1);
            js.SetSlots(this, JobType.Builder, builderSlots);
        }
        GUILayout.EndHorizontal();

        GUILayout.Space(6f);
        var assigned = js.AssignedFor(this, JobType.Builder);
        GUILayout.Label($"Assigned ({assigned.Count})");
        int show = Mathf.Min(assigned.Count, 5);
        for (int i = 0; i < show; i++)
        {
            GUILayout.Label($"- {assigned[i].name}");
        }
        if (assigned.Count > show)
        {
            GUILayout.Label($"...and {assigned.Count - show} more");
        }

        GUILayout.FlexibleSpace();
        if (GUILayout.Button("Close")) _showInspector = false;
        GUILayout.EndArea();
    }
}


// ===== FILE: Assets/Scripts/World/SimpleGridMap.cs =====
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Procedurally builds a flat checkerboard grid as a single mesh with two submeshes (A/B colors).
/// Keeps dependencies minimal and works without any art assets.
/// </summary>
[AddComponentMenu("World/Simple Grid Map")]
public class SimpleGridMap : MonoBehaviour
{
    [Header("Size")]
    [Min(1)] public int width = 32;
    [Min(1)] public int height = 32;
    [Min(0.1f)] public float tileSize = 1f;

    [Header("Palette")]
    public Color colorA = new Color(0.42f, 0.48f, 0.33f); // muted grass
    public Color colorB = new Color(0.36f, 0.42f, 0.28f); // darker tile

    MeshFilter _filter;
    MeshRenderer _renderer;

    /// <summary>Rebuilds using serialized dimensions.</summary>
    public void Build()
    {
        Build(width, height, tileSize, colorA, colorB);
    }

    /// <summary>Build grid with explicit parameters.</summary>
    public void Build(int w, int h, float size, Color a, Color b)
    {
        width = Mathf.Max(1, w);
        height = Mathf.Max(1, h);
        tileSize = Mathf.Max(0.1f, size);
        colorA = a;
        colorB = b;

        EnsureComponents();
        var mesh = GenerateMesh(width, height, tileSize);
        _filter.sharedMesh = mesh;

        // Two materials for the two submeshes
        var matA = CreateMaterial();
        var matB = CreateMaterial();
        SetMaterialColor(matA, colorA);
        SetMaterialColor(matB, colorB);
        _renderer.sharedMaterials = new[] { matA, matB };
    }

    void EnsureComponents()
    {
        if (_filter == null)
            _filter = gameObject.GetComponent<MeshFilter>() ?? gameObject.AddComponent<MeshFilter>();
        if (_renderer == null)
            _renderer = gameObject.GetComponent<MeshRenderer>() ?? gameObject.AddComponent<MeshRenderer>();
    }

    Mesh GenerateMesh(int w, int h, float t)
    {
        int tiles = w * h;
        int vCount = tiles * 4;

        var verts = new Vector3[vCount];
        var uvs = new Vector2[vCount];
        var norms = new Vector3[vCount];

        // Two submeshes for checkerboard coloring
        var trisA = new List<int>(tiles * 6 / 2 + 6);
        var trisB = new List<int>(tiles * 6 / 2 + 6);

        int vi = 0;
        for (int y = 0; y < h; y++)
        {
            for (int x = 0; x < w; x++)
            {
                float x0 = x * t;
                float x1 = (x + 1) * t;
                float z0 = y * t;
                float z1 = (y + 1) * t;

                //  v2---v3
                //  |  / |
                //  v0---v1
                int v0 = vi + 0;
                int v1 = vi + 1;
                int v2 = vi + 2;
                int v3 = vi + 3;

                verts[v0] = new Vector3(x0, 0f, z0);
                verts[v1] = new Vector3(x1, 0f, z0);
                verts[v2] = new Vector3(x0, 0f, z1);
                verts[v3] = new Vector3(x1, 0f, z1);

                uvs[v0] = new Vector2(0f, 0f);
                uvs[v1] = new Vector2(1f, 0f);
                uvs[v2] = new Vector2(0f, 1f);
                uvs[v3] = new Vector2(1f, 1f);

                norms[v0] = Vector3.up;
                norms[v1] = Vector3.up;
                norms[v2] = Vector3.up;
                norms[v3] = Vector3.up;

                // Triangles (front face up)
                // v0, v1, v2 and v2, v1, v3 (clockwise when viewed from above)
                var which = ((x + y) & 1) == 0 ? trisA : trisB;
                which.Add(v0); which.Add(v1); which.Add(v2);
                which.Add(v2); which.Add(v1); which.Add(v3);

                vi += 4;
            }
        }

        var mesh = new Mesh();
#if UNITY_2017_3_OR_NEWER
        if (vCount > 65000) mesh.indexFormat = UnityEngine.Rendering.IndexFormat.UInt32;
#endif
        mesh.name = "SimpleGridMap";
        mesh.vertices = verts;
        mesh.uv = uvs;
        mesh.normals = norms;
        mesh.subMeshCount = 2;
        mesh.SetTriangles(trisA, 0, true);
        mesh.SetTriangles(trisB, 1, true);
        mesh.RecalculateBounds();
        return mesh;
    }

    static Material CreateMaterial()
    {
        Shader shader = FindFirstShader(
#if UNITY_2021_2_OR_NEWER
            "Universal Render Pipeline/Unlit",
#endif
            "Unlit/Color",
            "HDRP/Unlit",
            "Sprites/Default",
            "Standard"
        );
        var mat = new Material(shader);
        // Make it a bit less shiny if Standard is used
        if (mat.HasProperty("_Glossiness")) mat.SetFloat("_Glossiness", 0f);
        if (mat.HasProperty("_Metallic")) mat.SetFloat("_Metallic", 0f);
        return mat;
    }

    static Shader FindFirstShader(params string[] names)
    {
        foreach (var n in names)
        {
            var s = Shader.Find(n);
            if (s != null) return s;
        }
        // Fallback to any available shader
        return Shader.Find("Standard") ?? Shader.Find("Sprites/Default");
    }

    static void SetMaterialColor(Material m, Color c)
    {
        // Try common color property names across pipelines
        if (m.HasProperty("_BaseColor")) m.SetColor("_BaseColor", c);
        if (m.HasProperty("_Color")) m.SetColor("_Color", c);
        if (m.HasProperty("_TintColor")) m.SetColor("_TintColor", c);
    }
}



// ===== FILE: Assets/TutorialInfo/Scripts/Editor/ReadmeEditor.cs =====
﻿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System;
using System.IO;
using System.Reflection;

[CustomEditor(typeof(Readme))]
[InitializeOnLoad]
public class ReadmeEditor : Editor
{
    static string s_ShowedReadmeSessionStateName = "ReadmeEditor.showedReadme";
    
    static string s_ReadmeSourceDirectory = "Assets/TutorialInfo";

    const float k_Space = 16f;

    static ReadmeEditor()
    {
        EditorApplication.delayCall += SelectReadmeAutomatically;
    }

    static void RemoveTutorial()
    {
        if (EditorUtility.DisplayDialog("Remove Readme Assets",
            
            $"All contents under {s_ReadmeSourceDirectory} will be removed, are you sure you want to proceed?",
            "Proceed",
            "Cancel"))
        {
            if (Directory.Exists(s_ReadmeSourceDirectory))
            {
                FileUtil.DeleteFileOrDirectory(s_ReadmeSourceDirectory);
                FileUtil.DeleteFileOrDirectory(s_ReadmeSourceDirectory + ".meta");
            }
            else
            {
                Debug.Log($"Could not find the Readme folder at {s_ReadmeSourceDirectory}");
            }

            var readmeAsset = SelectReadme();
            if (readmeAsset != null)
            {
                var path = AssetDatabase.GetAssetPath(readmeAsset);
                FileUtil.DeleteFileOrDirectory(path + ".meta");
                FileUtil.DeleteFileOrDirectory(path);
            }

            AssetDatabase.Refresh();
        }
    }

    static void SelectReadmeAutomatically()
    {
        if (!SessionState.GetBool(s_ShowedReadmeSessionStateName, false))
        {
            var readme = SelectReadme();
            SessionState.SetBool(s_ShowedReadmeSessionStateName, true);

            if (readme && !readme.loadedLayout)
            {
                LoadLayout();
                readme.loadedLayout = true;
            }
        }
    }

    static void LoadLayout()
    {
        var assembly = typeof(EditorApplication).Assembly;
        var windowLayoutType = assembly.GetType("UnityEditor.WindowLayout", true);
        var method = windowLayoutType.GetMethod("LoadWindowLayout", BindingFlags.Public | BindingFlags.Static);
        method.Invoke(null, new object[] { Path.Combine(Application.dataPath, "TutorialInfo/Layout.wlt"), false });
    }

    static Readme SelectReadme()
    {
        var ids = AssetDatabase.FindAssets("Readme t:Readme");
        if (ids.Length == 1)
        {
            var readmeObject = AssetDatabase.LoadMainAssetAtPath(AssetDatabase.GUIDToAssetPath(ids[0]));

            Selection.objects = new UnityEngine.Object[] { readmeObject };

            return (Readme)readmeObject;
        }
        else
        {
            Debug.Log("Couldn't find a readme");
            return null;
        }
    }

    protected override void OnHeaderGUI()
    {
        var readme = (Readme)target;
        Init();

        var iconWidth = Mathf.Min(EditorGUIUtility.currentViewWidth / 3f - 20f, 128f);

        GUILayout.BeginHorizontal("In BigTitle");
        {
            if (readme.icon != null)
            {
                GUILayout.Space(k_Space);
                GUILayout.Label(readme.icon, GUILayout.Width(iconWidth), GUILayout.Height(iconWidth));
            }
            GUILayout.Space(k_Space);
            GUILayout.BeginVertical();
            {

                GUILayout.FlexibleSpace();
                GUILayout.Label(readme.title, TitleStyle);
                GUILayout.FlexibleSpace();
            }
            GUILayout.EndVertical();
            GUILayout.FlexibleSpace();
        }
        GUILayout.EndHorizontal();
    }

    public override void OnInspectorGUI()
    {
        var readme = (Readme)target;
        Init();

        foreach (var section in readme.sections)
        {
            if (!string.IsNullOrEmpty(section.heading))
            {
                GUILayout.Label(section.heading, HeadingStyle);
            }

            if (!string.IsNullOrEmpty(section.text))
            {
                GUILayout.Label(section.text, BodyStyle);
            }

            if (!string.IsNullOrEmpty(section.linkText))
            {
                if (LinkLabel(new GUIContent(section.linkText)))
                {
                    Application.OpenURL(section.url);
                }
            }

            GUILayout.Space(k_Space);
        }

        if (GUILayout.Button("Remove Readme Assets", ButtonStyle))
        {
            RemoveTutorial();
        }
    }

    bool m_Initialized;

    GUIStyle LinkStyle
    {
        get { return m_LinkStyle; }
    }

    [SerializeField]
    GUIStyle m_LinkStyle;

    GUIStyle TitleStyle
    {
        get { return m_TitleStyle; }
    }

    [SerializeField]
    GUIStyle m_TitleStyle;

    GUIStyle HeadingStyle
    {
        get { return m_HeadingStyle; }
    }

    [SerializeField]
    GUIStyle m_HeadingStyle;

    GUIStyle BodyStyle
    {
        get { return m_BodyStyle; }
    }

    [SerializeField]
    GUIStyle m_BodyStyle;

    GUIStyle ButtonStyle
    {
        get { return m_ButtonStyle; }
    }

    [SerializeField]
    GUIStyle m_ButtonStyle;

    void Init()
    {
        if (m_Initialized)
            return;
        m_BodyStyle = new GUIStyle(EditorStyles.label);
        m_BodyStyle.wordWrap = true;
        m_BodyStyle.fontSize = 14;
        m_BodyStyle.richText = true;

        m_TitleStyle = new GUIStyle(m_BodyStyle);
        m_TitleStyle.fontSize = 26;

        m_HeadingStyle = new GUIStyle(m_BodyStyle);
        m_HeadingStyle.fontStyle = FontStyle.Bold;
        m_HeadingStyle.fontSize = 18;

        m_LinkStyle = new GUIStyle(m_BodyStyle);
        m_LinkStyle.wordWrap = false;

        // Match selection color which works nicely for both light and dark skins
        m_LinkStyle.normal.textColor = new Color(0x00 / 255f, 0x78 / 255f, 0xDA / 255f, 1f);
        m_LinkStyle.stretchWidth = false;

        m_ButtonStyle = new GUIStyle(EditorStyles.miniButton);
        m_ButtonStyle.fontStyle = FontStyle.Bold;

        m_Initialized = true;
    }

    bool LinkLabel(GUIContent label, params GUILayoutOption[] options)
    {
        var position = GUILayoutUtility.GetRect(label, LinkStyle, options);

        Handles.BeginGUI();
        Handles.color = LinkStyle.normal.textColor;
        Handles.DrawLine(new Vector3(position.xMin, position.yMax), new Vector3(position.xMax, position.yMax));
        Handles.color = Color.white;
        Handles.EndGUI();

        EditorGUIUtility.AddCursorRect(position, MouseCursor.Link);

        return GUI.Button(position, label, LinkStyle);
    }
}


// ===== FILE: Assets/TutorialInfo/Scripts/Readme.cs =====
﻿using System;
using UnityEngine;

public class Readme : ScriptableObject
{
    public Texture2D icon;
    public string title;
    public Section[] sections;
    public bool loadedLayout;

    [Serializable]
    public class Section
    {
        public string heading, text, linkText, url;
    }
}


