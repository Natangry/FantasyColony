// ===== FILE: Assets/Scripts/Boot/IntroBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures the temporary IntroScreen (Start/Quit) exists when the game boots,
/// independent of scene setup or build order.
/// </summary>
public static class IntroBootstrap
{
    private static bool spawnedOnce;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureIntro()
    {
#if NO_INTRO
        return;
#endif
        if (spawnedOnce)
            return;

        // If an IntroScreen already exists in the scene (FindAnyObjectByType/FindObjectOfType), do nothing.
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<IntroScreen>();
#else
        var existing = Object.FindObjectOfType<IntroScreen>();
#endif
        if (existing != null)
        {
            spawnedOnce = true;
            return;
        }

        // Otherwise, create one.
        var go = new GameObject("IntroScreen (Auto)");
        // Keep it alive across scene loads; the IntroScreen script can hide/clear itself on Start.
        Object.DontDestroyOnLoad(go);
        go.AddComponent<IntroScreen>();

        spawnedOnce = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/WorldBootstrap.cs =====
using UnityEngine;

/// <summary>
/// One-time helper to generate a small default grid world and frame the camera.
/// </summary>
public static class WorldBootstrap
{
    public static void GenerateDefaultGrid(int w = 32, int h = 32, float tile = 1f)
    {
        // Create/find root
        var root = GameObject.Find("World");
        if (root == null)
        {
            root = new GameObject("World");
        }

        // Create/find grid
        var grid = root.GetComponentInChildren<SimpleGridMap>();
        if (grid == null)
        {
            var gridGO = new GameObject("Grid");
            gridGO.transform.SetParent(root.transform, false);
            grid = gridGO.AddComponent<SimpleGridMap>();
        }

        grid.Build(w, h, tile, grid.colorA, grid.colorB);

        EnsureDirectionalLight();
        FrameCameraToGrid(grid);
    }

    static void EnsureDirectionalLight()
    {
        Light dir = null;
#if UNITY_2022_2_OR_NEWER
        var lights = Object.FindObjectsByType<Light>(FindObjectsSortMode.None);
        foreach (var l in lights) { if (l != null && l.type == LightType.Directional) { dir = l; break; } }
#else
        var lights = Object.FindObjectsOfType<Light>();
        foreach (var l in lights) { if (l != null && l.type == LightType.Directional) { dir = l; break; } }
#endif
        if (dir == null)
        {
            var go = new GameObject("Directional Light");
            dir = go.AddComponent<Light>();
            dir.type = LightType.Directional;
            dir.intensity = 1.0f;
            go.transform.rotation = Quaternion.Euler(50f, -30f, 0f);
        }
    }

    static void FrameCameraToGrid(SimpleGridMap grid)
    {
        var cam = Camera.main;
        if (cam == null)
        {
            var camGO = new GameObject("Main Camera");
            cam = camGO.AddComponent<Camera>();
            // Make sure it's tagged correctly so Camera.main works later.
            camGO.tag = "MainCamera";
        }

        // Orthographic top-down
        cam.orthographic = true;
        cam.nearClipPlane = 0.1f;
        cam.farClipPlane = 100f;
        cam.transform.rotation = Quaternion.Euler(90f, 0f, 0f);

        // Compute world center
        float wWorld = grid.width * grid.tileSize;
        float hWorld = grid.height * grid.tileSize;
        var center = new Vector3(
            (grid.width * grid.tileSize) * 0.5f - (grid.tileSize * 0.5f),
            0f,
            (grid.height * grid.tileSize) * 0.5f - (grid.tileSize * 0.5f)
        );

        // Position camera above center
        cam.transform.position = new Vector3(center.x, 10f, center.z);

        // Fit orthographic size to show most of the grid with a small margin
        float aspect = (Screen.height > 0) ? (Screen.width / (float)Screen.height) : (16f / 9f);
        float halfHeight = hWorld * 0.5f;
        float halfWidth = wWorld * 0.5f;
        float sizeToFit = Mathf.Max(halfHeight, halfWidth / Mathf.Max(0.1f, aspect));
        cam.orthographicSize = sizeToFit * 1.1f;
    }
}



// ===== FILE: Assets/Scripts/UI/IntroScreen.cs =====
using UnityEngine;

#if UNITY_EDITOR
using UnityEditor;
#endif

/// <summary>
/// Temporary intro overlay with Start / Quit buttons.
/// This version scales its layout and fonts with the screen resolution so it remains readable on 720pâ€“4K.
/// </summary>
[AddComponentMenu("UI/Intro Screen (Temporary)")]
public class IntroScreen : MonoBehaviour
{
    [Header("Responsive Layout")]
    [Tooltip("Panel size as a percentage of the screen (width, height).")]
    [SerializeField] private Vector2 panelPercent = new Vector2(0.40f, 0.45f);

    [Tooltip("Min/Max width (pixels) clamp for the panel.")]
    [SerializeField] private Vector2 panelMinMaxW = new Vector2(420f, 900f);

    [Tooltip("Min/Max height (pixels) clamp for the panel.")]
    [SerializeField] private Vector2 panelMinMaxH = new Vector2(260f, 700f);

    [Header("Typography (as % of screen height)")]
    [SerializeField] private float titlePct = 0.060f;
    [SerializeField] private float buttonPct = 0.035f;

    [Header("Content")]
    [SerializeField] private string gameTitle = "Fantasy Colony";

    private bool showMenu = true;
    private bool focusedFirstButton;

    private GUIStyle titleStyle;
    private GUIStyle buttonStyle;
    private GUIStyle boxStyle;

    private void Awake()
    {
        // Ensure visible on first frame in case another script toggled this beforehand.
        showMenu = true;
    }

    private void OnGUI()
    {
        if (!showMenu)
            return;

        float sw = Screen.width;
        float sh = Screen.height;

        // Compute responsive panel size with sensible clamps.
        float panelW = Mathf.Clamp(sw * Mathf.Clamp01(panelPercent.x), panelMinMaxW.x, panelMinMaxW.y);
        float panelH = Mathf.Clamp(sh * Mathf.Clamp01(panelPercent.y), panelMinMaxH.x, panelMinMaxH.y);
        Rect panelRect = new Rect((sw - panelW) * 0.5f, (sh - panelH) * 0.5f, panelW, panelH);

        // Styles that scale with resolution.
        int titleFontSize = Mathf.Max(18, Mathf.RoundToInt(sh * titlePct));
        int buttonFontSize = Mathf.Max(12, Mathf.RoundToInt(sh * buttonPct));
        float buttonHeight = Mathf.Max(40f, sh * 0.06f);
        float contentPadding = Mathf.Round(panelH * 0.08f);

        // Title
        titleStyle = new GUIStyle(GUI.skin.label)
        {
            alignment = TextAnchor.MiddleCenter,
            fontSize = titleFontSize,
            wordWrap = true,
            richText = true
        };

        // Buttons
        buttonStyle = new GUIStyle(GUI.skin.button)
        {
            fontSize = buttonFontSize
        };

        // Panel background
        boxStyle = new GUIStyle(GUI.skin.box)
        {
            padding = new RectOffset(
                Mathf.RoundToInt(contentPadding),
                Mathf.RoundToInt(contentPadding),
                Mathf.RoundToInt(contentPadding),
                Mathf.RoundToInt(contentPadding))
        };

        GUILayout.BeginArea(panelRect, GUIContent.none, boxStyle);
        {
            GUILayout.FlexibleSpace();

            GUILayout.Label($"<b>{gameTitle}</b>", titleStyle);

            GUILayout.Space(panelH * 0.06f);

            // Focus first button once so keyboard/gamepad users can press Enter/Space.
            if (!focusedFirstButton)
            {
                GUI.SetNextControlName("StartButton");
            }
            if (GUILayout.Button("Start", buttonStyle, GUILayout.Height(buttonHeight)))
            {
                OnStartGame();
            }
            if (!focusedFirstButton)
            {
                GUI.FocusControl("StartButton");
                focusedFirstButton = true;
            }

            GUILayout.Space(panelH * 0.02f);

            if (GUILayout.Button("Quit", buttonStyle, GUILayout.Height(buttonHeight)))
            {
                QuitGame();
            }

            GUILayout.FlexibleSpace();
        }
        GUILayout.EndArea();
    }

    // Called when Start is pressed: clear/hide the intro overlay.
    private void OnStartGame()
    {
        // Generate a small default grid map and frame the camera before hiding the menu.
        WorldBootstrap.GenerateDefaultGrid();

        showMenu = false;
        // The bootstrap GameObject is marked DontDestroyOnLoad, so we simply hide UI here.
        // Additional game flow can be wired in later when a real title scene exists.
    }

    // Called when Quit is pressed: exit the game (or stop play mode in Editor).
    private void QuitGame()
    {
#if UNITY_EDITOR
        EditorApplication.isPlaying = false;
#else
        Application.Quit();
#endif
    }
}



// ===== FILE: Assets/Scripts/World/SimpleGridMap.cs =====
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Procedurally builds a flat checkerboard grid as a single mesh with two submeshes (A/B colors).
/// Keeps dependencies minimal and works without any art assets.
/// </summary>
[AddComponentMenu("World/Simple Grid Map")]
public class SimpleGridMap : MonoBehaviour
{
    [Header("Size")]
    [Min(1)] public int width = 32;
    [Min(1)] public int height = 32;
    [Min(0.1f)] public float tileSize = 1f;

    [Header("Palette")]
    public Color colorA = new Color(0.42f, 0.48f, 0.33f); // muted grass
    public Color colorB = new Color(0.36f, 0.42f, 0.28f); // darker tile

    MeshFilter _filter;
    MeshRenderer _renderer;

    /// <summary>Rebuilds using serialized dimensions.</summary>
    public void Build()
    {
        Build(width, height, tileSize, colorA, colorB);
    }

    /// <summary>Build grid with explicit parameters.</summary>
    public void Build(int w, int h, float size, Color a, Color b)
    {
        width = Mathf.Max(1, w);
        height = Mathf.Max(1, h);
        tileSize = Mathf.Max(0.1f, size);
        colorA = a;
        colorB = b;

        EnsureComponents();
        var mesh = GenerateMesh(width, height, tileSize);
        _filter.sharedMesh = mesh;

        // Two materials for the two submeshes
        var matA = CreateMaterial();
        var matB = CreateMaterial();
        SetMaterialColor(matA, colorA);
        SetMaterialColor(matB, colorB);
        _renderer.sharedMaterials = new[] { matA, matB };
    }

    void EnsureComponents()
    {
        if (_filter == null)
            _filter = gameObject.GetComponent<MeshFilter>() ?? gameObject.AddComponent<MeshFilter>();
        if (_renderer == null)
            _renderer = gameObject.GetComponent<MeshRenderer>() ?? gameObject.AddComponent<MeshRenderer>();
    }

    Mesh GenerateMesh(int w, int h, float t)
    {
        int tiles = w * h;
        int vCount = tiles * 4;

        var verts = new Vector3[vCount];
        var uvs = new Vector2[vCount];
        var norms = new Vector3[vCount];

        // Two submeshes for checkerboard coloring
        var trisA = new List<int>(tiles * 6 / 2 + 6);
        var trisB = new List<int>(tiles * 6 / 2 + 6);

        int vi = 0;
        for (int y = 0; y < h; y++)
        {
            for (int x = 0; x < w; x++)
            {
                float x0 = x * t;
                float x1 = (x + 1) * t;
                float z0 = y * t;
                float z1 = (y + 1) * t;

                //  v2---v3
                //  |  / |
                //  v0---v1
                int v0 = vi + 0;
                int v1 = vi + 1;
                int v2 = vi + 2;
                int v3 = vi + 3;

                verts[v0] = new Vector3(x0, 0f, z0);
                verts[v1] = new Vector3(x1, 0f, z0);
                verts[v2] = new Vector3(x0, 0f, z1);
                verts[v3] = new Vector3(x1, 0f, z1);

                uvs[v0] = new Vector2(0f, 0f);
                uvs[v1] = new Vector2(1f, 0f);
                uvs[v2] = new Vector2(0f, 1f);
                uvs[v3] = new Vector2(1f, 1f);

                norms[v0] = Vector3.up;
                norms[v1] = Vector3.up;
                norms[v2] = Vector3.up;
                norms[v3] = Vector3.up;

                // Triangles (front face up)
                // v0, v1, v2 and v2, v1, v3 (clockwise when viewed from above)
                var which = ((x + y) & 1) == 0 ? trisA : trisB;
                which.Add(v0); which.Add(v1); which.Add(v2);
                which.Add(v2); which.Add(v1); which.Add(v3);

                vi += 4;
            }
        }

        var mesh = new Mesh();
#if UNITY_2017_3_OR_NEWER
        if (vCount > 65000) mesh.indexFormat = UnityEngine.Rendering.IndexFormat.UInt32;
#endif
        mesh.name = "SimpleGridMap";
        mesh.vertices = verts;
        mesh.uv = uvs;
        mesh.normals = norms;
        mesh.subMeshCount = 2;
        mesh.SetTriangles(trisA, 0, true);
        mesh.SetTriangles(trisB, 1, true);
        mesh.RecalculateBounds();
        return mesh;
    }

    static Material CreateMaterial()
    {
        Shader shader = FindFirstShader(
#if UNITY_2021_2_OR_NEWER
            "Universal Render Pipeline/Unlit",
#endif
            "Unlit/Color",
            "HDRP/Unlit",
            "Sprites/Default",
            "Standard"
        );
        var mat = new Material(shader);
        // Make it a bit less shiny if Standard is used
        if (mat.HasProperty("_Glossiness")) mat.SetFloat("_Glossiness", 0f);
        if (mat.HasProperty("_Metallic")) mat.SetFloat("_Metallic", 0f);
        return mat;
    }

    static Shader FindFirstShader(params string[] names)
    {
        foreach (var n in names)
        {
            var s = Shader.Find(n);
            if (s != null) return s;
        }
        // Fallback to any available shader
        return Shader.Find("Standard") ?? Shader.Find("Sprites/Default");
    }

    static void SetMaterialColor(Material m, Color c)
    {
        // Try common color property names across pipelines
        if (m.HasProperty("_BaseColor")) m.SetColor("_BaseColor", c);
        if (m.HasProperty("_Color")) m.SetColor("_Color", c);
        if (m.HasProperty("_TintColor")) m.SetColor("_TintColor", c);
    }
}



// ===== FILE: Assets/TutorialInfo/Scripts/Editor/ReadmeEditor.cs =====
ï»¿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System;
using System.IO;
using System.Reflection;

[CustomEditor(typeof(Readme))]
[InitializeOnLoad]
public class ReadmeEditor : Editor
{
    static string s_ShowedReadmeSessionStateName = "ReadmeEditor.showedReadme";
    
    static string s_ReadmeSourceDirectory = "Assets/TutorialInfo";

    const float k_Space = 16f;

    static ReadmeEditor()
    {
        EditorApplication.delayCall += SelectReadmeAutomatically;
    }

    static void RemoveTutorial()
    {
        if (EditorUtility.DisplayDialog("Remove Readme Assets",
            
            $"All contents under {s_ReadmeSourceDirectory} will be removed, are you sure you want to proceed?",
            "Proceed",
            "Cancel"))
        {
            if (Directory.Exists(s_ReadmeSourceDirectory))
            {
                FileUtil.DeleteFileOrDirectory(s_ReadmeSourceDirectory);
                FileUtil.DeleteFileOrDirectory(s_ReadmeSourceDirectory + ".meta");
            }
            else
            {
                Debug.Log($"Could not find the Readme folder at {s_ReadmeSourceDirectory}");
            }

            var readmeAsset = SelectReadme();
            if (readmeAsset != null)
            {
                var path = AssetDatabase.GetAssetPath(readmeAsset);
                FileUtil.DeleteFileOrDirectory(path + ".meta");
                FileUtil.DeleteFileOrDirectory(path);
            }

            AssetDatabase.Refresh();
        }
    }

    static void SelectReadmeAutomatically()
    {
        if (!SessionState.GetBool(s_ShowedReadmeSessionStateName, false))
        {
            var readme = SelectReadme();
            SessionState.SetBool(s_ShowedReadmeSessionStateName, true);

            if (readme && !readme.loadedLayout)
            {
                LoadLayout();
                readme.loadedLayout = true;
            }
        }
    }

    static void LoadLayout()
    {
        var assembly = typeof(EditorApplication).Assembly;
        var windowLayoutType = assembly.GetType("UnityEditor.WindowLayout", true);
        var method = windowLayoutType.GetMethod("LoadWindowLayout", BindingFlags.Public | BindingFlags.Static);
        method.Invoke(null, new object[] { Path.Combine(Application.dataPath, "TutorialInfo/Layout.wlt"), false });
    }

    static Readme SelectReadme()
    {
        var ids = AssetDatabase.FindAssets("Readme t:Readme");
        if (ids.Length == 1)
        {
            var readmeObject = AssetDatabase.LoadMainAssetAtPath(AssetDatabase.GUIDToAssetPath(ids[0]));

            Selection.objects = new UnityEngine.Object[] { readmeObject };

            return (Readme)readmeObject;
        }
        else
        {
            Debug.Log("Couldn't find a readme");
            return null;
        }
    }

    protected override void OnHeaderGUI()
    {
        var readme = (Readme)target;
        Init();

        var iconWidth = Mathf.Min(EditorGUIUtility.currentViewWidth / 3f - 20f, 128f);

        GUILayout.BeginHorizontal("In BigTitle");
        {
            if (readme.icon != null)
            {
                GUILayout.Space(k_Space);
                GUILayout.Label(readme.icon, GUILayout.Width(iconWidth), GUILayout.Height(iconWidth));
            }
            GUILayout.Space(k_Space);
            GUILayout.BeginVertical();
            {

                GUILayout.FlexibleSpace();
                GUILayout.Label(readme.title, TitleStyle);
                GUILayout.FlexibleSpace();
            }
            GUILayout.EndVertical();
            GUILayout.FlexibleSpace();
        }
        GUILayout.EndHorizontal();
    }

    public override void OnInspectorGUI()
    {
        var readme = (Readme)target;
        Init();

        foreach (var section in readme.sections)
        {
            if (!string.IsNullOrEmpty(section.heading))
            {
                GUILayout.Label(section.heading, HeadingStyle);
            }

            if (!string.IsNullOrEmpty(section.text))
            {
                GUILayout.Label(section.text, BodyStyle);
            }

            if (!string.IsNullOrEmpty(section.linkText))
            {
                if (LinkLabel(new GUIContent(section.linkText)))
                {
                    Application.OpenURL(section.url);
                }
            }

            GUILayout.Space(k_Space);
        }

        if (GUILayout.Button("Remove Readme Assets", ButtonStyle))
        {
            RemoveTutorial();
        }
    }

    bool m_Initialized;

    GUIStyle LinkStyle
    {
        get { return m_LinkStyle; }
    }

    [SerializeField]
    GUIStyle m_LinkStyle;

    GUIStyle TitleStyle
    {
        get { return m_TitleStyle; }
    }

    [SerializeField]
    GUIStyle m_TitleStyle;

    GUIStyle HeadingStyle
    {
        get { return m_HeadingStyle; }
    }

    [SerializeField]
    GUIStyle m_HeadingStyle;

    GUIStyle BodyStyle
    {
        get { return m_BodyStyle; }
    }

    [SerializeField]
    GUIStyle m_BodyStyle;

    GUIStyle ButtonStyle
    {
        get { return m_ButtonStyle; }
    }

    [SerializeField]
    GUIStyle m_ButtonStyle;

    void Init()
    {
        if (m_Initialized)
            return;
        m_BodyStyle = new GUIStyle(EditorStyles.label);
        m_BodyStyle.wordWrap = true;
        m_BodyStyle.fontSize = 14;
        m_BodyStyle.richText = true;

        m_TitleStyle = new GUIStyle(m_BodyStyle);
        m_TitleStyle.fontSize = 26;

        m_HeadingStyle = new GUIStyle(m_BodyStyle);
        m_HeadingStyle.fontStyle = FontStyle.Bold;
        m_HeadingStyle.fontSize = 18;

        m_LinkStyle = new GUIStyle(m_BodyStyle);
        m_LinkStyle.wordWrap = false;

        // Match selection color which works nicely for both light and dark skins
        m_LinkStyle.normal.textColor = new Color(0x00 / 255f, 0x78 / 255f, 0xDA / 255f, 1f);
        m_LinkStyle.stretchWidth = false;

        m_ButtonStyle = new GUIStyle(EditorStyles.miniButton);
        m_ButtonStyle.fontStyle = FontStyle.Bold;

        m_Initialized = true;
    }

    bool LinkLabel(GUIContent label, params GUILayoutOption[] options)
    {
        var position = GUILayoutUtility.GetRect(label, LinkStyle, options);

        Handles.BeginGUI();
        Handles.color = LinkStyle.normal.textColor;
        Handles.DrawLine(new Vector3(position.xMin, position.yMax), new Vector3(position.xMax, position.yMax));
        Handles.color = Color.white;
        Handles.EndGUI();

        EditorGUIUtility.AddCursorRect(position, MouseCursor.Link);

        return GUI.Button(position, label, LinkStyle);
    }
}


// ===== FILE: Assets/TutorialInfo/Scripts/Readme.cs =====
ï»¿using System;
using UnityEngine;

public class Readme : ScriptableObject
{
    public Texture2D icon;
    public string title;
    public Section[] sections;
    public bool loadedLayout;

    [Serializable]
    public class Section
    {
        public string heading, text, linkText, url;
    }
}


