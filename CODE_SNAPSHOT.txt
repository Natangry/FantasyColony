// ===== FILE: Assets/Scripts/Boot/CameraBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures the main camera follows the currently controlled pawn and supports free WASD panning.
/// </summary>
public static class CameraBootstrap
{
    private static bool added;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureCameraFollower()
    {
        if (added) return;
        var cam = Camera.main;
        if (cam == null)
        {
            // Minimal fallback camera; WorldBootstrap may reconfigure later.
            var go = new GameObject("Main Camera");
            cam = go.AddComponent<Camera>();
            go.tag = "MainCamera";
            cam.orthographic = true;
            cam.orthographicSize = 10f;
            cam.transform.position = new Vector3(0f, 10f, 0f);
            cam.transform.rotation = Quaternion.Euler(90f, 0f, 0f);
        }

        if (cam.GetComponent<FollowControlledPawn>() == null)
            cam.gameObject.AddComponent<FollowControlledPawn>();

        // Add free camera controls for when no pawn is controlled.
        if (cam.GetComponent<FreeCameraController>() == null)
            cam.gameObject.AddComponent<FreeCameraController>();

        added = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/InteractionBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures a PawnInteractionManager exists at runtime to coordinate pawn-to-pawn interactions.
/// </summary>
public static class InteractionBootstrap
{
    private static bool spawned;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureInteractionManager()
    {
        if (spawned) return;
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<PawnInteractionManager>();
#else
        var existing = Object.FindObjectOfType<PawnInteractionManager>();
#endif
        if (existing != null) { spawned = true; return; }

        var go = new GameObject("PawnInteractionManager (Auto)");
        Object.DontDestroyOnLoad(go);
        go.AddComponent<PawnInteractionManager>();
        spawned = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/IntroBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures the temporary IntroScreen (Start/Quit) exists when the game boots,
/// independent of scene setup or build order.
/// </summary>
public static class IntroBootstrap
{
    private static bool spawnedOnce;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureIntro()
    {
#if NO_INTRO
        return;
#endif
        if (spawnedOnce)
            return;

        // If an IntroScreen already exists in the scene (FindAnyObjectByType/FindObjectOfType), do nothing.
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<IntroScreen>();
#else
        var existing = Object.FindObjectOfType<IntroScreen>();
#endif
        if (existing != null)
        {
            spawnedOnce = true;
            return;
        }

        // Otherwise, create one.
        var go = new GameObject("IntroScreen (Auto)");
        // Keep it alive across scene loads; the IntroScreen script can hide/clear itself on Start.
        Object.DontDestroyOnLoad(go);
        go.AddComponent<IntroScreen>();

        spawnedOnce = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/PauseBootstrap.cs =====
using UnityEngine;

public static class PauseBootstrap
{
    private static bool spawned;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsurePauseController()
    {
#if NO_INTRO
        // Even if NO_INTRO is defined, we still want pause in gameplay.
#endif
        if (spawned) return;
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<PauseController>();
#else
        var existing = Object.FindObjectOfType<PauseController>();
#endif
        if (existing != null) { spawned = true; return; }

        var go = new GameObject("PauseController (Auto)");
        Object.DontDestroyOnLoad(go);
        go.AddComponent<PauseController>();
        spawned = true;
    }
}


// ===== FILE: Assets/Scripts/Boot/PawnBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Helper to spawn a single SNES-style sprite pawn into the world.
/// </summary>
public static class PawnBootstrap
{
    public static GameObject SpawnSpritePawn()
    {
        // World root
        var root = GameObject.Find("World");
        if (root == null)
        {
            root = new GameObject("World");
        }

        // Avoid duplicates if already spawned.
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<SpritePawn>();
#else
        var existing = Object.FindObjectOfType<SpritePawn>();
#endif
        if (existing != null)
        {
            return existing.gameObject;
        }

        var pawnGO = new GameObject("TestPawn");
        pawnGO.transform.SetParent(root.transform, false);
        pawnGO.AddComponent<SpritePawn>();
        return pawnGO;
    }

    /// <summary>
    /// Spawns a second pawn. Safe to call multiple times; only creates if not already present.
    /// </summary>
    public static GameObject SpawnSecondPawn()
    {
        var root = GameObject.Find("World");
        if (root == null)
        {
            root = new GameObject("World");
        }
        var existingGO = GameObject.Find("TestPawn_2");
        if (existingGO != null) return existingGO;

        var pawn2 = new GameObject("TestPawn_2");
        pawn2.transform.SetParent(root.transform, false);
        pawn2.AddComponent<SpritePawn>(); // same visuals/behavior; will idle-wander by default
        return pawn2;
    }
}



// ===== FILE: Assets/Scripts/Boot/SelectionBootstrap.cs =====
using UnityEngine;

/// <summary>
/// Ensures a SelectionController exists at runtime in any scene.
/// (Updated for marquee selection support)
/// </summary>
public static class SelectionBootstrap
{
    private static bool spawned;

    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterSceneLoad)]
    private static void EnsureSelectionController()
    {
        if (spawned) return;
#if UNITY_2022_2_OR_NEWER
        var existing = Object.FindAnyObjectByType<SelectionController>();
#else
        var existing = Object.FindObjectOfType<SelectionController>();
#endif
        if (existing != null) { spawned = true; return; }

        var go = new GameObject("SelectionController (Auto)");
        Object.DontDestroyOnLoad(go);
        go.AddComponent<SelectionController>();
        // HUD that draws the bottom-left info panel and right-side gizmos
        go.AddComponent<SelectionHUD>();
        spawned = true;
    }
}



// ===== FILE: Assets/Scripts/Boot/WorldBootstrap.cs =====
using UnityEngine;

/// <summary>
/// One-time helper to generate a small default grid world and frame the camera.
/// </summary>
public static class WorldBootstrap
{
    public static void GenerateDefaultGrid(int w = 128, int h = 128, float tile = 1f)
    {
        // Create/find root
        var root = GameObject.Find("World");
        if (root == null)
        {
            root = new GameObject("World");
        }

        // Create/find grid
        var grid = root.GetComponentInChildren<SimpleGridMap>();
        if (grid == null)
        {
            var gridGO = new GameObject("Grid");
            gridGO.transform.SetParent(root.transform, false);
            grid = gridGO.AddComponent<SimpleGridMap>();
        }

        grid.Build(w, h, tile, grid.colorA, grid.colorB);

        EnsureDirectionalLight();
        FrameCameraToGrid(grid);
    }

    static void EnsureDirectionalLight()
    {
        Light dir = null;
#if UNITY_2022_2_OR_NEWER
        var lights = Object.FindObjectsByType<Light>(FindObjectsSortMode.None);
        foreach (var l in lights) { if (l != null && l.type == LightType.Directional) { dir = l; break; } }
#else
        var lights = Object.FindObjectsOfType<Light>();
        foreach (var l in lights) { if (l != null && l.type == LightType.Directional) { dir = l; break; } }
#endif
        if (dir == null)
        {
            var go = new GameObject("Directional Light");
            dir = go.AddComponent<Light>();
            dir.type = LightType.Directional;
            dir.intensity = 1.0f;
            go.transform.rotation = Quaternion.Euler(50f, -30f, 0f);
        }
    }

    static void FrameCameraToGrid(SimpleGridMap grid)
    {
        var cam = Camera.main;
        if (cam == null)
        {
            var camGO = new GameObject("Main Camera");
            cam = camGO.AddComponent<Camera>();
            // Make sure it's tagged correctly so Camera.main works later.
            camGO.tag = "MainCamera";
        }

        // Orthographic top-down
        cam.orthographic = true;
        cam.nearClipPlane = 0.1f;
        cam.farClipPlane = 100f;
        cam.transform.rotation = Quaternion.Euler(90f, 0f, 0f);

        // Compute world center
        float wWorld = grid.width * grid.tileSize;
        float hWorld = grid.height * grid.tileSize;
        var center = new Vector3(
            (grid.width * grid.tileSize) * 0.5f - (grid.tileSize * 0.5f),
            0f,
            (grid.height * grid.tileSize) * 0.5f - (grid.tileSize * 0.5f)
        );

        // Position camera above center
        cam.transform.position = new Vector3(center.x, 10f, center.z);

        // Fit orthographic size to show most of the grid with a small margin
        float aspect = (Screen.height > 0) ? (Screen.width / (float)Screen.height) : (16f / 9f);
        float halfHeight = hWorld * 0.5f;
        float halfWidth = wWorld * 0.5f;
        float sizeToFit = Mathf.Max(halfHeight, halfWidth / Mathf.Max(0.1f, aspect));
        cam.orthographicSize = sizeToFit * 1.1f;
    }
}



// ===== FILE: Assets/Scripts/Camera/FollowControlledPawn.cs =====
using UnityEngine;

/// <summary>
/// When a pawn is assumed controlled, center the camera on it and smoothly follow.
/// Stops following when control is released.
/// </summary>
[AddComponentMenu("Camera/Follow Controlled Pawn")]
public class FollowControlledPawn : MonoBehaviour
{
    [Header("Follow")]
    [SerializeField] private float smoothTime = 0.15f;
    [SerializeField] private bool snapOnAcquire = true;
    [SerializeField] private bool pixelSnap = false; // disable by default to avoid double-quantization jitter
    [Tooltip("Optional XZ world offset from the pawn center.")]
    [SerializeField] private Vector2 offset = Vector2.zero;
    [Header("Stability")]
    [SerializeField] private bool useDeadZone = true;
    [SerializeField] private float deadZonePixels = 0.75f;

    private Camera _cam;
    private Transform _target;
    private Vector3 _vel; // SmoothDamp velocity

    private void Awake()
    {
        _cam = GetComponent<Camera>();
        if (_cam == null) _cam = Camera.main;
    }

    private void OnEnable()
    {
        ControlManager.OnControlledChanged += OnControlledChanged;
        // If a pawn is already controlled at startup, target it immediately.
        if (ControlManager.Controlled != null)
        {
            _target = ControlManager.Controlled.transform;
            if (snapOnAcquire) SnapToTarget();
        }
    }

    private void OnDisable()
    {
        ControlManager.OnControlledChanged -= OnControlledChanged;
    }

    private void OnControlledChanged(SpritePawn pawn)
    {
        _target = pawn ? pawn.transform : null;
        if (_target != null && snapOnAcquire)
        {
            SnapToTarget();
        }
    }

    private void LateUpdate()
    {
        if (_target == null || _cam == null) return;

        // Desired position keeps current camera Y & rotation; moves X/Z toward target.
        Vector3 desired = new Vector3(
            _target.position.x + offset.x,
            _cam.transform.position.y,
            _target.position.z + offset.y
        );

        Vector3 current = _cam.transform.position;

        // Optional dead-zone measured in on-screen pixels to prevent micro hunting.
        if (useDeadZone)
        {
            float dx = desired.x - current.x;
            float dz = desired.z - current.z;
            float dist = Mathf.Sqrt(dx * dx + dz * dz);
            float upp = Mathf.Max(1e-6f, PixelCameraHelper.WorldUnitsPerPixel(_cam));
            float threshold = upp * Mathf.Max(0f, deadZonePixels);
            if (dist <= threshold)
            {
                var snapPos = pixelSnap ? SnapPosToPixelGrid(desired, _cam) : desired;
                _cam.transform.position = snapPos;
                _vel = Vector3.zero;
                return;
            }
        }

        Vector3 pos = Vector3.SmoothDamp(current, desired, ref _vel, Mathf.Max(0.0001f, smoothTime));

        if (pixelSnap)
            pos = SnapPosToPixelGrid(pos, _cam);

        _cam.transform.position = pos;
    }

    private void SnapToTarget()
    {
        if (_target == null || _cam == null) return;
        var pos = new Vector3(
            _target.position.x + offset.x,
            _cam.transform.position.y,
            _target.position.z + offset.y
        );
        if (pixelSnap)
            pos = SnapPosToPixelGrid(pos, _cam);
        _cam.transform.position = pos;
        _vel = Vector3.zero;
    }

    private static Vector3 SnapPosToPixelGrid(Vector3 worldPos, Camera cam)
    {
        float upp = Mathf.Max(1e-6f, PixelCameraHelper.WorldUnitsPerPixel(cam));
        worldPos.x = Mathf.Round(worldPos.x / upp) * upp;
        worldPos.z = Mathf.Round(worldPos.z / upp) * upp;
        return worldPos;
    }
}


// ===== FILE: Assets/Scripts/Camera/FreeCameraController.cs =====
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
#endif
// ReSharper disable Unity.InefficientPropertyAccess
// ReSharper disable Unity.PerformanceCriticalCodeInvocation

/// <summary>
/// Free camera: mouse-wheel zoom (always) + WASD/Arrow panning when no pawn is controlled.
/// Uses unscaled time so you can pan while paused. Top-down, XZ only.
/// </summary>
[AddComponentMenu("Camera/Free Camera Controller")]
public class FreeCameraController : MonoBehaviour
{
    [Header("Movement")]
    [SerializeField] private float moveSpeed = 10f;
    [SerializeField] private float boostMultiplier = 2f;
    [SerializeField] private bool clampToGrid = true;
    [SerializeField] private float clampMargin = 1f;
    [Header("Visibility Rule")]
    [SerializeField, Tooltip("Keep at least this many on-screen pixels of the grid visible on each axis. Set to 1 for 'some part of grid must remain visible'.")] private float minVisiblePixels = 1f;
    
    [Header("Zoom")]
    [SerializeField] private float minOrtho = 3f;
    [SerializeField] private float maxOrtho = 200f;
    [SerializeField] private float zoomSpeed = 8f;          // how fast orthographicSize changes per wheel notch
    [SerializeField] private bool smoothZoom = true;
    [SerializeField] private float zoomSmoothTime = 0.08f;  // unscaled seconds

    private Camera _cam;
    private SimpleGridMap _grid;
    private float _targetOrtho;
    private float _zoomVel;
    private float _skipClampUntil; // unscaled time

#if ENABLE_INPUT_SYSTEM
    private InputAction _move;
    private InputAction _boost;
    private InputAction _scroll;
#endif

    private void Awake()
    {
        _cam = GetComponent<Camera>();
        if (_cam == null) _cam = Camera.main;
        if (_cam != null)
            _targetOrtho = Mathf.Max(0.01f, _cam.orthographicSize);
    }

    private void TryFindGrid()
    {
        if (_grid != null) return;
#if UNITY_2022_2_OR_NEWER
        _grid = UnityEngine.Object.FindAnyObjectByType<SimpleGridMap>();
#else
        _grid = UnityEngine.Object.FindObjectOfType<SimpleGridMap>();
#endif
    }

    private void OnEnable()
    {
        ControlManager.OnControlledChanged += OnControlledChanged;
        if (_cam != null)
            _targetOrtho = Mathf.Max(0.01f, _cam.orthographicSize);

#if ENABLE_INPUT_SYSTEM
        if (_move == null)
        {
            // 2D composite: WASD + Arrows + gamepad stick
            _move = new InputAction("CamMove", type: InputActionType.Value, binding: "2DVector");
            _move.AddCompositeBinding("2DVector")
                .With("Up", "<Keyboard>/w").With("Up", "<Keyboard>/upArrow")
                .With("Down", "<Keyboard>/s").With("Down", "<Keyboard>/downArrow")
                .With("Left", "<Keyboard>/a").With("Left", "<Keyboard>/leftArrow")
                .With("Right", "<Keyboard>/d").With("Right", "<Keyboard>/rightArrow");
            _move.AddBinding("<Gamepad>/leftStick");
        }
        if (_boost == null) _boost = new InputAction("CamBoost", binding: "<Keyboard>/shift");
        if (_scroll == null) _scroll = new InputAction("CamScroll", binding: "<Mouse>/scroll"); // Vector2 (x,y)
        _move.Enable(); _boost.Enable(); _scroll.Enable();
#endif
    }

    private void OnDisable()
    {
        ControlManager.OnControlledChanged -= OnControlledChanged;
#if ENABLE_INPUT_SYSTEM
        _move?.Disable();
        _boost?.Disable();
        _scroll?.Disable();
#endif
    }

    private void Update()
    {
        if (_cam == null) return;

        // --- Zoom (always available, even while controlling a pawn) ---
        float scrollDelta = ReadScrollDelta(); // >0 means wheel up

        // --- Zoom (center-based) ---
        if (Mathf.Abs(scrollDelta) > 0.0001f)
        {
            // Wheel up (positive) -> zoom in -> smaller ortho size
            _targetOrtho = Mathf.Clamp(_targetOrtho - scrollDelta * zoomSpeed, minOrtho, maxOrtho);
        }
        if (smoothZoom)
        {
            _cam.orthographicSize = Mathf.SmoothDamp(_cam.orthographicSize, _targetOrtho, ref _zoomVel, Mathf.Max(0.0001f, zoomSmoothTime), Mathf.Infinity, Time.unscaledDeltaTime);
        }
        else
        {
            _cam.orthographicSize = _targetOrtho;
        }

        // If a pawn is controlled, skip free panning (follow script will move camera). Zoom above already applied.
        if (ControlManager.Controlled != null) return;

        // --- Read move input (free cam only) ---
        Vector2 input = ReadMoveInput();
        if (input.sqrMagnitude > 1f) input.Normalize();
        bool boost = ReadBoost();

        // --- Pan (WASD/Arrows) ---
        float speed = moveSpeed * (boost ? boostMultiplier : 1f);
        Vector3 delta = new Vector3(input.x, 0f, input.y) * speed * Time.unscaledDeltaTime;
        Vector3 pos = _cam.transform.position + delta;

        if (clampToGrid)
        {
            TryFindGrid();
            if (_grid != null && Time.unscaledTime >= _skipClampUntil)
            {
                EnsureGridVisibility(ref pos, _cam, _grid, clampMargin, Mathf.Max(0f, minVisiblePixels));
            }
        }

        _cam.transform.position = pos;
    }

    private void OnControlledChanged(SpritePawn pawn)
    {
        // When control is released (pawn == null), give a short grace window so clamp doesn't snap us.
        if (pawn == null)
            _skipClampUntil = Time.unscaledTime + 0.25f;
    }

    /// <summary>
    /// Ensures that at least 'minVisiblePixels' of the grid remains visible on each axis.
    /// This allows near-infinite panning as long as a sliver of grid is still in view.
    /// </summary>
    private static void EnsureGridVisibility(ref Vector3 camPos, Camera cam, SimpleGridMap grid, float margin, float minVisiblePixels)
    {
        float wWorld = grid.width * grid.tileSize;
        float hWorld = grid.height * grid.tileSize;

        // Subtract half view so camera doesn't show outside the grid.
        float halfH = cam.orthographicSize;
        float aspect = (Screen.height > 0) ? (Screen.width / (float)Screen.height) : (16f / 9f);
        float halfW = halfH * aspect;

        // Grid rect (expanded by margin so we don't put the edge exactly on the viewport border)
        float gMinX = 0f + margin;
        float gMaxX = wWorld - margin;
        float gMinZ = 0f + margin;
        float gMaxZ = hWorld - margin;

        // Camera rect from its center position
        float cMinX = camPos.x - halfW;
        float cMaxX = camPos.x + halfW;
        float cMinZ = camPos.z - halfH;
        float cMaxZ = camPos.z + halfH;

        // Required overlap in world units based on pixels (cap to grid size to avoid impossible requirements)
        float upp = Mathf.Max(1e-6f, PixelCameraHelper.WorldUnitsPerPixel(cam));
        float reqOverlapX = Mathf.Min(minVisiblePixels * upp, Mathf.Max(0f, gMaxX - gMinX));
        float reqOverlapZ = Mathf.Min(minVisiblePixels * upp, Mathf.Max(0f, gMaxZ - gMinZ));

        // --- X axis ---
        {
            float overlapX = Mathf.Min(cMaxX, gMaxX) - Mathf.Max(cMinX, gMinX);
            if (overlapX < reqOverlapX)
            {
                // Compute minimal shift to achieve the required overlap.
                float gridCenterX = 0.5f * (gMinX + gMaxX);
                if (cMaxX <= gMinX) // camera fully left of grid
                {
                    float desiredCamMax = gMinX + reqOverlapX;
                    camPos.x = desiredCamMax - halfW;
                }
                else if (cMinX >= gMaxX) // camera fully right of grid
                {
                    float desiredCamMin = gMaxX - reqOverlapX;
                    camPos.x = desiredCamMin + halfW;
                }
                else // partial overlap: nudge toward grid center
                {
                    float dir = (camPos.x < gridCenterX) ? +1f : -1f;
                    camPos.x += dir * (reqOverlapX - Mathf.Max(0f, overlapX));
                }
            }
        }
        // --- Z axis ---
        {
            float overlapZ = Mathf.Min(cMaxZ, gMaxZ) - Mathf.Max(cMinZ, gMinZ);
            if (overlapZ < reqOverlapZ)
            {
                float gridCenterZ = 0.5f * (gMinZ + gMaxZ);
                if (cMaxZ <= gMinZ) camPos.z = (gMinZ + reqOverlapZ) - halfH;                // fully below grid
                else if (cMinZ >= gMaxZ) camPos.z = (gMaxZ - reqOverlapZ) + halfH;           // fully above grid
                else camPos.z += ((camPos.z < gridCenterZ) ? +1f : -1f) * (reqOverlapZ - Mathf.Max(0f, overlapZ));
            }
        }
    }

    private Vector2 ReadMoveInput()
    {
#if ENABLE_INPUT_SYSTEM
        return _move != null ? _move.ReadValue<Vector2>() : Vector2.zero;
#else
        float x = 0f, y = 0f;
        if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow)) x -= 1f;
        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow)) x += 1f;
        if (Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.DownArrow)) y -= 1f;
        if (Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.UpArrow)) y += 1f;
        return new Vector2(x, y);
#endif
    }

    private bool ReadBoost()
    {
#if ENABLE_INPUT_SYSTEM
        return _boost != null && _boost.IsPressed();
#else
        return Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift);
#endif
    }

    private float ReadScrollDelta()
    {
#if ENABLE_INPUT_SYSTEM
        // New Input System: mouse scroll is in "lines" per frame (y positive = scroll up)
        if (_scroll == null) return 0f;
        Vector2 v = _scroll.ReadValue<Vector2>();
        return v.y;
#else
        // Legacy Input: positive y = scroll up
        return Input.mouseScrollDelta.y;
#endif
    }
}



// ===== FILE: Assets/Scripts/Camera/PixelCameraHelper.cs =====
using UnityEngine;

/// <summary>
/// Utilities for pixel-perfect math with an orthographic camera.
/// </summary>
public static class PixelCameraHelper
{
    /// <summary>
    /// World units per on-screen pixel for the given camera.
    /// </summary>
    public static float WorldUnitsPerPixel(Camera cam)
    {
        if (cam == null) cam = Camera.main;
        if (cam == null) return 1f / 100f; // safe fallback
        // For an ortho camera, vertical world size is 2 * orthographicSize.
        // Divide by screen height (pixels) to get units-per-pixel.
        float h = Screen.height > 0 ? Screen.height : 1080f;
        return (2f * cam.orthographicSize) / h;
    }

    /// <summary>
    /// Snap a world position to the camera's pixel grid (X/Z for top-down).
    /// </summary>
    public static Vector3 SnapToPixelGrid(Vector3 worldPos, Camera cam)
    {
        float upp = Mathf.Max(1e-5f, WorldUnitsPerPixel(cam));
        worldPos.x = Mathf.Round(worldPos.x / upp) * upp;
        worldPos.z = Mathf.Round(worldPos.z / upp) * upp;
        return worldPos;
    }

    /// <summary>
    /// Returns the world-space rectangle (minX,maxX,minZ,maxZ) visible by the camera.
    /// </summary>
    public static (float minX, float maxX, float minZ, float maxZ) OrthoWorldBounds(Camera cam)
    {
        float halfH = cam.orthographicSize;
        float halfW = halfH * ((Screen.height > 0) ? (Screen.width / (float)Screen.height) : (16f/9f));
        return (cam.transform.position.x - halfW, cam.transform.position.x + halfW, cam.transform.position.z - halfH, cam.transform.position.z + halfH);
    }
}



// ===== FILE: Assets/Scripts/Systems/ControlManager.cs =====
using System;
using UnityEngine;

// ReSharper disable Unity.InefficientPropertyAccess
/// <summary>
/// Global "assume control" ownership. Exactly one pawn can be controlled at a time.
/// </summary>
[AddComponentMenu("Systems/Control Manager")]
public class ControlManager : MonoBehaviour
{
    public static SpritePawn Controlled { get; private set; }
    public static event Action<SpritePawn> OnControlledChanged;

    public static void AssumeControl(SpritePawn pawn)
    {
        if (pawn == null) return;
        if (Controlled == pawn)
        {
            // Already controlled; no change but still raise event for listeners if needed.
            try { OnControlledChanged?.Invoke(Controlled); } catch { }
            return;
        }
        // Release previous
        if (Controlled != null) Controlled.SetControlled(false);
        Controlled = pawn;
        Controlled.SetControlled(true);
        SelectionController.SelectOnly(Controlled); // pin selection to the controlled pawn
        try { OnControlledChanged?.Invoke(Controlled); } catch { }
    }

    public static void ReleaseControl()
    {
        if (Controlled == null) return;
        Controlled.SetControlled(false);
        Controlled = null;
        try { OnControlledChanged?.Invoke(null); } catch { }
    }
}



// ===== FILE: Assets/Scripts/Systems/PauseController.cs =====
using System;
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.LowLevel;
#endif

/// <summary>
/// Global pause toggle (Space). Pauses via Time.timeScale and shows a tiny overlay while paused.
/// </summary>
[AddComponentMenu("Systems/Pause Controller")]
public class PauseController : MonoBehaviour
{
    public static bool IsPaused { get; private set; }
    public static float CurrentSpeed { get; private set; } = 1f; // 1x by default
    public static event Action<bool> OnPauseChanged;

    [Header("Overlay")]
    [SerializeField] private Vector2 indicatorPadding = new Vector2(12f, 8f);
    [SerializeField] private float indicatorScale = 0.022f; // % of screen height for font sizing

#if ENABLE_INPUT_SYSTEM
    private InputAction _pauseAction;
    private InputAction _speed1Action;
    private InputAction _speed2Action;
    private InputAction _speed3Action;
#endif

    private void Update()
    {
#if ENABLE_INPUT_SYSTEM
        // With the new Input System active, we use an InputAction (enabled in OnEnable).
#else
        if (Input.GetKeyDown(KeyCode.Space))
        {
            TogglePause();
        }
        if (Input.GetKeyDown(KeyCode.Alpha1)) SetSpeed(1f);
        if (Input.GetKeyDown(KeyCode.Alpha2)) SetSpeed(2f);
        if (Input.GetKeyDown(KeyCode.Alpha3)) SetSpeed(3f);
#endif
    }

    public static void SetPaused(bool pause)
    {
        if (IsPaused == pause) return;
        IsPaused = pause;
        ApplyTimeScale();
#if UNITY_EDITOR
        Debug.Log($"Paused: {IsPaused}");
#endif
        try { OnPauseChanged?.Invoke(IsPaused); } catch { /* no-op */ }
    }

    public static void SetSpeed(float s)
    {
        CurrentSpeed = Mathf.Clamp(s, 0.25f, 3f);
        if (!IsPaused) ApplyTimeScale();
    }

    private static void ApplyTimeScale()
    {
        Time.timeScale = IsPaused ? 0f : CurrentSpeed;
    }

    private void TogglePause()
    {
        SetPaused(!IsPaused);
    }

#if ENABLE_INPUT_SYSTEM
    private void OnEnable()
    {
        if (_pauseAction == null)
        {
            // Bind keyboard Space; also allow gamepad Start as a convenience.
            _pauseAction = new InputAction("Pause", binding: "<Keyboard>/space");
            _pauseAction.AddBinding("<Gamepad>/start");
            _pauseAction.performed += OnPausePerformed;
        }
        if (_speed1Action == null)
        {
            _speed1Action = new InputAction("Speed1", binding: "<Keyboard>/1");
            _speed1Action.performed += ctx => SetSpeed(1f);
        }
        if (_speed2Action == null)
        {
            _speed2Action = new InputAction("Speed2", binding: "<Keyboard>/2");
            _speed2Action.performed += ctx => SetSpeed(2f);
        }
        if (_speed3Action == null)
        {
            _speed3Action = new InputAction("Speed3", binding: "<Keyboard>/3");
            _speed3Action.performed += ctx => SetSpeed(3f);
        }
        _pauseAction.Enable();
        _speed1Action.Enable();
        _speed2Action.Enable();
        _speed3Action.Enable();
    }

    private void OnDisable()
    {
        if (_pauseAction != null)
            _pauseAction.Disable();
        if (_speed1Action != null)
            _speed1Action.Disable();
        if (_speed2Action != null)
            _speed2Action.Disable();
        if (_speed3Action != null)
            _speed3Action.Disable();
    }

    private void OnPausePerformed(InputAction.CallbackContext ctx)
    {
        TogglePause();
    }
#endif

    private void OnGUI()
    {
        // Top-right speed (and paused) indicator
        var sw = Screen.width;
        var sh = Screen.height;

        var label = new GUIStyle(GUI.skin.label)
        {
            alignment = TextAnchor.UpperRight,
            wordWrap = false,
            fontSize = Mathf.Max(12, Mathf.RoundToInt(sh * indicatorScale))
        };

        string text = IsPaused ? $"Paused — Speed: {CurrentSpeed:0.##}×" : $"Speed: {CurrentSpeed:0.##}×";
        Vector2 size = label.CalcSize(new GUIContent(text));
        float x = sw - size.x - indicatorPadding.x;
        float y = indicatorPadding.y;
        GUI.Label(new Rect(x, y, size.x, size.y), text, label);
    }
}


// ===== FILE: Assets/Scripts/Systems/PawnInteractionManager.cs =====
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Detects pawn/pawn overlaps and starts short "chat" interactions:
/// they walk side-by-side for a few seconds, then the follower returns to
/// its collision point along the shortest route.
/// If one pawn is controlled, the non-controlled pawn is always the follower.
/// </summary>
[AddComponentMenu("Systems/Pawn Interaction Manager")]
public class PawnInteractionManager : MonoBehaviour
{
    [SerializeField] private float minChatSeconds = 2.5f;
    [SerializeField] private float maxChatSeconds = 4.0f;
    [SerializeField] private float extraRadiusPadding = 0.12f; // widen trigger to improve reliability
    [SerializeField] private float pairRetestCooldown = 2.0f;  // seconds after an interaction ends before same pair can retrigger

    // Remember last time two specific pawns interacted to avoid immediate retriggers.
    private readonly Dictionary<(int,int), float> pairCooldownUntil = new Dictionary<(int,int), float>();

    private void Update()
    {
        // If any pawn is being controlled, still allow interactions with others (but controlled pawn will always be leader).
        if (SpritePawn.Instances.Count < 2) return;

        var now = Time.unscaledTime;
        // Copy to list to avoid potential enumeration issues if Instances changes mid-frame.
        var list = ListCache;
        list.Clear();
        foreach (var p in SpritePawn.Instances) if (p != null) list.Add(p);

        int n = list.Count;
        for (int i = 0; i < n; i++)
        {
            var a = list[i];
            if (a == null || !a.IsInteractable) continue;

            for (int j = i + 1; j < n; j++)
            {
                var b = list[j];
                if (b == null || !b.IsInteractable) continue;

                // Pair cooldown gate
                var key = GetKey(a, b);
                if (pairCooldownUntil.TryGetValue(key, out float until) && now < until) continue;

                // Distance check (XZ)
                Vector3 pa = a.transform.position;
                Vector3 pb = b.transform.position;
                float dx = pa.x - pb.x;
                float dz = pa.z - pb.z;
                float dist2 = dx * dx + dz * dz;
                float rad = (a.CollisionRadius + b.CollisionRadius) * 1.05f + extraRadiusPadding;
                if (dist2 > rad * rad) continue;

                // Sprinting cancels/ignores interactions (dash through)
                if (a.IsSprinting || b.IsSprinting)
                    continue;

                // Decide leader/follower
                SpritePawn leader, follower;
                if (a.IsControlled && !b.IsControlled) { leader = a; follower = b; }
                else if (b.IsControlled && !a.IsControlled) { leader = b; follower = a; }
                else
                {
                    // 50/50 random when both are AI
                    if (Random.value < 0.5f) { leader = a; follower = b; } else { leader = b; follower = a; }
                }

                // Start chat interaction
                float seconds = Random.Range(minChatSeconds, maxChatSeconds);
                // Use midpoint as collision point so both agree on the same spot visually.
                Vector3 collisionPoint = (pa + pb) * 0.5f;
                leader.BeginChatLeader(follower, seconds, collisionPoint);
                follower.BeginChatFollower(leader, seconds, collisionPoint);

                // Per-pair cooldown
                pairCooldownUntil[key] = now + pairRetestCooldown;
            }
        }
    }

    private static (int,int) GetKey(SpritePawn a, SpritePawn b)
    {
        int ia = a.GetInstanceID();
        int ib = b.GetInstanceID();
        return ia < ib ? (ia, ib) : (ib, ia);
    }

    // Simple reusable list to avoid allocs
    private static readonly List<SpritePawn> ListCache = new List<SpritePawn>(16);
}


// ===== FILE: Assets/Scripts/Systems/SelectionController.cs =====
using System;
using System.Collections.Generic;
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
#endif

/// <summary>
/// Central selection controller.
/// - Single click selects a pawn (click empty clears).
/// - Drag-select (marquee) to select one or many pawns.
/// </summary>
[AddComponentMenu("Systems/Selection Controller")]
public class SelectionController : MonoBehaviour
{
    public static SpritePawn Selected { get; private set; }
    public static event Action<SpritePawn> OnSelectionChanged;
    private static SelectionController _instance;

    private static readonly List<SpritePawn> _selectedGroup = new List<SpritePawn>();
    public static IReadOnlyList<SpritePawn> SelectedGroup => _selectedGroup;

    private Camera _cam;

    // Drag/marquee state (screen-space, origin bottom-left)
    private bool _dragging;
    private Vector2 _dragStart;
    private Vector2 _dragNow;
    private const float _dragThreshold = 6f; // pixels

    // If a press began over HUD, ignore the whole press/drag/release sequence.
    private bool _pressOverHUD;

    // GUI helpers
    private static Texture2D _texWhite;

    private void Awake()
    {
        _cam = Camera.main;
        if (_cam == null)
        {
            // Fallback to any camera in scene
#if UNITY_2022_2_OR_NEWER
            var any = UnityEngine.Object.FindAnyObjectByType<Camera>();
#else
            var any = UnityEngine.Object.FindObjectOfType<Camera>();
#endif
            _cam = any;
        }
    }
    private void OnEnable() { _instance = this; }
    private void OnDisable() { if (_instance == this) _instance = null; }

    private void Update()
    {
        // Handle mouse input for both legacy and new input systems.
#if ENABLE_INPUT_SYSTEM
        var mouse = Mouse.current;
        if (mouse != null)
        {
            Vector2 pos = mouse.position.ReadValue();
            // If we are controlling a pawn, block selection input unless it's over HUD (so gizmos remain usable).
            if (ControlManager.Controlled != null && !IsOverHUD(pos))
            {
                // Still allow HUD clicks to go through (handled in SelectionHUD)
                _pressOverHUD = true;
                return;
            }
            if (IsOverHUD(pos)) { if (mouse.leftButton.wasPressedThisFrame) _pressOverHUD = true; return; }
            if (mouse.leftButton.wasPressedThisFrame) OnMouseDown(pos);
            if (mouse.leftButton.isPressed) OnMouseDrag(pos);
            if (mouse.leftButton.wasReleasedThisFrame) OnMouseUp(pos);
            return;
        }
#endif

        // Legacy Input fallback
        Vector2 mpos = Input.mousePosition;
        if (ControlManager.Controlled != null && !IsOverHUD(mpos))
        {
            if (Input.GetMouseButtonDown(0)) _pressOverHUD = true;
            // Ignore all selection while controlled (unless HUD)
            return;
        }

        if (IsOverHUD(mpos))
        {
            if (Input.GetMouseButtonDown(0)) _pressOverHUD = true;
            return;
        }
        if (Input.GetMouseButtonDown(0)) OnMouseDown(mpos);
        if (Input.GetMouseButton(0)) OnMouseDrag(mpos);
        if (Input.GetMouseButtonUp(0)) OnMouseUp(mpos);
    }

    public static void SetSelected(SpritePawn pawn)
    {
        if (Selected == pawn)
        {
            // Keep group as-is; still raise event for listeners.
            try { OnSelectionChanged?.Invoke(Selected); } catch { }
            return;
        }
        Selected = pawn; // primary selection
        try { OnSelectionChanged?.Invoke(Selected); } catch { /* no-op */ }
    }

    /// <summary>
    /// Clears the group and selects only the provided pawn. Used when assuming control.
    /// </summary>
    public static void SelectOnly(SpritePawn pawn)
    {
        if (_instance == null)
        {
            SetSelected(pawn);
            return;
        }
        // Turn off previous rings
        for (int i = 0; i < _selectedGroup.Count; i++)
        {
            var p = _selectedGroup[i];
            if (p != null) p.SetSelected(false);
        }
        _selectedGroup.Clear();
        if (pawn != null)
        {
            _selectedGroup.Add(pawn);
            pawn.SetSelected(true);
        }
        SetSelected(pawn);
    }
    private void ApplyGroupSelection(List<SpritePawn> newGroup)
    {
        // Turn off previous rings
        for (int i = 0; i < _selectedGroup.Count; i++)
        {
            var p = _selectedGroup[i];
            if (p != null) p.SetSelected(false);
        }

        _selectedGroup.Clear();
        if (newGroup != null && newGroup.Count > 0)
        {
            _selectedGroup.AddRange(newGroup);
            // Turn on rings for new group
            for (int i = 0; i < _selectedGroup.Count; i++)
            {
                var p = _selectedGroup[i];
                if (p != null) p.SetSelected(true);
            }
            // Primary = first
            SetSelected(_selectedGroup[0]);
        }
        else
        {
            SetSelected(null);
        }
    }

    private void SingleClickSelect(Vector2 screenPosBL)
    {
        if (_cam == null) return;
        var ray = _cam.ScreenPointToRay(screenPosBL);
        if (Physics.Raycast(ray, out var hit, 1000f, ~0, QueryTriggerInteraction.Ignore))
        {
            var pawn = hit.collider != null ? hit.collider.GetComponentInParent<SpritePawn>() : null;
            var list = new List<SpritePawn>();
            if (pawn != null) list.Add(pawn);
            ApplyGroupSelection(list);
        }
        else
        {
            ApplyGroupSelection(null);
        }
    }

    private void OnMouseDown(Vector2 screenPosBL)
    {
        if (_pressOverHUD) return;
        _dragStart = screenPosBL;
        _dragNow = screenPosBL;
        _dragging = false;
    }

    private void OnMouseDrag(Vector2 screenPosBL)
    {
        if (_pressOverHUD) return;
        _dragNow = screenPosBL;
        if (!_dragging && Vector2.Distance(_dragStart, _dragNow) > _dragThreshold)
        {
            _dragging = true;
        }
    }

    private void OnMouseUp(Vector2 screenPosBL)
    {
        if (_pressOverHUD) { _pressOverHUD = false; return; }
        _dragNow = screenPosBL;
        if (!_dragging)
        {
            // Treat as a click
            SingleClickSelect(screenPosBL);
        }
        else
        {
            // Marquee select
            var rect = GetScreenRectBL(_dragStart, _dragNow);
            var candidates = new List<SpritePawn>();
            if (_cam != null)
            {
                foreach (var pawn in SpritePawn.Instances)
                {
                    if (pawn == null) continue;
                    var wp = pawn.transform.position;
                    var sp = _cam.WorldToScreenPoint(wp);
                    if (sp.z < 0f) continue; // behind camera
                    var p = new Vector2(sp.x, sp.y); // bottom-left origin
                    if (rect.Contains(p))
                    {
                        candidates.Add(pawn);
                    }
                }
            }
            ApplyGroupSelection(candidates);
        }
        _dragging = false;
    }

    private static Rect GetScreenRectBL(Vector2 aBL, Vector2 bBL)
    {
        float xMin = Mathf.Min(aBL.x, bBL.x);
        float xMax = Mathf.Max(aBL.x, bBL.x);
        float yMin = Mathf.Min(aBL.y, bBL.y);
        float yMax = Mathf.Max(aBL.y, bBL.y);
        return Rect.MinMaxRect(xMin, yMin, xMax, yMax);
    }

    private bool IsOverHUD(Vector2 screenPosBL)
    {
        var p = SelectionHUD.LastPanelRectBL;
        var g = SelectionHUD.LastGizmoRectBL;
        bool overPanel = p.width > 0f && p.height > 0f && p.Contains(screenPosBL);
        bool overGizmo = g.width > 0f && g.height > 0f && g.Contains(screenPosBL);
        return overPanel || overGizmo;
    }

    private void OnGUI()
    {
        if (!_dragging) return;

        var sw = Screen.width;
        var sh = Screen.height;

        // Convert bottom-left rect to GUI-space (top-left origin)
        var rBL = GetScreenRectBL(_dragStart, _dragNow);
        var rGUI = new Rect(rBL.xMin, sh - rBL.yMax, rBL.width, rBL.height);

        if (_texWhite == null)
        {
            _texWhite = new Texture2D(1, 1, TextureFormat.RGBA32, false);
            _texWhite.SetPixel(0, 0, Color.white);
            _texWhite.Apply(false, false);
        }

        // Fill
        var fillCol = new Color(0.2f, 0.6f, 1f, 0.15f);
        var borderCol = new Color(0.2f, 0.6f, 1f, 0.9f);
        GUI.color = fillCol;
        GUI.DrawTexture(rGUI, _texWhite);
        // Border
        GUI.color = borderCol;
        GUI.DrawTexture(new Rect(rGUI.xMin, rGUI.yMin, rGUI.width, 2f), _texWhite);
        GUI.DrawTexture(new Rect(rGUI.xMin, rGUI.yMax - 2f, rGUI.width, 2f), _texWhite);
        GUI.DrawTexture(new Rect(rGUI.xMin, rGUI.yMin, 2f, rGUI.height), _texWhite);
        GUI.DrawTexture(new Rect(rGUI.xMax - 2f, rGUI.yMin, 2f, rGUI.height), _texWhite);
        GUI.color = Color.white;
    }
}


// ===== FILE: Assets/Scripts/UI/IntroScreen.cs =====
using UnityEngine;

public class IntroScreen : MonoBehaviour
{
    [Header("Layout")]
    [SerializeField] private float titlePct = 0.18f;           // % of screen height for the title font size
    [SerializeField] private float buttonPct = 0.06f;          // % of screen height for button height
    [SerializeField] private float minButtonHeight = 64f;      // hard floor so buttons are never tiny
    [SerializeField] private Color backgroundColor = new Color(0.08f, 0.09f, 0.11f, 1f); // opaque

    [Header("Content")]
    [SerializeField] private string gameTitle = "Fantasy Colony";

    [Header("Map Settings")]
    [Tooltip("Select the starting map size.")]
    [SerializeField] private string[] mapSizeLabels = { "32×32", "64×64", "128×128", "256×256" };
    private static readonly int[] mapSizes = { 32, 64, 128, 256 };
    [SerializeField] private int selectedMapIndex = 2; // Default to 128×128

    private bool showMenu = true;
    private GUIStyle titleStyle;
    private GUIStyle buttonStyle;
    private GUIStyle bgStyle;
    private Texture2D bgTex;

    private void EnsureStyles()
    {
        if (bgTex == null)
        {
            bgTex = new Texture2D(1, 1, TextureFormat.RGBA32, false);
            bgTex.SetPixel(0, 0, backgroundColor);
            bgTex.Apply();
        }
        if (bgStyle == null)
        {
            bgStyle = new GUIStyle(GUI.skin.box)
            {
                normal = { background = bgTex },
                border = new RectOffset(0, 0, 0, 0),
                margin = new RectOffset(0, 0, 0, 0),
                padding = new RectOffset(0, 0, 0, 0)
            };
        }
        if (titleStyle == null)
        {
            titleStyle = new GUIStyle(GUI.skin.label)
            {
                alignment = TextAnchor.MiddleCenter,
                fontStyle = FontStyle.Bold,
                wordWrap = true
            };
            titleStyle.normal.textColor = Color.white;
        }
        if (buttonStyle == null)
        {
            buttonStyle = new GUIStyle(GUI.skin.button)
            {
                alignment = TextAnchor.MiddleCenter
            };
        }
    }

    private void OnGUI()
    {
        if (!showMenu) return;

        EnsureStyles();

        // Full-screen opaque background
        Rect full = new Rect(0, 0, Screen.width, Screen.height);
        GUI.Box(full, GUIContent.none, bgStyle);

        // Dynamic sizes based on screen height
        float titleSize = Mathf.Max(32f, Screen.height * titlePct);
        float btnH = Mathf.Max(minButtonHeight, Screen.height * buttonPct);

        titleStyle.fontSize = Mathf.RoundToInt(titleSize);
        buttonStyle.fontSize = Mathf.RoundToInt(btnH * 0.38f);

        GUILayout.BeginArea(full);
        GUILayout.BeginVertical();
        GUILayout.FlexibleSpace();

        // Title
        GUILayout.Label(gameTitle, titleStyle);
        GUILayout.Space(btnH * 0.6f);

        // Map size grid (2×2) with large, tappable buttons
        float gridPadding = Mathf.Max(8f, btnH * 0.25f);
        for (int row = 0; row < 2; row++)
        {
            GUILayout.BeginHorizontal();
            GUILayout.Space(gridPadding);
            for (int col = 0; col < 2; col++)
            {
                int i = row * 2 + col;
                if (i >= mapSizeLabels.Length) break;

                bool isActive = selectedMapIndex == i;
                bool pressed = GUILayout.Toggle(isActive, mapSizeLabels[i], buttonStyle, GUILayout.Height(btnH), GUILayout.ExpandWidth(true));
                if (pressed) selectedMapIndex = i;

                GUILayout.Space(gridPadding);
            }
            GUILayout.EndHorizontal();
            GUILayout.Space(gridPadding * 0.6f);
        }

        GUILayout.Space(btnH * 0.4f);

        // Start button (extra tall)
        if (GUILayout.Button("Start", buttonStyle, GUILayout.Height(btnH * 1.2f)))
        {
            OnStartGame();
        }
        GUILayout.Space(gridPadding * 0.5f);

        // Quit button
        if (GUILayout.Button("Quit", buttonStyle, GUILayout.Height(btnH)))
        {
#if UNITY_EDITOR
            UnityEditor.EditorApplication.isPlaying = false;
#else
            Application.Quit();
#endif
        }

        GUILayout.FlexibleSpace();
        GUILayout.EndVertical();
        GUILayout.EndArea();
    }

    // Called when Start is pressed: clear/hide the intro overlay.
    private void OnStartGame()
    {
        // Generate the selected grid map and frame the camera before hiding the menu.
        int idx = Mathf.Clamp(selectedMapIndex, 0, mapSizes.Length - 1);
        int size = mapSizes[idx];
        WorldBootstrap.GenerateDefaultGrid(size, size, 1f);

        // Spawn test pawns
        PawnBootstrap.SpawnSpritePawn();
        PawnBootstrap.SpawnSecondPawn();

        showMenu = false;
    }
}



// ===== FILE: Assets/Scripts/UI/SelectionHUD.cs =====
using UnityEngine;

/// <summary>
/// Bottom-left info panel (blank for now) and a right-side gizmo strip.
/// Appears only when a pawn is selected. First gizmo: Assume Control / Release.
/// </summary>
[AddComponentMenu("UI/Selection HUD")]
public class SelectionHUD : MonoBehaviour
{
    [Header("Layout")]
    [SerializeField] private Vector2 panelMinMaxW = new Vector2(260f, 420f);
    [SerializeField] private Vector2 panelMinMaxH = new Vector2(130f, 220f);
    [SerializeField] private float panelWidthPct = 0.28f; // of screen width
    [SerializeField] private float panelHeightPct = 0.22f; // of screen height
    [SerializeField] private float margin = 12f;
    [SerializeField] private float gizmoSpacing = 8f;
    [SerializeField] private float buttonHeightPct = 0.055f; // of screen height

    private GUIStyle _panelStyle;
    private GUIStyle _headerStyle;
    private GUIStyle _buttonStyle;
    private GUIStyle _labelStyle;

    // Expose last-drawn HUD rects in SCREEN (bottom-left origin) space so SelectionController can ignore clicks over HUD.
    public static Rect LastPanelRectBL { get; private set; }
    public static Rect LastGizmoRectBL { get; private set; }

    private void OnGUI()
    {
        var selected = SelectionController.Selected;
        if (selected == null)
        {
            LastPanelRectBL = Rect.zero;
            LastGizmoRectBL = Rect.zero;
            return;
        }

        float sw = Screen.width;
        float sh = Screen.height;

        // Sizing
        float panelW = Mathf.Clamp(sw * panelWidthPct, panelMinMaxW.x, panelMinMaxW.y);
        float panelH = Mathf.Clamp(sh * panelHeightPct, panelMinMaxH.x, panelMinMaxH.y);
        float btnH = Mathf.Max(28f, sh * buttonHeightPct);

        // Panel rect (bottom-left anchor)
        var panelRectGUI = new Rect(margin, sh - panelH - margin, panelW, panelH);

        // Gizmo strip to the right of the panel
        var gizmoRectGUI = new Rect(panelRectGUI.xMax + gizmoSpacing, panelRectGUI.y, Mathf.Max(160f, sw * 0.15f), panelRectGUI.height);

        EnsureStyles(sh);

        // Update BL-space rects for input guarding
        LastPanelRectBL = new Rect(panelRectGUI.xMin, sh - (panelRectGUI.yMin + panelRectGUI.height), panelRectGUI.width, panelRectGUI.height);
        LastGizmoRectBL = new Rect(gizmoRectGUI.xMin, sh - (gizmoRectGUI.yMin + gizmoRectGUI.height), gizmoRectGUI.width, gizmoRectGUI.height);

        // Draw panel (blank content for now; just a header for visual structure)
        GUILayout.BeginArea(panelRectGUI, GUIContent.none, _panelStyle);
        {
            GUILayout.Label("Unit Info", _headerStyle);
            GUILayout.Space(btnH * 0.2f);
            // Blank content placeholder
            GUILayout.Label("(Coming soon)", _labelStyle);
            GUILayout.FlexibleSpace();
        }
        GUILayout.EndArea();

        // Gizmos
        GUILayout.BeginArea(gizmoRectGUI);
        {
            // Assume/Release Control
            bool isControlled = (ControlManager.Controlled == selected);
            string btn = isControlled ? "Release Control" : "Assume Control";
            if (GUILayout.Button(btn, _buttonStyle, GUILayout.Height(btnH)))
            {
                if (isControlled) ControlManager.ReleaseControl();
                else ControlManager.AssumeControl(selected);
            }
            // Keep selection pinned to controlled pawn even if HUD was clicked first
            if (ControlManager.Controlled != null && SelectionController.Selected != ControlManager.Controlled)
            {
                SelectionController.SelectOnly(ControlManager.Controlled);
            }

            GUILayout.Space(btnH * 0.25f);
            GUILayout.Label("Tip: WASD/Arrows to move when controlled.\nSpace = Pause. 1/2/3 = Speed.", _labelStyle);
        }
        GUILayout.EndArea();
    }

    void EnsureStyles(float sh)
    {
        if (_panelStyle == null)
        {
            _panelStyle = new GUIStyle(GUI.skin.box)
            {
                padding = new RectOffset(12, 12, 10, 10)
            };
        }
        if (_headerStyle == null)
        {
            _headerStyle = new GUIStyle(GUI.skin.label)
            {
                alignment = TextAnchor.MiddleLeft,
                fontSize = Mathf.Max(14, Mathf.RoundToInt(sh * 0.028f)),
                fontStyle = FontStyle.Bold
            };
        }
        if (_buttonStyle == null)
        {
            _buttonStyle = new GUIStyle(GUI.skin.button)
            {
                fontSize = Mathf.Max(12, Mathf.RoundToInt(sh * 0.024f))
            };
        }
        if (_labelStyle == null)
        {
            _labelStyle = new GUIStyle(GUI.skin.label)
            {
                fontSize = Mathf.Max(11, Mathf.RoundToInt(sh * 0.02f)),
                wordWrap = true
            };
        }
    }
}



// ===== FILE: Assets/Scripts/Units/SpritePawn.cs =====
using System.Collections.Generic;
using UnityEngine;
#if ENABLE_INPUT_SYSTEM
using UnityEngine.InputSystem;
#endif

/// <summary>
/// SNES-style pawn that idly wanders around. Generates its own sprite and
/// supports simple chat interactions with other pawns.
/// </summary>
[AddComponentMenu("Units/Sprite Pawn (Test)")]
public class SpritePawn : MonoBehaviour
{
    // Registry used by selection and interaction systems
    public static readonly HashSet<SpritePawn> Instances = new HashSet<SpritePawn>();

    [Header("Sprite")]
    [SerializeField] private int spriteWidthPx = 16;
    [SerializeField] private int spriteHeightPx = 24;
    [SerializeField] private int pixelsPerUnit = 16;

    [Header("Palette")]
    [SerializeField] private Color body = new Color(0.82f, 0.80f, 0.65f, 1f);
    [SerializeField] private Color shade = new Color(0.62f, 0.60f, 0.48f, 1f);
    [SerializeField] private Color accent = new Color(0.35f, 0.42f, 0.65f, 1f);
    [SerializeField] private Color outline = new Color(0.10f, 0.10f, 0.10f, 1f);

    [Header("Selection Visual")]
    [SerializeField] private Color ringColor = new Color(1f, 0.92f, 0.25f, 1f);

    [Header("Movement")]
    [SerializeField] private float speed = 3f;
    [SerializeField] private float margin = 1.25f;

    [Header("Detection & Timing")]
    [SerializeField] private float collisionRadius = -1f; // <=0 => auto from sprite width
    [SerializeField] private float interactionCooldown = 2f;
    [SerializeField] private Vector2 chatDurationRange = new Vector2(2.5f, 4f);

    [Header("Chat Formation")]
    [SerializeField] private float chatLateral = 0.8f;           // side-by-side offset
    [SerializeField] private float chatApproachSmoothing = 8f;   // follower slot smoothing

    [Header("Idle Wander")]
    [SerializeField] private float wanderArriveRadius = 0.12f;
    [SerializeField] private float wanderPickMargin = 1f;
    [SerializeField] private float wanderMinWait = 0.4f;
    [SerializeField] private float wanderMaxWait = 1.2f;
    [SerializeField] private float wanderRepickSeconds = 6f;

    [Header("Manual Control")]
    [SerializeField] private float manualAccel = 20f;
    [SerializeField] private float manualDecel = 30f;
    private Vector2 manualInput;
    private Vector3 manualVel;

    // Public status used by manager
    public bool IsControlled => isControlled;
    // Allow controlled pawns to participate in interactions (as leaders); manager enforces follower rule.
    public bool IsInteractable => interactionState == InteractionState.None && Time.unscaledTime >= cooldownUntilUnscaled;
    public float CollisionRadius => (collisionRadius > 0f ? collisionRadius : Mathf.Max(0.2f, (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit) * 0.6f));
    [Header("Sprint")]
    [SerializeField] private float sprintMultiplier = 1.6f;
    private bool isSprinting;
    public bool IsSprinting => isSprinting && isControlled;

    // Internal state
    private Camera cam;
    private GameObject quadGO; private Material mat;
    private GameObject ringGO; private Material ringMat;
    private bool isControlled, isSelected;
    private Vector3 logicalPos;
    private Vector3 lastWorldPos, lastVelocity;

    // Wander
    private Vector3 wanderTarget;
    private bool hasWanderTarget;
    private float nextWanderPickUnscaled;
    private float wanderTargetSetUnscaled;
    private SimpleGridMap gridCache;

    // Interaction
    private enum InteractionState { None, ChatLeader, ChatFollower, ReturnToPoint }
    private InteractionState interactionState = InteractionState.None;
    private SpritePawn chatPartner;
    private float chatUntilUnscaled;
    private int chatSide = 1; // +1 right, -1 left relative to leader forward
    private float cooldownUntilUnscaled;
    private Vector3 returnPoint;

#if ENABLE_INPUT_SYSTEM
    private InputAction _moveAction;
#endif

    private void Awake()
    {
        cam = Camera.main;
        if (cam == null)
        {
#if UNITY_2022_2_OR_NEWER
            cam = UnityEngine.Object.FindAnyObjectByType<Camera>();
#else
            cam = UnityEngine.Object.FindObjectOfType<Camera>();
#endif
        }

        CreateVisual();
        EnsureCollider();
        CreateSelectionRing();

        logicalPos = transform.position;
        if (gridCache == null)
        {
#if UNITY_2022_2_OR_NEWER
            gridCache = UnityEngine.Object.FindAnyObjectByType<SimpleGridMap>();
#else
            gridCache = UnityEngine.Object.FindObjectOfType<SimpleGridMap>();
#endif
        }
        if (gridCache != null)
        {
            float w = gridCache.width * gridCache.tileSize;
            float h = gridCache.height * gridCache.tileSize;
            logicalPos = new Vector3(w * 0.5f, 0.02f, h * 0.5f);
        }
        else if (cam != null)
        {
            var b = PixelCameraHelper.OrthoWorldBounds(cam);
            logicalPos = new Vector3((b.minX + b.maxX) * 0.5f, 0.02f, (b.minZ + b.maxZ) * 0.5f);
        }
        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
        PickNewWanderTarget(true);
        FinalizeTransform();
    }

    private void OnEnable()
    {
        Instances.Add(this);
#if ENABLE_INPUT_SYSTEM
        if (_moveAction == null)
        {
            _moveAction = new InputAction("PawnMove", type: InputActionType.Value, binding: "2DVector");
            _moveAction.AddCompositeBinding("2DVector")
                .With("Up", "<Keyboard>/w").With("Up", "<Keyboard>/upArrow")
                .With("Down", "<Keyboard>/s").With("Down", "<Keyboard>/downArrow")
                .With("Left", "<Keyboard>/a").With("Left", "<Keyboard>/leftArrow")
                .With("Right", "<Keyboard>/d").With("Right", "<Keyboard>/rightArrow");
            _moveAction.AddBinding("<Gamepad>/leftStick");
        }
        _moveAction.Enable();
#endif
    }

    private void OnDisable()
    {
        Instances.Remove(this);
#if ENABLE_INPUT_SYSTEM
        _moveAction?.Disable();
#endif
    }

    private void Update()
    {
        if (isControlled && interactionState != InteractionState.None)
            EndInteraction();

        if (interactionState == InteractionState.ChatFollower && chatPartner != null)
        {
            UpdateChatFollower();
            FinalizeTransform();
            return;
        }
        if (interactionState == InteractionState.ReturnToPoint)
        {
            UpdateReturnToPoint();
            FinalizeTransform();
            return;
        }

        // Manual control overrides wandering
        if (isControlled)
        {
            UpdateManualControl();
            FinalizeTransform();
            return;
        }

        // Default idle wandering movement
        UpdateIdleWander();

        // Leader state: allow normal movement while timer runs
        if (interactionState == InteractionState.ChatLeader && Time.unscaledTime >= chatUntilUnscaled)
        {
            EndInteraction();
        }

        FinalizeTransform();
    }

    // ---------------- Manual control ----------------
    private void UpdateManualControl()
    {
        // Toggle sprint with Shift (works on both input systems)
#if ENABLE_INPUT_SYSTEM
        if (Keyboard.current != null &&
            (Keyboard.current.leftShiftKey.wasPressedThisFrame || Keyboard.current.rightShiftKey.wasPressedThisFrame))
        {
            isSprinting = !isSprinting;
        }
#else
        if (Input.GetKeyDown(KeyCode.LeftShift) || Input.GetKeyDown(KeyCode.RightShift)) isSprinting = !isSprinting;
#endif

        Vector2 input = ReadMoveInput();
        if (input.sqrMagnitude > 1f) input.Normalize();

        // target velocity in world XZ plane at "speed"
        float mult = isSprinting ? sprintMultiplier : 1f;
        Vector3 targetVel = new Vector3(input.x, 0f, input.y) * speed * mult;

        // accelerate/decelerate toward target
        Vector3 delta = targetVel - manualVel;
        float accel = (targetVel.sqrMagnitude > manualVel.sqrMagnitude) ? manualAccel : manualDecel;
        Vector3 change = Vector3.ClampMagnitude(delta, accel * Time.deltaTime);
        manualVel += change;

        // move
        logicalPos += manualVel * Time.deltaTime;

        // clamp to grid if available
        if (gridCache == null)
        {
#if UNITY_2022_2_OR_NEWER
            gridCache = UnityEngine.Object.FindAnyObjectByType<SimpleGridMap>();
#else
            gridCache = UnityEngine.Object.FindObjectOfType<SimpleGridMap>();
#endif
        }
        if (gridCache != null)
        {
            float minX = margin, minZ = margin;
            float maxX = gridCache.width * gridCache.tileSize - margin;
            float maxZ = gridCache.height * gridCache.tileSize - margin;
            logicalPos.x = Mathf.Clamp(logicalPos.x, minX, maxX);
            logicalPos.z = Mathf.Clamp(logicalPos.z, minZ, maxZ);
        }

        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
    }

    // --------------------------------------------------
    // Idle wandering
    // --------------------------------------------------
    private void UpdateIdleWander()
    {
        if (!hasWanderTarget || Time.unscaledTime >= nextWanderPickUnscaled ||
            (Time.unscaledTime - wanderTargetSetUnscaled) > wanderRepickSeconds ||
            Vector3.SqrMagnitude(new Vector3(wanderTarget.x - logicalPos.x, 0f, wanderTarget.z - logicalPos.z)) <= wanderArriveRadius * wanderArriveRadius)
        {
            PickNewWanderTarget(false);
        }

        Vector3 to = new Vector3(wanderTarget.x - logicalPos.x, 0f, wanderTarget.z - logicalPos.z);
        float dist = to.magnitude;
        if (dist > 1e-4f)
        {
            Vector3 dir = to / dist;
            float step = Mathf.Min(speed * Time.deltaTime, dist);
            logicalPos += dir * step;
        }
        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
    }

    private void PickNewWanderTarget(bool first)
    {
        if (gridCache == null)
        {
#if UNITY_2022_2_OR_NEWER
            gridCache = UnityEngine.Object.FindAnyObjectByType<SimpleGridMap>();
#else
            gridCache = UnityEngine.Object.FindObjectOfType<SimpleGridMap>();
#endif
        }

        float minX, maxX, minZ, maxZ;
        if (gridCache != null)
        {
            minX = margin + wanderPickMargin;
            minZ = margin + wanderPickMargin;
            maxX = gridCache.width * gridCache.tileSize - (margin + wanderPickMargin);
            maxZ = gridCache.height * gridCache.tileSize - (margin + wanderPickMargin);
        }
        else if (cam != null)
        {
            var b = PixelCameraHelper.OrthoWorldBounds(cam);
            minX = b.minX + (margin + wanderPickMargin);
            maxX = b.maxX - (margin + wanderPickMargin);
            minZ = b.minZ + (margin + wanderPickMargin);
            maxZ = b.maxZ - (margin + wanderPickMargin);
        }
        else
        {
            minX = -5f; maxX = 5f; minZ = -5f; maxZ = 5f;
        }

        if (minX > maxX) { float c = (minX + maxX) * 0.5f; minX = maxX = c; }
        if (minZ > maxZ) { float c = (minZ + maxZ) * 0.5f; minZ = maxZ = c; }

        float x = Random.Range(minX, maxX);
        float z = Random.Range(minZ, maxZ);
        wanderTarget = new Vector3(x, 0.02f, z);
        hasWanderTarget = true;
        wanderTargetSetUnscaled = Time.unscaledTime;
        float wait = first ? 0f : Random.Range(wanderMinWait, wanderMaxWait);
        nextWanderPickUnscaled = Time.unscaledTime + wait;
    }

    // --------------------------------------------------
    // Interaction API & behaviour
    // --------------------------------------------------
    public void BeginChatLeader(SpritePawn follower, float seconds, Vector3 collisionPoint)
    {
        interactionState = InteractionState.ChatLeader;
        chatPartner = follower;
        chatUntilUnscaled = Time.unscaledTime + Mathf.Clamp(seconds, chatDurationRange.x, chatDurationRange.y);
    }

    public void BeginChatFollower(SpritePawn leader, float seconds, Vector3 collisionPoint)
    {
        if (isControlled) return; // cannot be follower if controlled
        interactionState = InteractionState.ChatFollower;
        chatPartner = leader;
        chatUntilUnscaled = Time.unscaledTime + Mathf.Clamp(seconds, chatDurationRange.x, chatDurationRange.y);
        chatSide = Random.value < 0.5f ? -1 : +1;
        returnPoint = collisionPoint;
    }

    private void EndInteraction()
    {
        interactionState = InteractionState.None;
        chatPartner = null;
        cooldownUntilUnscaled = Time.unscaledTime + interactionCooldown;
    }

    private void UpdateChatFollower()
    {
        if (chatPartner == null)
        {
            EndInteraction();
            return;
        }

        Vector3 lp = chatPartner.transform.position;
        Vector3 fwd = chatPartner.lastVelocity.sqrMagnitude > 1e-6f
            ? chatPartner.lastVelocity.normalized
            : new Vector3(1f, 0f, 0f);
        Vector3 right = Vector3.Cross(Vector3.up, fwd).normalized;
        Vector3 slot = lp + right * (chatSide * chatLateral);

        Vector3 to = new Vector3(slot.x - logicalPos.x, 0f, slot.z - logicalPos.z);
        float dist = to.magnitude;
        if (dist > 1e-4f)
        {
            Vector3 dir = to / dist;
            float approach = Mathf.Min(speed, dist * chatApproachSmoothing) * Time.deltaTime;
            logicalPos += dir * approach;
        }
        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);

        if (Time.unscaledTime >= chatUntilUnscaled)
        {
            interactionState = InteractionState.ReturnToPoint;
            chatPartner = null;
        }
    }

    private void UpdateReturnToPoint()
    {
        Vector3 to = new Vector3(returnPoint.x - logicalPos.x, 0f, returnPoint.z - logicalPos.z);
        float dist = to.magnitude;
        float upp = cam != null ? PixelCameraHelper.WorldUnitsPerPixel(cam) : 0.01f;
        float arriveEps = Mathf.Max(upp, 0.05f);
        if (dist <= arriveEps)
        {
            logicalPos = new Vector3(returnPoint.x, 0.02f, returnPoint.z);
            transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
            interactionState = InteractionState.None;
            cooldownUntilUnscaled = Time.unscaledTime + interactionCooldown;
            hasWanderTarget = false;
            PickNewWanderTarget(false);
            return;
        }
        if (dist > 1e-4f)
        {
            Vector3 dir = to / dist;
            float step = Mathf.Min(speed * Time.deltaTime, dist);
            logicalPos += dir * step;
        }
        transform.position = PixelCameraHelper.SnapToPixelGrid(logicalPos, cam);
    }

    // --------------------------------------------------
    // Visual helpers
    // --------------------------------------------------
    private void FinalizeTransform()
    {
        Vector3 wp = transform.position;
        lastVelocity = (Time.deltaTime > 1e-6f) ? (wp - lastWorldPos) / Time.deltaTime : lastVelocity;
        lastVelocity.y = 0f;
        lastWorldPos = wp;
    }

    private Vector2 ReadMoveInput()
    {
#if ENABLE_INPUT_SYSTEM
        if (_moveAction != null) return _moveAction.ReadValue<Vector2>();
        return Vector2.zero;
#else
        float x = 0f, y = 0f;
        if (Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.LeftArrow)) x -= 1f;
        if (Input.GetKey(KeyCode.D) || Input.GetKey(KeyCode.RightArrow)) x += 1f;
        if (Input.GetKey(KeyCode.S) || Input.GetKey(KeyCode.DownArrow)) y -= 1f;
        if (Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.UpArrow)) y += 1f;
        return new Vector2(x, y);
#endif
    }

    private void CreateVisual()
    {
        int W = Mathf.Max(8, spriteWidthPx);
        int H = Mathf.Max(8, spriteHeightPx);
        var tex = new Texture2D(W, H, TextureFormat.RGBA32, false);
        tex.filterMode = FilterMode.Point;
        tex.wrapMode = TextureWrapMode.Clamp;

        var px = new Color32[W * H];
        Color32 cBody = body; Color32 cShade = shade; Color32 cOut = outline; Color32 cAcc = accent;
        for (int y = 0; y < H; y++)
        {
            for (int x = 0; x < W; x++)
            {
                bool border = (x == 0 || y == 0 || x == W - 1 || y == H - 1);
                Color32 c = border ? cOut : (y > H * 0.65f ? cShade : cBody);
                if (!border && y == (int)(H * 0.45f) && x > W * 0.2f && x < W * 0.8f) c = cAcc;
                px[y * W + x] = c;
            }
        }
        tex.SetPixels32(px); tex.Apply(false, false);

        var shader = Shader.Find("Unlit/Transparent") ?? Shader.Find("Sprites/Default") ?? Shader.Find("Unlit/Texture");
        mat = new Material(shader);
        if (mat.HasProperty("_BaseMap")) mat.SetTexture("_BaseMap", tex);
        if (mat.HasProperty("_MainTex")) mat.SetTexture("_MainTex", tex);
        if (mat.HasProperty("_Color")) mat.SetColor("_Color", Color.white);
        if (mat.HasProperty("_BaseColor")) mat.SetColor("_BaseColor", Color.white);

        quadGO = GameObject.CreatePrimitive(PrimitiveType.Quad);
        quadGO.name = "SpriteQuad";
        quadGO.transform.SetParent(transform, false);
        quadGO.transform.localRotation = Quaternion.Euler(90f, 0f, 0f);
        float worldW = (float)W / Mathf.Max(1, pixelsPerUnit);
        float worldH = (float)H / Mathf.Max(1, pixelsPerUnit);
        quadGO.transform.localScale = new Vector3(worldW, worldH, 1f);
        var r = quadGO.GetComponent<MeshRenderer>(); r.sharedMaterial = mat;
        var ccol = quadGO.GetComponent<Collider>(); if (ccol) Destroy(ccol);
    }

    private void EnsureCollider()
    {
        var col = gameObject.GetComponent<BoxCollider>();
        if (col == null) col = gameObject.AddComponent<BoxCollider>();
        float worldW = (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit);
        float worldH = (float)spriteHeightPx / Mathf.Max(1, pixelsPerUnit);
        col.center = new Vector3(0f, 0.05f, 0f);
        col.size = new Vector3(worldW, 0.1f, worldH);
        col.isTrigger = false;
    }

    private void CreateSelectionRing()
    {
        const int S = 64;
        var tex = new Texture2D(S, S, TextureFormat.RGBA32, false);
        tex.filterMode = FilterMode.Point;
        tex.wrapMode = TextureWrapMode.Clamp;
        var px = new Color32[S * S];
        for (int i = 0; i < px.Length; i++) px[i] = new Color32(0, 0, 0, 0);
        float cx = (S - 1) * 0.5f, cy = (S - 1) * 0.5f;
        float rOuter = S * 0.48f;
        float rInner = S * 0.32f;
        for (int y = 0; y < S; y++)
            for (int x = 0; x < S; x++)
            {
                float dx = x - cx, dy = y - cy;
                float d = Mathf.Sqrt(dx * dx + dy * dy);
                if (d <= rOuter && d >= rInner) px[y * S + x] = ringColor;
            }
        tex.SetPixels32(px); tex.Apply(false, false);

        var shader = Shader.Find("Unlit/Transparent") ?? Shader.Find("Sprites/Default") ?? Shader.Find("Unlit/Texture");
        ringMat = new Material(shader);
        if (ringMat.HasProperty("_BaseMap")) ringMat.SetTexture("_BaseMap", tex);
        if (ringMat.HasProperty("_MainTex")) ringMat.SetTexture("_MainTex", tex);
        if (ringMat.HasProperty("_Color")) ringMat.SetColor("_Color", Color.white);
        if (ringMat.HasProperty("_BaseColor")) ringMat.SetColor("_BaseColor", Color.white);
        ringMat.renderQueue = 3000;

        ringGO = GameObject.CreatePrimitive(PrimitiveType.Quad);
        ringGO.name = "SelectionRing";
        ringGO.transform.SetParent(transform, false);
        ringGO.transform.localRotation = Quaternion.Euler(90f, 0f, 0f);
        ringGO.transform.localPosition = new Vector3(0f, 0.025f, 0f);
        float worldW = (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit);
        float scale = worldW * 1.6f;
        ringGO.transform.localScale = new Vector3(scale, scale, 1f);
        var rr = ringGO.GetComponent<MeshRenderer>(); rr.sharedMaterial = ringMat;
        var rc = ringGO.GetComponent<Collider>(); if (rc) Destroy(rc);
        ringGO.SetActive(false);
    }

    // --------------------------------------------------
    // Selection / control visuals
    // --------------------------------------------------
    public void SetControlled(bool on)
    {
        isControlled = on;
        // If we release control, clear sprint state so next time starts normal
        if (!on) { isSprinting = false; manualVel = Vector3.zero; }
        // Visual cue: brighten ring when controlled
        if (ringGO != null && ringMat != null)
        {
            float worldW = (float)spriteWidthPx / Mathf.Max(1, pixelsPerUnit);
            float scale = worldW * (on ? 1.9f : 1.6f);
            ringGO.transform.localScale = new Vector3(scale, scale, 1f);

            var col = ringColor;
            if (on) col = Color.Lerp(ringColor, Color.white, 0.3f);
            if (ringMat.HasProperty("_Color")) ringMat.SetColor("_Color", col);
            if (ringMat.HasProperty("_BaseColor")) ringMat.SetColor("_BaseColor", col);
        }
        if (on && interactionState != InteractionState.None)
            EndInteraction();
        // If we just started sprinting pre-control, ensure interactions won't linger
        if (isControlled && isSprinting && interactionState != InteractionState.None)
            EndInteraction();
        if (ringGO != null) ringGO.SetActive(on || isSelected);
    }

    public void SetSelected(bool on)
    {
        isSelected = on;
        if (ringGO != null) ringGO.SetActive(on || isControlled);
    }
}


// ===== FILE: Assets/Scripts/World/SimpleGridMap.cs =====
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Procedurally builds a flat checkerboard grid as a single mesh with two submeshes (A/B colors).
/// Keeps dependencies minimal and works without any art assets.
/// </summary>
[AddComponentMenu("World/Simple Grid Map")]
public class SimpleGridMap : MonoBehaviour
{
    [Header("Size")]
    [Min(1)] public int width = 32;
    [Min(1)] public int height = 32;
    [Min(0.1f)] public float tileSize = 1f;

    [Header("Palette")]
    public Color colorA = new Color(0.42f, 0.48f, 0.33f); // muted grass
    public Color colorB = new Color(0.36f, 0.42f, 0.28f); // darker tile

    MeshFilter _filter;
    MeshRenderer _renderer;

    /// <summary>Rebuilds using serialized dimensions.</summary>
    public void Build()
    {
        Build(width, height, tileSize, colorA, colorB);
    }

    /// <summary>Build grid with explicit parameters.</summary>
    public void Build(int w, int h, float size, Color a, Color b)
    {
        width = Mathf.Max(1, w);
        height = Mathf.Max(1, h);
        tileSize = Mathf.Max(0.1f, size);
        colorA = a;
        colorB = b;

        EnsureComponents();
        var mesh = GenerateMesh(width, height, tileSize);
        _filter.sharedMesh = mesh;

        // Two materials for the two submeshes
        var matA = CreateMaterial();
        var matB = CreateMaterial();
        SetMaterialColor(matA, colorA);
        SetMaterialColor(matB, colorB);
        _renderer.sharedMaterials = new[] { matA, matB };
    }

    void EnsureComponents()
    {
        if (_filter == null)
            _filter = gameObject.GetComponent<MeshFilter>() ?? gameObject.AddComponent<MeshFilter>();
        if (_renderer == null)
            _renderer = gameObject.GetComponent<MeshRenderer>() ?? gameObject.AddComponent<MeshRenderer>();
    }

    Mesh GenerateMesh(int w, int h, float t)
    {
        int tiles = w * h;
        int vCount = tiles * 4;

        var verts = new Vector3[vCount];
        var uvs = new Vector2[vCount];
        var norms = new Vector3[vCount];

        // Two submeshes for checkerboard coloring
        var trisA = new List<int>(tiles * 6 / 2 + 6);
        var trisB = new List<int>(tiles * 6 / 2 + 6);

        int vi = 0;
        for (int y = 0; y < h; y++)
        {
            for (int x = 0; x < w; x++)
            {
                float x0 = x * t;
                float x1 = (x + 1) * t;
                float z0 = y * t;
                float z1 = (y + 1) * t;

                //  v2---v3
                //  |  / |
                //  v0---v1
                int v0 = vi + 0;
                int v1 = vi + 1;
                int v2 = vi + 2;
                int v3 = vi + 3;

                verts[v0] = new Vector3(x0, 0f, z0);
                verts[v1] = new Vector3(x1, 0f, z0);
                verts[v2] = new Vector3(x0, 0f, z1);
                verts[v3] = new Vector3(x1, 0f, z1);

                uvs[v0] = new Vector2(0f, 0f);
                uvs[v1] = new Vector2(1f, 0f);
                uvs[v2] = new Vector2(0f, 1f);
                uvs[v3] = new Vector2(1f, 1f);

                norms[v0] = Vector3.up;
                norms[v1] = Vector3.up;
                norms[v2] = Vector3.up;
                norms[v3] = Vector3.up;

                // Triangles (front face up)
                // v0, v1, v2 and v2, v1, v3 (clockwise when viewed from above)
                var which = ((x + y) & 1) == 0 ? trisA : trisB;
                which.Add(v0); which.Add(v1); which.Add(v2);
                which.Add(v2); which.Add(v1); which.Add(v3);

                vi += 4;
            }
        }

        var mesh = new Mesh();
#if UNITY_2017_3_OR_NEWER
        if (vCount > 65000) mesh.indexFormat = UnityEngine.Rendering.IndexFormat.UInt32;
#endif
        mesh.name = "SimpleGridMap";
        mesh.vertices = verts;
        mesh.uv = uvs;
        mesh.normals = norms;
        mesh.subMeshCount = 2;
        mesh.SetTriangles(trisA, 0, true);
        mesh.SetTriangles(trisB, 1, true);
        mesh.RecalculateBounds();
        return mesh;
    }

    static Material CreateMaterial()
    {
        Shader shader = FindFirstShader(
#if UNITY_2021_2_OR_NEWER
            "Universal Render Pipeline/Unlit",
#endif
            "Unlit/Color",
            "HDRP/Unlit",
            "Sprites/Default",
            "Standard"
        );
        var mat = new Material(shader);
        // Make it a bit less shiny if Standard is used
        if (mat.HasProperty("_Glossiness")) mat.SetFloat("_Glossiness", 0f);
        if (mat.HasProperty("_Metallic")) mat.SetFloat("_Metallic", 0f);
        return mat;
    }

    static Shader FindFirstShader(params string[] names)
    {
        foreach (var n in names)
        {
            var s = Shader.Find(n);
            if (s != null) return s;
        }
        // Fallback to any available shader
        return Shader.Find("Standard") ?? Shader.Find("Sprites/Default");
    }

    static void SetMaterialColor(Material m, Color c)
    {
        // Try common color property names across pipelines
        if (m.HasProperty("_BaseColor")) m.SetColor("_BaseColor", c);
        if (m.HasProperty("_Color")) m.SetColor("_Color", c);
        if (m.HasProperty("_TintColor")) m.SetColor("_TintColor", c);
    }
}



// ===== FILE: Assets/TutorialInfo/Scripts/Editor/ReadmeEditor.cs =====
﻿using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System;
using System.IO;
using System.Reflection;

[CustomEditor(typeof(Readme))]
[InitializeOnLoad]
public class ReadmeEditor : Editor
{
    static string s_ShowedReadmeSessionStateName = "ReadmeEditor.showedReadme";
    
    static string s_ReadmeSourceDirectory = "Assets/TutorialInfo";

    const float k_Space = 16f;

    static ReadmeEditor()
    {
        EditorApplication.delayCall += SelectReadmeAutomatically;
    }

    static void RemoveTutorial()
    {
        if (EditorUtility.DisplayDialog("Remove Readme Assets",
            
            $"All contents under {s_ReadmeSourceDirectory} will be removed, are you sure you want to proceed?",
            "Proceed",
            "Cancel"))
        {
            if (Directory.Exists(s_ReadmeSourceDirectory))
            {
                FileUtil.DeleteFileOrDirectory(s_ReadmeSourceDirectory);
                FileUtil.DeleteFileOrDirectory(s_ReadmeSourceDirectory + ".meta");
            }
            else
            {
                Debug.Log($"Could not find the Readme folder at {s_ReadmeSourceDirectory}");
            }

            var readmeAsset = SelectReadme();
            if (readmeAsset != null)
            {
                var path = AssetDatabase.GetAssetPath(readmeAsset);
                FileUtil.DeleteFileOrDirectory(path + ".meta");
                FileUtil.DeleteFileOrDirectory(path);
            }

            AssetDatabase.Refresh();
        }
    }

    static void SelectReadmeAutomatically()
    {
        if (!SessionState.GetBool(s_ShowedReadmeSessionStateName, false))
        {
            var readme = SelectReadme();
            SessionState.SetBool(s_ShowedReadmeSessionStateName, true);

            if (readme && !readme.loadedLayout)
            {
                LoadLayout();
                readme.loadedLayout = true;
            }
        }
    }

    static void LoadLayout()
    {
        var assembly = typeof(EditorApplication).Assembly;
        var windowLayoutType = assembly.GetType("UnityEditor.WindowLayout", true);
        var method = windowLayoutType.GetMethod("LoadWindowLayout", BindingFlags.Public | BindingFlags.Static);
        method.Invoke(null, new object[] { Path.Combine(Application.dataPath, "TutorialInfo/Layout.wlt"), false });
    }

    static Readme SelectReadme()
    {
        var ids = AssetDatabase.FindAssets("Readme t:Readme");
        if (ids.Length == 1)
        {
            var readmeObject = AssetDatabase.LoadMainAssetAtPath(AssetDatabase.GUIDToAssetPath(ids[0]));

            Selection.objects = new UnityEngine.Object[] { readmeObject };

            return (Readme)readmeObject;
        }
        else
        {
            Debug.Log("Couldn't find a readme");
            return null;
        }
    }

    protected override void OnHeaderGUI()
    {
        var readme = (Readme)target;
        Init();

        var iconWidth = Mathf.Min(EditorGUIUtility.currentViewWidth / 3f - 20f, 128f);

        GUILayout.BeginHorizontal("In BigTitle");
        {
            if (readme.icon != null)
            {
                GUILayout.Space(k_Space);
                GUILayout.Label(readme.icon, GUILayout.Width(iconWidth), GUILayout.Height(iconWidth));
            }
            GUILayout.Space(k_Space);
            GUILayout.BeginVertical();
            {

                GUILayout.FlexibleSpace();
                GUILayout.Label(readme.title, TitleStyle);
                GUILayout.FlexibleSpace();
            }
            GUILayout.EndVertical();
            GUILayout.FlexibleSpace();
        }
        GUILayout.EndHorizontal();
    }

    public override void OnInspectorGUI()
    {
        var readme = (Readme)target;
        Init();

        foreach (var section in readme.sections)
        {
            if (!string.IsNullOrEmpty(section.heading))
            {
                GUILayout.Label(section.heading, HeadingStyle);
            }

            if (!string.IsNullOrEmpty(section.text))
            {
                GUILayout.Label(section.text, BodyStyle);
            }

            if (!string.IsNullOrEmpty(section.linkText))
            {
                if (LinkLabel(new GUIContent(section.linkText)))
                {
                    Application.OpenURL(section.url);
                }
            }

            GUILayout.Space(k_Space);
        }

        if (GUILayout.Button("Remove Readme Assets", ButtonStyle))
        {
            RemoveTutorial();
        }
    }

    bool m_Initialized;

    GUIStyle LinkStyle
    {
        get { return m_LinkStyle; }
    }

    [SerializeField]
    GUIStyle m_LinkStyle;

    GUIStyle TitleStyle
    {
        get { return m_TitleStyle; }
    }

    [SerializeField]
    GUIStyle m_TitleStyle;

    GUIStyle HeadingStyle
    {
        get { return m_HeadingStyle; }
    }

    [SerializeField]
    GUIStyle m_HeadingStyle;

    GUIStyle BodyStyle
    {
        get { return m_BodyStyle; }
    }

    [SerializeField]
    GUIStyle m_BodyStyle;

    GUIStyle ButtonStyle
    {
        get { return m_ButtonStyle; }
    }

    [SerializeField]
    GUIStyle m_ButtonStyle;

    void Init()
    {
        if (m_Initialized)
            return;
        m_BodyStyle = new GUIStyle(EditorStyles.label);
        m_BodyStyle.wordWrap = true;
        m_BodyStyle.fontSize = 14;
        m_BodyStyle.richText = true;

        m_TitleStyle = new GUIStyle(m_BodyStyle);
        m_TitleStyle.fontSize = 26;

        m_HeadingStyle = new GUIStyle(m_BodyStyle);
        m_HeadingStyle.fontStyle = FontStyle.Bold;
        m_HeadingStyle.fontSize = 18;

        m_LinkStyle = new GUIStyle(m_BodyStyle);
        m_LinkStyle.wordWrap = false;

        // Match selection color which works nicely for both light and dark skins
        m_LinkStyle.normal.textColor = new Color(0x00 / 255f, 0x78 / 255f, 0xDA / 255f, 1f);
        m_LinkStyle.stretchWidth = false;

        m_ButtonStyle = new GUIStyle(EditorStyles.miniButton);
        m_ButtonStyle.fontStyle = FontStyle.Bold;

        m_Initialized = true;
    }

    bool LinkLabel(GUIContent label, params GUILayoutOption[] options)
    {
        var position = GUILayoutUtility.GetRect(label, LinkStyle, options);

        Handles.BeginGUI();
        Handles.color = LinkStyle.normal.textColor;
        Handles.DrawLine(new Vector3(position.xMin, position.yMax), new Vector3(position.xMax, position.yMax));
        Handles.color = Color.white;
        Handles.EndGUI();

        EditorGUIUtility.AddCursorRect(position, MouseCursor.Link);

        return GUI.Button(position, label, LinkStyle);
    }
}


// ===== FILE: Assets/TutorialInfo/Scripts/Readme.cs =====
﻿using System;
using UnityEngine;

public class Readme : ScriptableObject
{
    public Texture2D icon;
    public string title;
    public Section[] sections;
    public bool loadedLayout;

    [Serializable]
    public class Section
    {
        public string heading, text, linkText, url;
    }
}


